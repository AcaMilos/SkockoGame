
SkockoGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013f0  0800bda4  0800bda4  0001bda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d194  0800d194  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800d194  0800d194  0001d194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d19c  0800d19c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d19c  0800d19c  0001d19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1a0  0800d1a0  0001d1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800d1a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000084  0800d228  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  0800d228  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039eb0  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d67  00000000  00000000  00059f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b70  00000000  00000000  0005fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e0  00000000  00000000  00061840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fec4  00000000  00000000  00063220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002468d  00000000  00000000  000930e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119938  00000000  00000000  000b7771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d10a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c34  00000000  00000000  001d10fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bd8c 	.word	0x0800bd8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	0800bd8c 	.word	0x0800bd8c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	; 0x28
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004e2:	f107 031c 	add.w	r3, r7, #28
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
 80004fc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004fe:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <MX_ADC1_Init+0xe0>)
 8000500:	4a2f      	ldr	r2, [pc, #188]	; (80005c0 <MX_ADC1_Init+0xe4>)
 8000502:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000504:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <MX_ADC1_Init+0xe0>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800050a:	4b2c      	ldr	r3, [pc, #176]	; (80005bc <MX_ADC1_Init+0xe0>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000510:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <MX_ADC1_Init+0xe0>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000516:	4b29      	ldr	r3, [pc, #164]	; (80005bc <MX_ADC1_Init+0xe0>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051c:	4b27      	ldr	r3, [pc, #156]	; (80005bc <MX_ADC1_Init+0xe0>)
 800051e:	2204      	movs	r2, #4
 8000520:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000522:	4b26      	ldr	r3, [pc, #152]	; (80005bc <MX_ADC1_Init+0xe0>)
 8000524:	2200      	movs	r2, #0
 8000526:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000528:	4b24      	ldr	r3, [pc, #144]	; (80005bc <MX_ADC1_Init+0xe0>)
 800052a:	2200      	movs	r2, #0
 800052c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800052e:	4b23      	ldr	r3, [pc, #140]	; (80005bc <MX_ADC1_Init+0xe0>)
 8000530:	2201      	movs	r2, #1
 8000532:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000534:	4b21      	ldr	r3, [pc, #132]	; (80005bc <MX_ADC1_Init+0xe0>)
 8000536:	2200      	movs	r2, #0
 8000538:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <MX_ADC1_Init+0xe0>)
 800053e:	2200      	movs	r2, #0
 8000540:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000542:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <MX_ADC1_Init+0xe0>)
 8000544:	2200      	movs	r2, #0
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000548:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <MX_ADC1_Init+0xe0>)
 800054a:	2200      	movs	r2, #0
 800054c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000550:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <MX_ADC1_Init+0xe0>)
 8000552:	2200      	movs	r2, #0
 8000554:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000556:	4b19      	ldr	r3, [pc, #100]	; (80005bc <MX_ADC1_Init+0xe0>)
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800055e:	4817      	ldr	r0, [pc, #92]	; (80005bc <MX_ADC1_Init+0xe0>)
 8000560:	f005 f842 	bl	80055e8 <HAL_ADC_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800056a:	f000 fddf 	bl	800112c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	4619      	mov	r1, r3
 8000578:	4810      	ldr	r0, [pc, #64]	; (80005bc <MX_ADC1_Init+0xe0>)
 800057a:	f006 f9c7 	bl	800690c <HAL_ADCEx_MultiModeConfigChannel>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000584:	f000 fdd2 	bl	800112c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_ADC1_Init+0xe8>)
 800058a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800058c:	2306      	movs	r3, #6
 800058e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000590:	2304      	movs	r3, #4
 8000592:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000594:	237f      	movs	r3, #127	; 0x7f
 8000596:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000598:	2304      	movs	r3, #4
 800059a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4619      	mov	r1, r3
 80005a4:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_ADC1_Init+0xe0>)
 80005a6:	f005 fce3 	bl	8005f70 <HAL_ADC_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80005b0:	f000 fdbc 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b4:	bf00      	nop
 80005b6:	3728      	adds	r7, #40	; 0x28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000a8 	.word	0x200000a8
 80005c0:	50040000 	.word	0x50040000
 80005c4:	14f00020 	.word	0x14f00020

080005c8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
 80005dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80005de:	4b29      	ldr	r3, [pc, #164]	; (8000684 <MX_ADC2_Init+0xbc>)
 80005e0:	4a29      	ldr	r2, [pc, #164]	; (8000688 <MX_ADC2_Init+0xc0>)
 80005e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <MX_ADC2_Init+0xbc>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80005ea:	4b26      	ldr	r3, [pc, #152]	; (8000684 <MX_ADC2_Init+0xbc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <MX_ADC2_Init+0xbc>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <MX_ADC2_Init+0xbc>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fc:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_ADC2_Init+0xbc>)
 80005fe:	2204      	movs	r2, #4
 8000600:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000602:	4b20      	ldr	r3, [pc, #128]	; (8000684 <MX_ADC2_Init+0xbc>)
 8000604:	2200      	movs	r2, #0
 8000606:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_ADC2_Init+0xbc>)
 800060a:	2200      	movs	r2, #0
 800060c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800060e:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_ADC2_Init+0xbc>)
 8000610:	2201      	movs	r2, #1
 8000612:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_ADC2_Init+0xbc>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_ADC2_Init+0xbc>)
 800061e:	2200      	movs	r2, #0
 8000620:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_ADC2_Init+0xbc>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_ADC2_Init+0xbc>)
 800062a:	2200      	movs	r2, #0
 800062c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC2_Init+0xbc>)
 8000632:	2200      	movs	r2, #0
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_ADC2_Init+0xbc>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800063e:	4811      	ldr	r0, [pc, #68]	; (8000684 <MX_ADC2_Init+0xbc>)
 8000640:	f004 ffd2 	bl	80055e8 <HAL_ADC_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800064a:	f000 fd6f 	bl	800112c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_ADC2_Init+0xc4>)
 8000650:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000652:	2306      	movs	r3, #6
 8000654:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000656:	2305      	movs	r3, #5
 8000658:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800065a:	237f      	movs	r3, #127	; 0x7f
 800065c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800065e:	2304      	movs	r3, #4
 8000660:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_ADC2_Init+0xbc>)
 800066c:	f005 fc80 	bl	8005f70 <HAL_ADC_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000676:	f000 fd59 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000010c 	.word	0x2000010c
 8000688:	50040100 	.word	0x50040100
 800068c:	19200040 	.word	0x19200040

08000690 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a3c      	ldr	r2, [pc, #240]	; (80007a0 <HAL_ADC_MspInit+0x110>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d136      	bne.n	8000720 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80006b2:	4b3c      	ldr	r3, [pc, #240]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	4a3a      	ldr	r2, [pc, #232]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80006bc:	4b39      	ldr	r3, [pc, #228]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d10b      	bne.n	80006dc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80006c4:	4b38      	ldr	r3, [pc, #224]	; (80007a8 <HAL_ADC_MspInit+0x118>)
 80006c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c8:	4a37      	ldr	r2, [pc, #220]	; (80007a8 <HAL_ADC_MspInit+0x118>)
 80006ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d0:	4b35      	ldr	r3, [pc, #212]	; (80007a8 <HAL_ADC_MspInit+0x118>)
 80006d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d8:	61bb      	str	r3, [r7, #24]
 80006da:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b32      	ldr	r3, [pc, #200]	; (80007a8 <HAL_ADC_MspInit+0x118>)
 80006de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e0:	4a31      	ldr	r2, [pc, #196]	; (80007a8 <HAL_ADC_MspInit+0x118>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e8:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <HAL_ADC_MspInit+0x118>)
 80006ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006f8:	230b      	movs	r3, #11
 80006fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070a:	f006 fca7 	bl	800705c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2012      	movs	r0, #18
 8000714:	f006 fa85 	bl	8006c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000718:	2012      	movs	r0, #18
 800071a:	f006 fa9e 	bl	8006c5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800071e:	e03a      	b.n	8000796 <HAL_ADC_MspInit+0x106>
  else if(adcHandle->Instance==ADC2)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <HAL_ADC_MspInit+0x11c>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d135      	bne.n	8000796 <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC_CLK_ENABLED++;
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 8000732:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d10b      	bne.n	8000754 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC_CLK_ENABLE();
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <HAL_ADC_MspInit+0x118>)
 800073e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000740:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <HAL_ADC_MspInit+0x118>)
 8000742:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000746:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <HAL_ADC_MspInit+0x118>)
 800074a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <HAL_ADC_MspInit+0x118>)
 8000756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000758:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <HAL_ADC_MspInit+0x118>)
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <HAL_ADC_MspInit+0x118>)
 8000762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800076c:	2302      	movs	r3, #2
 800076e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000770:	230b      	movs	r3, #11
 8000772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000782:	f006 fc6b 	bl	800705c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	2012      	movs	r0, #18
 800078c:	f006 fa49 	bl	8006c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000790:	2012      	movs	r0, #18
 8000792:	f006 fa62 	bl	8006c5a <HAL_NVIC_EnableIRQ>
}
 8000796:	bf00      	nop
 8000798:	3730      	adds	r7, #48	; 0x30
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	50040000 	.word	0x50040000
 80007a4:	20000170 	.word	0x20000170
 80007a8:	40021000 	.word	0x40021000
 80007ac:	50040100 	.word	0x50040100

080007b0 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

	if(hadc == &hadc1){
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <HAL_ADC_ConvCpltCallback+0x44>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d108      	bne.n	80007d2 <HAL_ADC_ConvCpltCallback+0x22>
		ADC_result[RED_POT] = HAL_ADC_GetValue(&hadc1);
 80007c0:	480c      	ldr	r0, [pc, #48]	; (80007f4 <HAL_ADC_ConvCpltCallback+0x44>)
 80007c2:	f005 f999 	bl	8005af8 <HAL_ADC_GetValue>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <HAL_ADC_ConvCpltCallback+0x48>)
 80007ca:	6013      	str	r3, [r2, #0]
		UpdateBrightnessFromADC();
 80007cc:	f000 fa9a 	bl	8000d04 <UpdateBrightnessFromADC>
	}
	else if(hadc == &hadc2){
		ADC_result[BLACK_POT] = HAL_ADC_GetValue(&hadc2);
		UpdateSkockoSymbolFromADC();
	}
}
 80007d0:	e00b      	b.n	80007ea <HAL_ADC_ConvCpltCallback+0x3a>
	else if(hadc == &hadc2){
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a09      	ldr	r2, [pc, #36]	; (80007fc <HAL_ADC_ConvCpltCallback+0x4c>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d107      	bne.n	80007ea <HAL_ADC_ConvCpltCallback+0x3a>
		ADC_result[BLACK_POT] = HAL_ADC_GetValue(&hadc2);
 80007da:	4808      	ldr	r0, [pc, #32]	; (80007fc <HAL_ADC_ConvCpltCallback+0x4c>)
 80007dc:	f005 f98c 	bl	8005af8 <HAL_ADC_GetValue>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <HAL_ADC_ConvCpltCallback+0x48>)
 80007e4:	6053      	str	r3, [r2, #4]
		UpdateSkockoSymbolFromADC();
 80007e6:	f000 faa3 	bl	8000d30 <UpdateSkockoSymbolFromADC>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000a8 	.word	0x200000a8
 80007f8:	200000a0 	.word	0x200000a0
 80007fc:	2000010c 	.word	0x2000010c

08000800 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_DMA_Init+0x38>)
 8000808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800080a:	4a0b      	ldr	r2, [pc, #44]	; (8000838 <MX_DMA_Init+0x38>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6493      	str	r3, [r2, #72]	; 0x48
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_DMA_Init+0x38>)
 8000814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	200e      	movs	r0, #14
 8000824:	f006 f9fd 	bl	8006c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000828:	200e      	movs	r0, #14
 800082a:	f006 fa16 	bl	8006c5a <HAL_NVIC_EnableIRQ>

}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000

0800083c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b42      	ldr	r3, [pc, #264]	; (800095c <MX_GPIO_Init+0x120>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a41      	ldr	r2, [pc, #260]	; (800095c <MX_GPIO_Init+0x120>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b3f      	ldr	r3, [pc, #252]	; (800095c <MX_GPIO_Init+0x120>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b3c      	ldr	r3, [pc, #240]	; (800095c <MX_GPIO_Init+0x120>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a3b      	ldr	r2, [pc, #236]	; (800095c <MX_GPIO_Init+0x120>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b39      	ldr	r3, [pc, #228]	; (800095c <MX_GPIO_Init+0x120>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b36      	ldr	r3, [pc, #216]	; (800095c <MX_GPIO_Init+0x120>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a35      	ldr	r2, [pc, #212]	; (800095c <MX_GPIO_Init+0x120>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b33      	ldr	r3, [pc, #204]	; (800095c <MX_GPIO_Init+0x120>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a4:	f006 fd9c 	bl	80073e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 80008a8:	2200      	movs	r2, #0
 80008aa:	f248 4178 	movw	r1, #33912	; 0x8478
 80008ae:	482c      	ldr	r0, [pc, #176]	; (8000960 <MX_GPIO_Init+0x124>)
 80008b0:	f006 fd96 	bl	80073e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2180      	movs	r1, #128	; 0x80
 80008b8:	482a      	ldr	r0, [pc, #168]	; (8000964 <MX_GPIO_Init+0x128>)
 80008ba:	f006 fd91 	bl	80073e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 80008be:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80008c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	4619      	mov	r1, r3
 80008d4:	4823      	ldr	r0, [pc, #140]	; (8000964 <MX_GPIO_Init+0x128>)
 80008d6:	f006 fbc1 	bl	800705c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA8 PA9 PA10
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80008da:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 80008de:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	4619      	mov	r1, r3
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f006 fbb1 	bl	800705c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB15 PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 80008fa:	f248 4378 	movw	r3, #33912	; 0x8478
 80008fe:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	4813      	ldr	r0, [pc, #76]	; (8000960 <MX_GPIO_Init+0x124>)
 8000914:	f006 fba2 	bl	800705c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_GPIO_Init+0x128>)
 8000930:	f006 fb94 	bl	800705c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2017      	movs	r0, #23
 800093a:	f006 f972 	bl	8006c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800093e:	2017      	movs	r0, #23
 8000940:	f006 f98b 	bl	8006c5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2028      	movs	r0, #40	; 0x28
 800094a:	f006 f96a 	bl	8006c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800094e:	2028      	movs	r0, #40	; 0x28
 8000950:	f006 f983 	bl	8006c5a <HAL_NVIC_EnableIRQ>

}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000
 8000960:	48000400 	.word	0x48000400
 8000964:	48000800 	.word	0x48000800

08000968 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_9){
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000978:	d105      	bne.n	8000986 <HAL_GPIO_EXTI_Callback+0x1e>
		ButtonEvent = BUTTON_1;
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x50>)
 800097c:	2202      	movs	r2, #2
 800097e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim4);
 8000980:	480e      	ldr	r0, [pc, #56]	; (80009bc <HAL_GPIO_EXTI_Callback+0x54>)
 8000982:	f008 fea1 	bl	80096c8 <HAL_TIM_Base_Start_IT>
	}
	if(GPIO_Pin == GPIO_PIN_8){
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800098c:	d105      	bne.n	800099a <HAL_GPIO_EXTI_Callback+0x32>
		ButtonEvent = BUTTON_2;
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x50>)
 8000990:	2204      	movs	r2, #4
 8000992:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim4);
 8000994:	4809      	ldr	r0, [pc, #36]	; (80009bc <HAL_GPIO_EXTI_Callback+0x54>)
 8000996:	f008 fe97 	bl	80096c8 <HAL_TIM_Base_Start_IT>
	}
	if(GPIO_Pin == GPIO_PIN_13){
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009a0:	d105      	bne.n	80009ae <HAL_GPIO_EXTI_Callback+0x46>
		ButtonEvent = BLUE_BUTTON;
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x50>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim4);
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <HAL_GPIO_EXTI_Callback+0x54>)
 80009aa:	f008 fe8d 	bl	80096c8 <HAL_TIM_Base_Start_IT>
	}
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000174 	.word	0x20000174
 80009bc:	200002c0 	.word	0x200002c0

080009c0 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_I2C2_Init+0x74>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <MX_I2C2_Init+0x78>)
 80009c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_I2C2_Init+0x74>)
 80009cc:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <MX_I2C2_Init+0x7c>)
 80009ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_I2C2_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_I2C2_Init+0x74>)
 80009d8:	2201      	movs	r2, #1
 80009da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_I2C2_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_I2C2_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_I2C2_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_I2C2_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_I2C2_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009fa:	480e      	ldr	r0, [pc, #56]	; (8000a34 <MX_I2C2_Init+0x74>)
 80009fc:	f006 fd20 	bl	8007440 <HAL_I2C_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a06:	f000 fb91 	bl	800112c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4809      	ldr	r0, [pc, #36]	; (8000a34 <MX_I2C2_Init+0x74>)
 8000a0e:	f007 f9bb 	bl	8007d88 <HAL_I2CEx_ConfigAnalogFilter>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a18:	f000 fb88 	bl	800112c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_I2C2_Init+0x74>)
 8000a20:	f007 f9fd 	bl	8007e1e <HAL_I2CEx_ConfigDigitalFilter>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a2a:	f000 fb7f 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000178 	.word	0x20000178
 8000a38:	40005800 	.word	0x40005800
 8000a3c:	00303d5b 	.word	0x00303d5b

08000a40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0ac      	sub	sp, #176	; 0xb0
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2288      	movs	r2, #136	; 0x88
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f00b f849 	bl	800baf8 <memset>
  if(i2cHandle->Instance==I2C2)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a3a      	ldr	r2, [pc, #232]	; (8000b54 <HAL_I2C_MspInit+0x114>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d16d      	bne.n	8000b4c <HAL_I2C_MspInit+0x10c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000a74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a78:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f008 f87e 	bl	8008b80 <HAL_RCCEx_PeriphCLKConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a8a:	f000 fb4f 	bl	800112c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	4b32      	ldr	r3, [pc, #200]	; (8000b58 <HAL_I2C_MspInit+0x118>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a31      	ldr	r2, [pc, #196]	; (8000b58 <HAL_I2C_MspInit+0x118>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <HAL_I2C_MspInit+0x118>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000aa6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000aaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aae:	2312      	movs	r3, #18
 8000ab0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aca:	4619      	mov	r1, r3
 8000acc:	4823      	ldr	r0, [pc, #140]	; (8000b5c <HAL_I2C_MspInit+0x11c>)
 8000ace:	f006 fac5 	bl	800705c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <HAL_I2C_MspInit+0x118>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad6:	4a20      	ldr	r2, [pc, #128]	; (8000b58 <HAL_I2C_MspInit+0x118>)
 8000ad8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000adc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <HAL_I2C_MspInit+0x118>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <HAL_I2C_MspInit+0x120>)
 8000aec:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <HAL_I2C_MspInit+0x124>)
 8000aee:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <HAL_I2C_MspInit+0x120>)
 8000af2:	2203      	movs	r2, #3
 8000af4:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <HAL_I2C_MspInit+0x120>)
 8000af8:	2210      	movs	r2, #16
 8000afa:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_I2C_MspInit+0x120>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <HAL_I2C_MspInit+0x120>)
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_I2C_MspInit+0x120>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_I2C_MspInit+0x120>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_I2C_MspInit+0x120>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_I2C_MspInit+0x120>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000b20:	480f      	ldr	r0, [pc, #60]	; (8000b60 <HAL_I2C_MspInit+0x120>)
 8000b22:	f006 f8b5 	bl	8006c90 <HAL_DMA_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 8000b2c:	f000 fafe 	bl	800112c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <HAL_I2C_MspInit+0x120>)
 8000b34:	639a      	str	r2, [r3, #56]	; 0x38
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <HAL_I2C_MspInit+0x120>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2021      	movs	r0, #33	; 0x21
 8000b42:	f006 f86e 	bl	8006c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000b46:	2021      	movs	r0, #33	; 0x21
 8000b48:	f006 f887 	bl	8006c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	37b0      	adds	r7, #176	; 0xb0
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40005800 	.word	0x40005800
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	200001cc 	.word	0x200001cc
 8000b64:	40020044 	.word	0x40020044

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6c:	f004 faca 	bl	8005104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b70:	f000 f838 	bl	8000be4 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b74:	f000 f896 	bl	8000ca4 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b78:	f7ff fe60 	bl	800083c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b7c:	f7ff fe40 	bl	8000800 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b80:	f7ff fcac 	bl	80004dc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b84:	f7ff fd20 	bl	80005c8 <MX_ADC2_Init>
  MX_I2C2_Init();
 8000b88:	f7ff ff1a 	bl	80009c0 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000b8c:	f003 ffc6 	bl	8004b1c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b90:	f004 f812 	bl	8004bb8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b94:	f004 f860 	bl	8004c58 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b98:	f004 f8ac 	bl	8004cf4 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8000b9c:	f004 f9ea 	bl	8004f74 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  ButtonPressed = BUTTON_NONE;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <main+0x60>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
  ButtonEvent	= BUTTON_NONE;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <main+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]

  mySkocko = Skocko::GetInstance(&hi2c2);
 8000bac:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <main+0x68>)
 8000bae:	f000 fe2d 	bl	800180c <_ZN6Skocko11GetInstanceEP19__I2C_HandleTypeDef>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <main+0x6c>)
 8000bb6:	6013      	str	r3, [r2, #0]

  mySkocko->Init(&htim3, &htim5, &huart2);
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <main+0x6c>)
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <main+0x70>)
 8000bbe:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <main+0x74>)
 8000bc0:	4907      	ldr	r1, [pc, #28]	; (8000be0 <main+0x78>)
 8000bc2:	f000 fe41 	bl	8001848 <_ZN6Skocko4InitEP17TIM_HandleTypeDefS1_P20__UART_HandleTypeDef>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <main+0x5e>
 8000bc8:	20000175 	.word	0x20000175
 8000bcc:	20000174 	.word	0x20000174
 8000bd0:	20000178 	.word	0x20000178
 8000bd4:	20000218 	.word	0x20000218
 8000bd8:	20000358 	.word	0x20000358
 8000bdc:	2000030c 	.word	0x2000030c
 8000be0:	20000274 	.word	0x20000274

08000be4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b096      	sub	sp, #88	; 0x58
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	2244      	movs	r2, #68	; 0x44
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f00a ff80 	bl	800baf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c0a:	f007 f963 	bl	8007ed4 <HAL_PWREx_ControlVoltageScaling>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	bf14      	ite	ne
 8000c14:	2301      	movne	r3, #1
 8000c16:	2300      	moveq	r3, #0
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000c1e:	f000 fa85 	bl	800112c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c22:	2302      	movs	r3, #2
 8000c24:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c30:	2302      	movs	r3, #2
 8000c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c34:	2302      	movs	r3, #2
 8000c36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c3c:	230a      	movs	r3, #10
 8000c3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c40:	2307      	movs	r3, #7
 8000c42:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4618      	mov	r0, r3
 8000c52:	f007 f995 	bl	8007f80 <HAL_RCC_OscConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	bf14      	ite	ne
 8000c5c:	2301      	movne	r3, #1
 8000c5e:	2300      	moveq	r3, #0
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000c66:	f000 fa61 	bl	800112c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c7e:	463b      	mov	r3, r7
 8000c80:	2104      	movs	r1, #4
 8000c82:	4618      	mov	r0, r3
 8000c84:	f007 fd58 	bl	8008738 <HAL_RCC_ClockConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	bf14      	ite	ne
 8000c8e:	2301      	movne	r3, #1
 8000c90:	2300      	moveq	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8000c98:	f000 fa48 	bl	800112c <Error_Handler>
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	3758      	adds	r7, #88	; 0x58
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b0a2      	sub	sp, #136	; 0x88
 8000ca8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000caa:	463b      	mov	r3, r7
 8000cac:	2288      	movs	r2, #136	; 0x88
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f00a ff21 	bl	800baf8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cba:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000cbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cc0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000cca:	2308      	movs	r3, #8
 8000ccc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000cda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cde:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f007 ff4c 	bl	8008b80 <HAL_RCCEx_PeriphCLKConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	bf14      	ite	ne
 8000cee:	2301      	movne	r3, #1
 8000cf0:	2300      	moveq	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <_Z24PeriphCommonClock_Configv+0x58>
  {
    Error_Handler();
 8000cf8:	f000 fa18 	bl	800112c <Error_Handler>
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3788      	adds	r7, #136	; 0x88
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <UpdateBrightnessFromADC>:

/* USER CODE BEGIN 4 */


void UpdateBrightnessFromADC(void){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
	uint32_t adcRes = ADC_result[RED_POT];
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <UpdateBrightnessFromADC+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	607b      	str	r3, [r7, #4]
	mySkocko->SetBrightness(adcRes);
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <UpdateBrightnessFromADC+0x28>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	1d3a      	adds	r2, r7, #4
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f001 f8e1 	bl	8001ee0 <_ZN6Skocko13SetBrightnessERKm>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200000a0 	.word	0x200000a0
 8000d2c:	20000218 	.word	0x20000218

08000d30 <UpdateSkockoSymbolFromADC>:


void UpdateSkockoSymbolFromADC(void){
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b08b      	sub	sp, #44	; 0x2c
 8000d34:	af00      	add	r7, sp, #0
	string symbol;
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f00a fd96 	bl	800b86a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	if(ADC_result[BLACK_POT] < ADC_SKOCKO){
 8000d3e:	4b5e      	ldr	r3, [pc, #376]	; (8000eb8 <UpdateSkockoSymbolFromADC+0x188>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f240 2297 	movw	r2, #663	; 0x297
 8000d46:	4293      	cmp	r3, r2
 8000d48:	bf94      	ite	ls
 8000d4a:	2301      	movls	r3, #1
 8000d4c:	2300      	movhi	r3, #0
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d013      	beq.n	8000d7c <UpdateSkockoSymbolFromADC+0x4c>
		mySkocko->SetSymbol(mySkocko->GetCurrentPosition(), mySkocko->SKOCKO);
 8000d54:	4b59      	ldr	r3, [pc, #356]	; (8000ebc <UpdateSkockoSymbolFromADC+0x18c>)
 8000d56:	681c      	ldr	r4, [r3, #0]
 8000d58:	4b58      	ldr	r3, [pc, #352]	; (8000ebc <UpdateSkockoSymbolFromADC+0x18c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 ffcf 	bl	8002d00 <_ZN6Skocko18GetCurrentPositionEv>
 8000d62:	4603      	mov	r3, r0
 8000d64:	773b      	strb	r3, [r7, #28]
 8000d66:	2301      	movs	r3, #1
 8000d68:	777b      	strb	r3, [r7, #29]
 8000d6a:	f107 021d 	add.w	r2, r7, #29
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4620      	mov	r0, r4
 8000d76:	f001 ffae 	bl	8002cd6 <_ZN6Skocko9SetSymbolERKhS1_>
 8000d7a:	e095      	b.n	8000ea8 <UpdateSkockoSymbolFromADC+0x178>
	}
	else if(ADC_result[BLACK_POT] < ADC_ZVEZDA){
 8000d7c:	4b4e      	ldr	r3, [pc, #312]	; (8000eb8 <UpdateSkockoSymbolFromADC+0x188>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f240 522f 	movw	r2, #1327	; 0x52f
 8000d84:	4293      	cmp	r3, r2
 8000d86:	bf94      	ite	ls
 8000d88:	2301      	movls	r3, #1
 8000d8a:	2300      	movhi	r3, #0
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d013      	beq.n	8000dba <UpdateSkockoSymbolFromADC+0x8a>
		mySkocko->SetSymbol(mySkocko->GetCurrentPosition(), mySkocko->ZVEZDA);
 8000d92:	4b4a      	ldr	r3, [pc, #296]	; (8000ebc <UpdateSkockoSymbolFromADC+0x18c>)
 8000d94:	681c      	ldr	r4, [r3, #0]
 8000d96:	4b49      	ldr	r3, [pc, #292]	; (8000ebc <UpdateSkockoSymbolFromADC+0x18c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 ffb0 	bl	8002d00 <_ZN6Skocko18GetCurrentPositionEv>
 8000da0:	4603      	mov	r3, r0
 8000da2:	77bb      	strb	r3, [r7, #30]
 8000da4:	2302      	movs	r3, #2
 8000da6:	77fb      	strb	r3, [r7, #31]
 8000da8:	f107 021f 	add.w	r2, r7, #31
 8000dac:	f107 031e 	add.w	r3, r7, #30
 8000db0:	4619      	mov	r1, r3
 8000db2:	4620      	mov	r0, r4
 8000db4:	f001 ff8f 	bl	8002cd6 <_ZN6Skocko9SetSymbolERKhS1_>
 8000db8:	e076      	b.n	8000ea8 <UpdateSkockoSymbolFromADC+0x178>
	}
	else if(ADC_result[BLACK_POT] < ADC_PIK){
 8000dba:	4b3f      	ldr	r3, [pc, #252]	; (8000eb8 <UpdateSkockoSymbolFromADC+0x188>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f5b3 6ff9 	cmp.w	r3, #1992	; 0x7c8
 8000dc2:	bf94      	ite	ls
 8000dc4:	2301      	movls	r3, #1
 8000dc6:	2300      	movhi	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d015      	beq.n	8000dfa <UpdateSkockoSymbolFromADC+0xca>
		mySkocko->SetSymbol(mySkocko->GetCurrentPosition(), mySkocko->PIK);
 8000dce:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <UpdateSkockoSymbolFromADC+0x18c>)
 8000dd0:	681c      	ldr	r4, [r3, #0]
 8000dd2:	4b3a      	ldr	r3, [pc, #232]	; (8000ebc <UpdateSkockoSymbolFromADC+0x18c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 ff92 	bl	8002d00 <_ZN6Skocko18GetCurrentPositionEv>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	f887 3020 	strb.w	r3, [r7, #32]
 8000de2:	2303      	movs	r3, #3
 8000de4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000de8:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	4619      	mov	r1, r3
 8000df2:	4620      	mov	r0, r4
 8000df4:	f001 ff6f 	bl	8002cd6 <_ZN6Skocko9SetSymbolERKhS1_>
 8000df8:	e056      	b.n	8000ea8 <UpdateSkockoSymbolFromADC+0x178>
	}
	else if(ADC_result[BLACK_POT] < ADC_HERC){
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <UpdateSkockoSymbolFromADC+0x188>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f640 2262 	movw	r2, #2658	; 0xa62
 8000e02:	4293      	cmp	r3, r2
 8000e04:	bf94      	ite	ls
 8000e06:	2301      	movls	r3, #1
 8000e08:	2300      	movhi	r3, #0
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d015      	beq.n	8000e3c <UpdateSkockoSymbolFromADC+0x10c>
		mySkocko->SetSymbol(mySkocko->GetCurrentPosition(), mySkocko->HERC);
 8000e10:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <UpdateSkockoSymbolFromADC+0x18c>)
 8000e12:	681c      	ldr	r4, [r3, #0]
 8000e14:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <UpdateSkockoSymbolFromADC+0x18c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 ff71 	bl	8002d00 <_ZN6Skocko18GetCurrentPositionEv>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000e24:	2304      	movs	r3, #4
 8000e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000e2a:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8000e2e:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000e32:	4619      	mov	r1, r3
 8000e34:	4620      	mov	r0, r4
 8000e36:	f001 ff4e 	bl	8002cd6 <_ZN6Skocko9SetSymbolERKhS1_>
 8000e3a:	e035      	b.n	8000ea8 <UpdateSkockoSymbolFromADC+0x178>
	}
	else if(ADC_result[BLACK_POT] < ADC_TREF){
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <UpdateSkockoSymbolFromADC+0x188>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f640 42fa 	movw	r2, #3322	; 0xcfa
 8000e44:	4293      	cmp	r3, r2
 8000e46:	bf94      	ite	ls
 8000e48:	2301      	movls	r3, #1
 8000e4a:	2300      	movhi	r3, #0
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d015      	beq.n	8000e7e <UpdateSkockoSymbolFromADC+0x14e>
		mySkocko->SetSymbol(mySkocko->GetCurrentPosition(), mySkocko->TREF);
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <UpdateSkockoSymbolFromADC+0x18c>)
 8000e54:	681c      	ldr	r4, [r3, #0]
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <UpdateSkockoSymbolFromADC+0x18c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 ff50 	bl	8002d00 <_ZN6Skocko18GetCurrentPositionEv>
 8000e60:	4603      	mov	r3, r0
 8000e62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000e66:	2305      	movs	r3, #5
 8000e68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000e6c:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	4620      	mov	r0, r4
 8000e78:	f001 ff2d 	bl	8002cd6 <_ZN6Skocko9SetSymbolERKhS1_>
 8000e7c:	e014      	b.n	8000ea8 <UpdateSkockoSymbolFromADC+0x178>
	}
	else{
		mySkocko->SetSymbol(mySkocko->GetCurrentPosition(), mySkocko->KARO);
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <UpdateSkockoSymbolFromADC+0x18c>)
 8000e80:	681c      	ldr	r4, [r3, #0]
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <UpdateSkockoSymbolFromADC+0x18c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f001 ff3a 	bl	8002d00 <_ZN6Skocko18GetCurrentPositionEv>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e92:	2306      	movs	r3, #6
 8000e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e98:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8000e9c:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	f001 ff17 	bl	8002cd6 <_ZN6Skocko9SetSymbolERKhS1_>
	string symbol;
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f00a fced 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8000eb0:	bf00      	nop
 8000eb2:	372c      	adds	r7, #44	; 0x2c
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd90      	pop	{r4, r7, pc}
 8000eb8:	200000a0 	.word	0x200000a0
 8000ebc:	20000218 	.word	0x20000218

08000ec0 <Timer3Callback>:


void Timer3Callback(void){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	if(mySkocko->GetState() == mySkocko->ST_WAITING_BRIGHTNESS){
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <Timer3Callback+0x54>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 fa01 	bl	80022d0 <_ZN6Skocko8GetStateEv>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	bf0c      	ite	eq
 8000ed4:	2301      	moveq	r3, #1
 8000ed6:	2300      	movne	r3, #0
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <Timer3Callback+0x26>
		/* If we are in state of adjusting brightness, then we use this timer for refreshing OLED brightness
		 * so user can see and choose which brightness is the most acceptable to him. */
		HAL_ADC_Start_IT(&hadc1);
 8000ede:	480e      	ldr	r0, [pc, #56]	; (8000f18 <Timer3Callback+0x58>)
 8000ee0:	f004 fcd8 	bl	8005894 <HAL_ADC_Start_IT>
		/* In other situation, we use this timer for refreshing OLED content, on which is displayed current
		 * combination which user are choosing. */
		HAL_ADC_Start_IT(&hadc2);
		mySkocko->RefreshOLED();
	}
}
 8000ee4:	e014      	b.n	8000f10 <Timer3Callback+0x50>
	else if (mySkocko->GetState() == mySkocko->ST_RECEIVING_COMB){
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <Timer3Callback+0x54>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 f9f0 	bl	80022d0 <_ZN6Skocko8GetStateEv>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf0c      	ite	eq
 8000ef6:	2301      	moveq	r3, #1
 8000ef8:	2300      	movne	r3, #0
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d007      	beq.n	8000f10 <Timer3Callback+0x50>
		HAL_ADC_Start_IT(&hadc2);
 8000f00:	4806      	ldr	r0, [pc, #24]	; (8000f1c <Timer3Callback+0x5c>)
 8000f02:	f004 fcc7 	bl	8005894 <HAL_ADC_Start_IT>
		mySkocko->RefreshOLED();
 8000f06:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <Timer3Callback+0x54>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fd8e 	bl	8002a2c <_ZN6Skocko11RefreshOLEDEv>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000218 	.word	0x20000218
 8000f18:	200000a8 	.word	0x200000a8
 8000f1c:	2000010c 	.word	0x2000010c

08000f20 <ButtonPressedEventCallback>:


void ButtonPressedEventCallback(void){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
	if ((ButtonPressed & BLUE_BUTTON) == BLUE_BUTTON){
 8000f26:	4b7f      	ldr	r3, [pc, #508]	; (8001124 <ButtonPressedEventCallback+0x204>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d04b      	beq.n	8000fca <ButtonPressedEventCallback+0xaa>
		ButtonPressed &= ~(BLUE_BUTTON);
 8000f32:	4b7c      	ldr	r3, [pc, #496]	; (8001124 <ButtonPressedEventCallback+0x204>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	f023 0301 	bic.w	r3, r3, #1
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b79      	ldr	r3, [pc, #484]	; (8001124 <ButtonPressedEventCallback+0x204>)
 8000f3e:	701a      	strb	r2, [r3, #0]
		uint8_t skockoState = mySkocko->GetState();
 8000f40:	4b79      	ldr	r3, [pc, #484]	; (8001128 <ButtonPressedEventCallback+0x208>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 f9c3 	bl	80022d0 <_ZN6Skocko8GetStateEv>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	717b      	strb	r3, [r7, #5]
		switch(skockoState){
 8000f4e:	797b      	ldrb	r3, [r7, #5]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	f200 80db 	bhi.w	800110e <ButtonPressedEventCallback+0x1ee>
 8000f58:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <ButtonPressedEventCallback+0x40>)
 8000f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5e:	bf00      	nop
 8000f60:	08000f79 	.word	0x08000f79
 8000f64:	08000f85 	.word	0x08000f85
 8000f68:	08000f91 	.word	0x08000f91
 8000f6c:	08000f9d 	.word	0x08000f9d
 8000f70:	08000fa9 	.word	0x08000fa9
 8000f74:	08000fb5 	.word	0x08000fb5
		case Skocko::ST_WAITING_PLAYER_NAME:
			mySkocko->SetupBrightness();
 8000f78:	4b6b      	ldr	r3, [pc, #428]	; (8001128 <ButtonPressedEventCallback+0x208>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fe09 	bl	8001b94 <_ZN6Skocko15SetupBrightnessEv>
			break;
 8000f82:	e0cb      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		case Skocko::ST_WAITING_BRIGHTNESS:
			mySkocko->ConfirmBrightness();
 8000f84:	4b68      	ldr	r3, [pc, #416]	; (8001128 <ButtonPressedEventCallback+0x208>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 ffbe 	bl	8001f0a <_ZN6Skocko17ConfirmBrightnessEv>
			break;
 8000f8e:	e0c5      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		case Skocko::ST_WAITING_TO_START:
			mySkocko->StartSkocko();
 8000f90:	4b65      	ldr	r3, [pc, #404]	; (8001128 <ButtonPressedEventCallback+0x208>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 ffcb 	bl	8001f30 <_ZN6Skocko11StartSkockoEv>
			break;
 8000f9a:	e0bf      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		case Skocko::ST_RECEIVING_COMB:
			mySkocko->ConfirmComb();
 8000f9c:	4b62      	ldr	r3, [pc, #392]	; (8001128 <ButtonPressedEventCallback+0x208>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f001 fd64 	bl	8002a6e <_ZN6Skocko11ConfirmCombEv>
			break;
 8000fa6:	e0b9      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		case Skocko::ST_WAITING_NEXT_COMB:
			mySkocko->NewComb();
 8000fa8:	4b5f      	ldr	r3, [pc, #380]	; (8001128 <ButtonPressedEventCallback+0x208>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 fa53 	bl	8002458 <_ZN6Skocko7NewCombEv>
			break;
 8000fb2:	e0b3      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		case Skocko::ST_GAME_END:
			mySkocko->PrintGameInfo();
 8000fb4:	4b5c      	ldr	r3, [pc, #368]	; (8001128 <ButtonPressedEventCallback+0x208>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fe39 	bl	8001c30 <_ZN6Skocko13PrintGameInfoEv>
			mySkocko->StartSkocko();
 8000fbe:	4b5a      	ldr	r3, [pc, #360]	; (8001128 <ButtonPressedEventCallback+0x208>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 ffb4 	bl	8001f30 <_ZN6Skocko11StartSkockoEv>
			break;
 8000fc8:	e0a8      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		default:
			break;
		}
	}
	else if((ButtonPressed & BUTTON_1) == BUTTON_1){
 8000fca:	4b56      	ldr	r3, [pc, #344]	; (8001124 <ButtonPressedEventCallback+0x204>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d04b      	beq.n	800106e <ButtonPressedEventCallback+0x14e>
		ButtonPressed &= ~(BUTTON_1);
 8000fd6:	4b53      	ldr	r3, [pc, #332]	; (8001124 <ButtonPressedEventCallback+0x204>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	f023 0302 	bic.w	r3, r3, #2
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b50      	ldr	r3, [pc, #320]	; (8001124 <ButtonPressedEventCallback+0x204>)
 8000fe2:	701a      	strb	r2, [r3, #0]
		uint8_t skockoState = mySkocko->GetState();
 8000fe4:	4b50      	ldr	r3, [pc, #320]	; (8001128 <ButtonPressedEventCallback+0x208>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 f971 	bl	80022d0 <_ZN6Skocko8GetStateEv>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71bb      	strb	r3, [r7, #6]
		switch(skockoState){
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	2b05      	cmp	r3, #5
 8000ff8:	f200 808b 	bhi.w	8001112 <ButtonPressedEventCallback+0x1f2>
 8000ffc:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <ButtonPressedEventCallback+0xe4>)
 8000ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001002:	bf00      	nop
 8001004:	0800101d 	.word	0x0800101d
 8001008:	08001029 	.word	0x08001029
 800100c:	08001035 	.word	0x08001035
 8001010:	08001041 	.word	0x08001041
 8001014:	0800104d 	.word	0x0800104d
 8001018:	08001059 	.word	0x08001059
		case Skocko::ST_WAITING_PLAYER_NAME:
			mySkocko->SetupBrightness();
 800101c:	4b42      	ldr	r3, [pc, #264]	; (8001128 <ButtonPressedEventCallback+0x208>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fdb7 	bl	8001b94 <_ZN6Skocko15SetupBrightnessEv>
			break;
 8001026:	e079      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		case Skocko::ST_WAITING_BRIGHTNESS:
			mySkocko->ConfirmBrightness();
 8001028:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <ButtonPressedEventCallback+0x208>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f000 ff6c 	bl	8001f0a <_ZN6Skocko17ConfirmBrightnessEv>
			break;
 8001032:	e073      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		case Skocko::ST_WAITING_TO_START:
			mySkocko->StartSkocko();
 8001034:	4b3c      	ldr	r3, [pc, #240]	; (8001128 <ButtonPressedEventCallback+0x208>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 ff79 	bl	8001f30 <_ZN6Skocko11StartSkockoEv>
			break;
 800103e:	e06d      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		case Skocko::ST_RECEIVING_COMB:
			mySkocko->DecrementPosition();
 8001040:	4b39      	ldr	r3, [pc, #228]	; (8001128 <ButtonPressedEventCallback+0x208>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f001 fa79 	bl	800253c <_ZN6Skocko17DecrementPositionEv>
			break;
 800104a:	e067      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		case Skocko::ST_WAITING_NEXT_COMB:
			mySkocko->NewComb();
 800104c:	4b36      	ldr	r3, [pc, #216]	; (8001128 <ButtonPressedEventCallback+0x208>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fa01 	bl	8002458 <_ZN6Skocko7NewCombEv>
			break;
 8001056:	e061      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		case Skocko::ST_GAME_END:
			mySkocko->PrintGameInfo();
 8001058:	4b33      	ldr	r3, [pc, #204]	; (8001128 <ButtonPressedEventCallback+0x208>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fde7 	bl	8001c30 <_ZN6Skocko13PrintGameInfoEv>
			mySkocko->StartSkocko();
 8001062:	4b31      	ldr	r3, [pc, #196]	; (8001128 <ButtonPressedEventCallback+0x208>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f000 ff62 	bl	8001f30 <_ZN6Skocko11StartSkockoEv>
			break;
 800106c:	e056      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		default:
			break;
		}
	}
	else if((ButtonPressed & BUTTON_2) == BUTTON_2){
 800106e:	4b2d      	ldr	r3, [pc, #180]	; (8001124 <ButtonPressedEventCallback+0x204>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	2b00      	cmp	r3, #0
 8001078:	d04d      	beq.n	8001116 <ButtonPressedEventCallback+0x1f6>
		ButtonPressed &= ~(BUTTON_2);
 800107a:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <ButtonPressedEventCallback+0x204>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	f023 0304 	bic.w	r3, r3, #4
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b27      	ldr	r3, [pc, #156]	; (8001124 <ButtonPressedEventCallback+0x204>)
 8001086:	701a      	strb	r2, [r3, #0]
		uint8_t skockoState = mySkocko->GetState();
 8001088:	4b27      	ldr	r3, [pc, #156]	; (8001128 <ButtonPressedEventCallback+0x208>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f001 f91f 	bl	80022d0 <_ZN6Skocko8GetStateEv>
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
		switch(skockoState){
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	3b01      	subs	r3, #1
 800109a:	2b05      	cmp	r3, #5
 800109c:	d83d      	bhi.n	800111a <ButtonPressedEventCallback+0x1fa>
 800109e:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <ButtonPressedEventCallback+0x184>)
 80010a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a4:	080010bd 	.word	0x080010bd
 80010a8:	080010c9 	.word	0x080010c9
 80010ac:	080010d5 	.word	0x080010d5
 80010b0:	080010e1 	.word	0x080010e1
 80010b4:	080010ed 	.word	0x080010ed
 80010b8:	080010f9 	.word	0x080010f9
		case Skocko::ST_WAITING_PLAYER_NAME:
			mySkocko->SetupBrightness();
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <ButtonPressedEventCallback+0x208>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fd67 	bl	8001b94 <_ZN6Skocko15SetupBrightnessEv>
			break;
 80010c6:	e029      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		case Skocko::ST_WAITING_BRIGHTNESS:
			mySkocko->ConfirmBrightness();
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <ButtonPressedEventCallback+0x208>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 ff1c 	bl	8001f0a <_ZN6Skocko17ConfirmBrightnessEv>
			break;
 80010d2:	e023      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		case Skocko::ST_WAITING_TO_START:
			mySkocko->StartSkocko();
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <ButtonPressedEventCallback+0x208>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 ff29 	bl	8001f30 <_ZN6Skocko11StartSkockoEv>
			break;
 80010de:	e01d      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		case Skocko::ST_RECEIVING_COMB:
			mySkocko->IncrementPosition();
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <ButtonPressedEventCallback+0x208>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 fa0d 	bl	8002504 <_ZN6Skocko17IncrementPositionEv>
			break;
 80010ea:	e017      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		case Skocko::ST_WAITING_NEXT_COMB:
			mySkocko->NewComb();
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <ButtonPressedEventCallback+0x208>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 f9b1 	bl	8002458 <_ZN6Skocko7NewCombEv>
			break;
 80010f6:	e011      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		case Skocko::ST_GAME_END:
			mySkocko->PrintGameInfo();
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <ButtonPressedEventCallback+0x208>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fd97 	bl	8001c30 <_ZN6Skocko13PrintGameInfoEv>
			mySkocko->StartSkocko();
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <ButtonPressedEventCallback+0x208>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f000 ff12 	bl	8001f30 <_ZN6Skocko11StartSkockoEv>
			break;
 800110c:	e006      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
			break;
 800110e:	bf00      	nop
 8001110:	e004      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
			break;
 8001112:	bf00      	nop
 8001114:	e002      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
		default:
			break;
		}
	}
	else{
		return;
 8001116:	bf00      	nop
 8001118:	e000      	b.n	800111c <ButtonPressedEventCallback+0x1fc>
			break;
 800111a:	bf00      	nop
	}
}
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000175 	.word	0x20000175
 8001128:	20000218 	.word	0x20000218

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	e7fe      	b.n	8001134 <Error_Handler+0x8>
	...

08001138 <_ZN7DisplayC1Ev>:
	DISPLAY_OK		= 0x01,
	DISPLAY_ERROR	= 0x02
};


class Display{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <_ZN7DisplayC1Ev+0x1c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	0800cf7c 	.word	0x0800cf7c

08001158 <_ZN4OLEDC1Ev>:
  * @brief
  * @note
  * @param
  * @retval
  */
OLED::OLED(void) : init_(this->UNINITIALIZED){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ffe8 	bl	8001138 <_ZN7DisplayC1Ev>
 8001168:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <_ZN4OLEDC1Ev+0x40>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	721a      	strb	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	330c      	adds	r3, #12
 8001178:	4618      	mov	r0, r3
 800117a:	f002 feaf 	bl	8003edc <_ZN7SSD1306C1Ev>
	this->i2ch_ = new I2C_HandleTypeDef;
 800117e:	2054      	movs	r0, #84	; 0x54
 8001180:	f00a faa5 	bl	800b6ce <_Znwj>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	605a      	str	r2, [r3, #4]
}
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	0800cf68 	.word	0x0800cf68

0800119c <_ZN4OLED11GetInstanceEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
OLED* OLED::GetInstance(void){
 800119c:	b598      	push	{r3, r4, r7, lr}
 800119e:	af00      	add	r7, sp, #0
	if(instancePointerOLED == nullptr){
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <_ZN4OLED11GetInstanceEv+0x30>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10d      	bne.n	80011c4 <_ZN4OLED11GetInstanceEv+0x28>
		instancePointerOLED = new OLED;
 80011a8:	f44f 6083 	mov.w	r0, #1048	; 0x418
 80011ac:	f00a fa8f 	bl	800b6ce <_Znwj>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461c      	mov	r4, r3
 80011b4:	4620      	mov	r0, r4
 80011b6:	f7ff ffcf 	bl	8001158 <_ZN4OLEDC1Ev>
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <_ZN4OLED11GetInstanceEv+0x30>)
 80011bc:	601c      	str	r4, [r3, #0]
		return instancePointerOLED;
 80011be:	4b03      	ldr	r3, [pc, #12]	; (80011cc <_ZN4OLED11GetInstanceEv+0x30>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	e001      	b.n	80011c8 <_ZN4OLED11GetInstanceEv+0x2c>
	}
	else{
		return instancePointerOLED;
 80011c4:	4b01      	ldr	r3, [pc, #4]	; (80011cc <_ZN4OLED11GetInstanceEv+0x30>)
 80011c6:	681b      	ldr	r3, [r3, #0]
	}
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	bd98      	pop	{r3, r4, r7, pc}
 80011cc:	2000021c 	.word	0x2000021c

080011d0 <_ZN4OLED4InitEP19__I2C_HandleTypeDef>:
  * @brief
  * @note
  * @param
  * @retval
  */
uint8_t OLED::Init(I2C_HandleTypeDef* i2cHandler){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
	this->i2ch_ = i2cHandler;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	605a      	str	r2, [r3, #4]
	if(this->mySSD1306_.Init(this->i2ch_) != OLED_OK){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f103 020c 	add.w	r2, r3, #12
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4619      	mov	r1, r3
 80011ec:	4610      	mov	r0, r2
 80011ee:	f002 feac 	bl	8003f4a <_ZN7SSD13064InitEP19__I2C_HandleTypeDef>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	bf14      	ite	ne
 80011f8:	2301      	movne	r3, #1
 80011fa:	2300      	moveq	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <_ZN4OLED4InitEP19__I2C_HandleTypeDef+0x36>
		return OLED_ERROR;
 8001202:	2302      	movs	r3, #2
 8001204:	e003      	b.n	800120e <_ZN4OLED4InitEP19__I2C_HandleTypeDef+0x3e>
	}
	else{
		this->OLED::init_ = this->INITIALIZED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	721a      	strb	r2, [r3, #8]
		return OLED_OK;
 800120c:	2301      	movs	r3, #1
	}
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_ZN4OLED5ClearEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
uint8_t OLED::Clear(void){
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
	this->mySSD1306_.Fill(SSD1306_COLOR_BLACK);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	330c      	adds	r3, #12
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f003 f8b7 	bl	8004398 <_ZN7SSD13064FillEh>
	return OLED_OK;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_ZN4OLED11PrintStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8disp_pos>:
  * @brief
  * @note
  * @param
  * @retval
  */
void OLED::PrintString(const string& message, const disp_pos_t& pos){
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b08b      	sub	sp, #44	; 0x2c
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
	this->mySSD1306_.GoToXY(pos.x_, pos.y_);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f103 000c 	add.w	r0, r3, #12
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b299      	uxth	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	785b      	ldrb	r3, [r3, #1]
 8001250:	b29b      	uxth	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	f003 f932 	bl	80044bc <_ZN7SSD13066GoToXYEtt>
	this->mySSD1306_.PutString(message, &font_7x10, this->PIXEL_YELLOW);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f103 040c 	add.w	r4, r3, #12
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	4618      	mov	r0, r3
 8001266:	f00a fb89 	bl	800b97c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800126a:	f107 0110 	add.w	r1, r7, #16
 800126e:	2301      	movs	r3, #1
 8001270:	4a06      	ldr	r2, [pc, #24]	; (800128c <_ZN4OLED11PrintStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8disp_pos+0x58>)
 8001272:	4620      	mov	r0, r4
 8001274:	f003 fa33 	bl	80046de <_ZN7SSD13069PutStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP6font_th>
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4618      	mov	r0, r3
 800127e:	f00a fb04 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8001282:	bf00      	nop
 8001284:	372c      	adds	r7, #44	; 0x2c
 8001286:	46bd      	mov	sp, r7
 8001288:	bd90      	pop	{r4, r7, pc}
 800128a:	bf00      	nop
 800128c:	20000000 	.word	0x20000000

08001290 <_ZN4OLED15PrintSkockoCombEPKhRS0_S2_S2_>:
  * @brief
  * @note
  * @param
  * @retval
  */
void OLED::PrintSkockoComb(const uint8_t* comb, const uint8_t& currPos, const uint8_t& dispRow, const uint8_t& underline){
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	603b      	str	r3, [r7, #0]
	this->mySSD1306_.GoToXY(this->FIRST_COL, dispRow);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f103 000c 	add.w	r0, r3, #12
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	2105      	movs	r1, #5
 80012ae:	f003 f905 	bl	80044bc <_ZN7SSD13066GoToXYEtt>
	this->mySSD1306_.PutComb(comb, &skocko_7x10, this->PIXEL_YELLOW);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f103 000c 	add.w	r0, r3, #12
 80012b8:	2301      	movs	r3, #1
 80012ba:	4a28      	ldr	r2, [pc, #160]	; (800135c <_ZN4OLED15PrintSkockoCombEPKhRS0_S2_S2_+0xcc>)
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	f003 fa43 	bl	8004748 <_ZN7SSD13067PutCombEPKhP6font_th>
	if(underline == this->WITH_UNDERLINE){
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d143      	bne.n	8001352 <_ZN4OLED15PrintSkockoCombEPKhRS0_S2_S2_+0xc2>
		uint8_t symbolUnderline[4];
		switch(currPos){
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d82e      	bhi.n	8001330 <_ZN4OLED15PrintSkockoCombEPKhRS0_S2_S2_+0xa0>
 80012d2:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <_ZN4OLED15PrintSkockoCombEPKhRS0_S2_S2_+0x48>)
 80012d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d8:	080012e9 	.word	0x080012e9
 80012dc:	080012fb 	.word	0x080012fb
 80012e0:	0800130d 	.word	0x0800130d
 80012e4:	0800131f 	.word	0x0800131f
		case 0:
			symbolUnderline[0] = 7;
 80012e8:	2307      	movs	r3, #7
 80012ea:	753b      	strb	r3, [r7, #20]
			symbolUnderline[1] = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	757b      	strb	r3, [r7, #21]
			symbolUnderline[2] = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	75bb      	strb	r3, [r7, #22]
			symbolUnderline[3] = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	75fb      	strb	r3, [r7, #23]
			break;
 80012f8:	e01b      	b.n	8001332 <_ZN4OLED15PrintSkockoCombEPKhRS0_S2_S2_+0xa2>
		case 1:
			symbolUnderline[0] = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	753b      	strb	r3, [r7, #20]
			symbolUnderline[1] = 7;
 80012fe:	2307      	movs	r3, #7
 8001300:	757b      	strb	r3, [r7, #21]
			symbolUnderline[2] = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	75bb      	strb	r3, [r7, #22]
			symbolUnderline[3] = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	75fb      	strb	r3, [r7, #23]
			break;
 800130a:	e012      	b.n	8001332 <_ZN4OLED15PrintSkockoCombEPKhRS0_S2_S2_+0xa2>
		case 2:
			symbolUnderline[0] = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	753b      	strb	r3, [r7, #20]
			symbolUnderline[1] = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	757b      	strb	r3, [r7, #21]
			symbolUnderline[2] = 7;
 8001314:	2307      	movs	r3, #7
 8001316:	75bb      	strb	r3, [r7, #22]
			symbolUnderline[3] = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	75fb      	strb	r3, [r7, #23]
			break;
 800131c:	e009      	b.n	8001332 <_ZN4OLED15PrintSkockoCombEPKhRS0_S2_S2_+0xa2>
		case 3:
			symbolUnderline[0] = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	753b      	strb	r3, [r7, #20]
			symbolUnderline[1] = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	757b      	strb	r3, [r7, #21]
			symbolUnderline[2] = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	75bb      	strb	r3, [r7, #22]
			symbolUnderline[3] = 7;
 800132a:	2307      	movs	r3, #7
 800132c:	75fb      	strb	r3, [r7, #23]
			break;
 800132e:	e000      	b.n	8001332 <_ZN4OLED15PrintSkockoCombEPKhRS0_S2_S2_+0xa2>
		default:
			break;
 8001330:	bf00      	nop
		}
		this->mySSD1306_.GoToXY(this->FIRST_COL, this->THIRD_ROW);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	330c      	adds	r3, #12
 8001336:	2223      	movs	r2, #35	; 0x23
 8001338:	2105      	movs	r1, #5
 800133a:	4618      	mov	r0, r3
 800133c:	f003 f8be 	bl	80044bc <_ZN7SSD13066GoToXYEtt>
		this->mySSD1306_.PutComb(symbolUnderline, &skocko_7x10, this->PIXEL_YELLOW);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f103 000c 	add.w	r0, r3, #12
 8001346:	f107 0114 	add.w	r1, r7, #20
 800134a:	2301      	movs	r3, #1
 800134c:	4a03      	ldr	r2, [pc, #12]	; (800135c <_ZN4OLED15PrintSkockoCombEPKhRS0_S2_S2_+0xcc>)
 800134e:	f003 f9fb 	bl	8004748 <_ZN7SSD13067PutCombEPKhP6font_th>
	}
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000008 	.word	0x20000008

08001360 <_ZN4OLED12UpdateScreenEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void OLED::UpdateScreen(void){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	this->mySSD1306_.UpdateScreen();
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	330c      	adds	r3, #12
 800136c:	4618      	mov	r0, r3
 800136e:	f002 ffcc 	bl	800430a <_ZN7SSD130612UpdateScreenEv>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <_ZN4OLED13SetBrightnessEh>:
  * @brief
  * @note
  * @param
  * @retval
  */
void OLED::SetBrightness(uint8_t value){
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	460b      	mov	r3, r1
 8001384:	70fb      	strb	r3, [r7, #3]
	this->mySSD1306_.SetContrast(value);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	330c      	adds	r3, #12
 800138a:	78fa      	ldrb	r2, [r7, #3]
 800138c:	4611      	mov	r1, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f002 ff93 	bl	80042ba <_ZN7SSD130611SetContrastEh>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <_ZN4OLED7TurnOFFEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
uint8_t OLED::TurnOFF(void){
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	this->mySSD1306_.TurnOFF();
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	330c      	adds	r3, #12
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 fa10 	bl	80047ce <_ZN7SSD13067TurnOFFEv>
	return OLED_OK;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_ZN4OLED6TurnONEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
uint8_t OLED::TurnON(void){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	this->mySSD1306_.TurnON();
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	330c      	adds	r3, #12
 80013c4:	4618      	mov	r0, r3
 80013c6:	f003 f9ee 	bl	80047a6 <_ZN7SSD13066TurnONEv>
	return OLED_OK;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_ZN7SEV_SEGC1Ev>:
 */

#include <sev_seg.h>


SEV_SEG::SEV_SEG(void){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff feaa 	bl	8001138 <_ZN7DisplayC1Ev>
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <_ZN7SEV_SEGC1Ev+0x4c>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	601a      	str	r2, [r3, #0]
	this->muxTIM_ = new TIM_HandleTypeDef;
 80013ea:	204c      	movs	r0, #76	; 0x4c
 80013ec:	f00a f96f 	bl	800b6ce <_Znwj>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	605a      	str	r2, [r3, #4]
	this->currDisp_ = this->DISPLAY_1;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	729a      	strb	r2, [r3, #10]
	this->data1_ = this->LETTER_NONE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2210      	movs	r2, #16
 8001402:	721a      	strb	r2, [r3, #8]
	this->data2_ = this->LETTER_NONE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2210      	movs	r2, #16
 8001408:	725a      	strb	r2, [r3, #9]
	this->init_ = this->SEV_SEG_INITIALIZED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	72da      	strb	r2, [r3, #11]
	this->status_ = this->SEV_SEG_OFF;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	731a      	strb	r2, [r3, #12]
}
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	0800d01c 	.word	0x0800d01c

08001424 <_ZN7SEV_SEG11GetInstanceEv>:



SEV_SEG* SEV_SEG::GetInstance(void){
 8001424:	b598      	push	{r3, r4, r7, lr}
 8001426:	af00      	add	r7, sp, #0
	if(instancePointerSEV_SEG == nullptr){
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <_ZN7SEV_SEG11GetInstanceEv+0x30>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10c      	bne.n	800144a <_ZN7SEV_SEG11GetInstanceEv+0x26>
		instancePointerSEV_SEG = new SEV_SEG;
 8001430:	2010      	movs	r0, #16
 8001432:	f00a f94c 	bl	800b6ce <_Znwj>
 8001436:	4603      	mov	r3, r0
 8001438:	461c      	mov	r4, r3
 800143a:	4620      	mov	r0, r4
 800143c:	f7ff ffca 	bl	80013d4 <_ZN7SEV_SEGC1Ev>
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <_ZN7SEV_SEG11GetInstanceEv+0x30>)
 8001442:	601c      	str	r4, [r3, #0]
		return instancePointerSEV_SEG;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <_ZN7SEV_SEG11GetInstanceEv+0x30>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	e001      	b.n	800144e <_ZN7SEV_SEG11GetInstanceEv+0x2a>
	}
	else{
		return instancePointerSEV_SEG;
 800144a:	4b02      	ldr	r3, [pc, #8]	; (8001454 <_ZN7SEV_SEG11GetInstanceEv+0x30>)
 800144c:	681b      	ldr	r3, [r3, #0]
	}
}
 800144e:	4618      	mov	r0, r3
 8001450:	bd98      	pop	{r3, r4, r7, pc}
 8001452:	bf00      	nop
 8001454:	20000220 	.word	0x20000220

08001458 <_ZN7SEV_SEG5PrintEh>:
	this->UpdateDisplay();
	return this->SEV_SEG_OK;
}


void SEV_SEG::Print(uint8_t data){
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
	this->status_ = this->SEV_SEG_ONE_ACTIVE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	731a      	strb	r2, [r3, #12]
	this->data2_ = data;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	78fa      	ldrb	r2, [r7, #3]
 800146e:	725a      	strb	r2, [r3, #9]
	this->currDisp_ = this->DISPLAY_2;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2202      	movs	r2, #2
 8001474:	729a      	strb	r2, [r3, #10]
	this->UpdateDisplay();
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f83a 	bl	80014f0 <_ZN7SEV_SEG13UpdateDisplayEv>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZN7SEV_SEG5ClearEv>:

uint8_t SEV_SEG::Clear(void){
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	//TODO
	return this->SEV_SEG_OK;
 800148c:	2301      	movs	r3, #1
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <_ZN7SEV_SEG7TurnOFFEv>:

uint8_t SEV_SEG::TurnOFF(void){
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	//TODO
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, (GPIO_PinState) this->DISPLAY_OFF);	// mux1 = ON
 80014a4:	2201      	movs	r2, #1
 80014a6:	2140      	movs	r1, #64	; 0x40
 80014a8:	4807      	ldr	r0, [pc, #28]	; (80014c8 <_ZN7SEV_SEG7TurnOFFEv+0x2c>)
 80014aa:	f005 ff99 	bl	80073e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, (GPIO_PinState) this->DISPLAY_OFF);	// mux2 = OFF
 80014ae:	2201      	movs	r2, #1
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <_ZN7SEV_SEG7TurnOFFEv+0x30>)
 80014b4:	f005 ff94 	bl	80073e0 <HAL_GPIO_WritePin>
	this->status_ = this->SEV_SEG_OFF;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	731a      	strb	r2, [r3, #12]
	return this->SEV_SEG_OK;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	48000400 	.word	0x48000400
 80014cc:	48000800 	.word	0x48000800

080014d0 <_ZN7SEV_SEG6TurnONEv>:

uint8_t SEV_SEG::TurnON(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	//TODO
	this->status_ = this->SEV_SEG_BOOTH_ACTIVE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2202      	movs	r2, #2
 80014dc:	731a      	strb	r2, [r3, #12]
	this->UpdateDisplay();
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f806 	bl	80014f0 <_ZN7SEV_SEG13UpdateDisplayEv>
	return this->SEV_SEG_OK;
 80014e4:	2301      	movs	r3, #1
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <_ZN7SEV_SEG13UpdateDisplayEv>:

uint8_t SEV_SEG::UpdateDisplay(void){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	if(this->status_ != this->SEV_SEG_OFF){
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7b1b      	ldrb	r3, [r3, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80ba 	beq.w	8001676 <_ZN7SEV_SEG13UpdateDisplayEv+0x186>
		/* Turn OFF both displays */
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, (GPIO_PinState) this->DISPLAY_OFF);	// mux1 = OFF
 8001502:	2201      	movs	r2, #1
 8001504:	2140      	movs	r1, #64	; 0x40
 8001506:	485e      	ldr	r0, [pc, #376]	; (8001680 <_ZN7SEV_SEG13UpdateDisplayEv+0x190>)
 8001508:	f005 ff6a 	bl	80073e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, (GPIO_PinState) this->DISPLAY_OFF);	// mux2 = OFF
 800150c:	2201      	movs	r2, #1
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	485c      	ldr	r0, [pc, #368]	; (8001684 <_ZN7SEV_SEG13UpdateDisplayEv+0x194>)
 8001512:	f005 ff65 	bl	80073e0 <HAL_GPIO_WritePin>

		if(this->currDisp_ == DISPLAY_1){
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7a9b      	ldrb	r3, [r3, #10]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d152      	bne.n	80015c4 <_ZN7SEV_SEG13UpdateDisplayEv+0xd4>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (GPIO_PinState) sa[this->data1_]);	// a
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7a1b      	ldrb	r3, [r3, #8]
 8001522:	461a      	mov	r2, r3
 8001524:	4b58      	ldr	r3, [pc, #352]	; (8001688 <_ZN7SEV_SEG13UpdateDisplayEv+0x198>)
 8001526:	5c9b      	ldrb	r3, [r3, r2]
 8001528:	461a      	mov	r2, r3
 800152a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001532:	f005 ff55 	bl	80073e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  (GPIO_PinState) sb[this->data1_]);	// b
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7a1b      	ldrb	r3, [r3, #8]
 800153a:	461a      	mov	r2, r3
 800153c:	4b53      	ldr	r3, [pc, #332]	; (800168c <_ZN7SEV_SEG13UpdateDisplayEv+0x19c>)
 800153e:	5c9b      	ldrb	r3, [r3, r2]
 8001540:	461a      	mov	r2, r3
 8001542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154a:	f005 ff49 	bl	80073e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  (GPIO_PinState) sc[this->data1_]);	// c
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7a1b      	ldrb	r3, [r3, #8]
 8001552:	461a      	mov	r2, r3
 8001554:	4b4e      	ldr	r3, [pc, #312]	; (8001690 <_ZN7SEV_SEG13UpdateDisplayEv+0x1a0>)
 8001556:	5c9b      	ldrb	r3, [r3, r2]
 8001558:	461a      	mov	r2, r3
 800155a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800155e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001562:	f005 ff3d 	bl	80073e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, (GPIO_PinState) sd[this->data1_]);	// d
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7a1b      	ldrb	r3, [r3, #8]
 800156a:	461a      	mov	r2, r3
 800156c:	4b49      	ldr	r3, [pc, #292]	; (8001694 <_ZN7SEV_SEG13UpdateDisplayEv+0x1a4>)
 800156e:	5c9b      	ldrb	r3, [r3, r2]
 8001570:	461a      	mov	r2, r3
 8001572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001576:	4842      	ldr	r0, [pc, #264]	; (8001680 <_ZN7SEV_SEG13UpdateDisplayEv+0x190>)
 8001578:	f005 ff32 	bl	80073e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  (GPIO_PinState) se[this->data1_]);	// e
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	7a1b      	ldrb	r3, [r3, #8]
 8001580:	461a      	mov	r2, r3
 8001582:	4b45      	ldr	r3, [pc, #276]	; (8001698 <_ZN7SEV_SEG13UpdateDisplayEv+0x1a8>)
 8001584:	5c9b      	ldrb	r3, [r3, r2]
 8001586:	461a      	mov	r2, r3
 8001588:	2120      	movs	r1, #32
 800158a:	483d      	ldr	r0, [pc, #244]	; (8001680 <_ZN7SEV_SEG13UpdateDisplayEv+0x190>)
 800158c:	f005 ff28 	bl	80073e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  (GPIO_PinState) sf[this->data1_]);	// f
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7a1b      	ldrb	r3, [r3, #8]
 8001594:	461a      	mov	r2, r3
 8001596:	4b41      	ldr	r3, [pc, #260]	; (800169c <_ZN7SEV_SEG13UpdateDisplayEv+0x1ac>)
 8001598:	5c9b      	ldrb	r3, [r3, r2]
 800159a:	461a      	mov	r2, r3
 800159c:	2110      	movs	r1, #16
 800159e:	4838      	ldr	r0, [pc, #224]	; (8001680 <_ZN7SEV_SEG13UpdateDisplayEv+0x190>)
 80015a0:	f005 ff1e 	bl	80073e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  (GPIO_PinState) sg[this->data1_]);	// g
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7a1b      	ldrb	r3, [r3, #8]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <_ZN7SEV_SEG13UpdateDisplayEv+0x1b0>)
 80015ac:	5c9b      	ldrb	r3, [r3, r2]
 80015ae:	461a      	mov	r2, r3
 80015b0:	2108      	movs	r1, #8
 80015b2:	4833      	ldr	r0, [pc, #204]	; (8001680 <_ZN7SEV_SEG13UpdateDisplayEv+0x190>)
 80015b4:	f005 ff14 	bl	80073e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,  (GPIO_PinState) this->DISPLAY_ON);	// mux1 = ON
 80015b8:	2200      	movs	r2, #0
 80015ba:	2140      	movs	r1, #64	; 0x40
 80015bc:	4830      	ldr	r0, [pc, #192]	; (8001680 <_ZN7SEV_SEG13UpdateDisplayEv+0x190>)
 80015be:	f005 ff0f 	bl	80073e0 <HAL_GPIO_WritePin>
 80015c2:	e058      	b.n	8001676 <_ZN7SEV_SEG13UpdateDisplayEv+0x186>
		}
		else if (this->currDisp_ == DISPLAY_2){
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7a9b      	ldrb	r3, [r3, #10]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d152      	bne.n	8001672 <_ZN7SEV_SEG13UpdateDisplayEv+0x182>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (GPIO_PinState) sa[this->data2_]);	// a
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7a5b      	ldrb	r3, [r3, #9]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <_ZN7SEV_SEG13UpdateDisplayEv+0x198>)
 80015d4:	5c9b      	ldrb	r3, [r3, r2]
 80015d6:	461a      	mov	r2, r3
 80015d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e0:	f005 fefe 	bl	80073e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  (GPIO_PinState) sb[this->data2_]);	// b
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7a5b      	ldrb	r3, [r3, #9]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b28      	ldr	r3, [pc, #160]	; (800168c <_ZN7SEV_SEG13UpdateDisplayEv+0x19c>)
 80015ec:	5c9b      	ldrb	r3, [r3, r2]
 80015ee:	461a      	mov	r2, r3
 80015f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f8:	f005 fef2 	bl	80073e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  (GPIO_PinState) sc[this->data2_]);	// c
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7a5b      	ldrb	r3, [r3, #9]
 8001600:	461a      	mov	r2, r3
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <_ZN7SEV_SEG13UpdateDisplayEv+0x1a0>)
 8001604:	5c9b      	ldrb	r3, [r3, r2]
 8001606:	461a      	mov	r2, r3
 8001608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001610:	f005 fee6 	bl	80073e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, (GPIO_PinState) sd[this->data2_]);	// d
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7a5b      	ldrb	r3, [r3, #9]
 8001618:	461a      	mov	r2, r3
 800161a:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <_ZN7SEV_SEG13UpdateDisplayEv+0x1a4>)
 800161c:	5c9b      	ldrb	r3, [r3, r2]
 800161e:	461a      	mov	r2, r3
 8001620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001624:	4816      	ldr	r0, [pc, #88]	; (8001680 <_ZN7SEV_SEG13UpdateDisplayEv+0x190>)
 8001626:	f005 fedb 	bl	80073e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  (GPIO_PinState) se[this->data2_]);	// e
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7a5b      	ldrb	r3, [r3, #9]
 800162e:	461a      	mov	r2, r3
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <_ZN7SEV_SEG13UpdateDisplayEv+0x1a8>)
 8001632:	5c9b      	ldrb	r3, [r3, r2]
 8001634:	461a      	mov	r2, r3
 8001636:	2120      	movs	r1, #32
 8001638:	4811      	ldr	r0, [pc, #68]	; (8001680 <_ZN7SEV_SEG13UpdateDisplayEv+0x190>)
 800163a:	f005 fed1 	bl	80073e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  (GPIO_PinState) sf[this->data2_]);	// f
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7a5b      	ldrb	r3, [r3, #9]
 8001642:	461a      	mov	r2, r3
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <_ZN7SEV_SEG13UpdateDisplayEv+0x1ac>)
 8001646:	5c9b      	ldrb	r3, [r3, r2]
 8001648:	461a      	mov	r2, r3
 800164a:	2110      	movs	r1, #16
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <_ZN7SEV_SEG13UpdateDisplayEv+0x190>)
 800164e:	f005 fec7 	bl	80073e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  (GPIO_PinState) sg[this->data2_]);	// g
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7a5b      	ldrb	r3, [r3, #9]
 8001656:	461a      	mov	r2, r3
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <_ZN7SEV_SEG13UpdateDisplayEv+0x1b0>)
 800165a:	5c9b      	ldrb	r3, [r3, r2]
 800165c:	461a      	mov	r2, r3
 800165e:	2108      	movs	r1, #8
 8001660:	4807      	ldr	r0, [pc, #28]	; (8001680 <_ZN7SEV_SEG13UpdateDisplayEv+0x190>)
 8001662:	f005 febd 	bl	80073e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,  (GPIO_PinState) this->DISPLAY_ON);	// mux2 = ON
 8001666:	2200      	movs	r2, #0
 8001668:	2180      	movs	r1, #128	; 0x80
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <_ZN7SEV_SEG13UpdateDisplayEv+0x194>)
 800166c:	f005 feb8 	bl	80073e0 <HAL_GPIO_WritePin>
 8001670:	e001      	b.n	8001676 <_ZN7SEV_SEG13UpdateDisplayEv+0x186>
		}
		else{
			return this->SEV_SEG_OK;	// display is OFF so we just should exit
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <_ZN7SEV_SEG13UpdateDisplayEv+0x188>
		}
	}

	return this->SEV_SEG_OK;
 8001676:	2301      	movs	r3, #1
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	48000400 	.word	0x48000400
 8001684:	48000800 	.word	0x48000800
 8001688:	0800cf88 	.word	0x0800cf88
 800168c:	0800cf9c 	.word	0x0800cf9c
 8001690:	0800cfb0 	.word	0x0800cfb0
 8001694:	0800cfc4 	.word	0x0800cfc4
 8001698:	0800cfd8 	.word	0x0800cfd8
 800169c:	0800cfec 	.word	0x0800cfec
 80016a0:	0800d000 	.word	0x0800d000

080016a4 <_ZN7SEV_SEG9IncrementEv>:
		}
	}
	return this->SEV_SEG_OK;
}

void SEV_SEG::Increment (void){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	if(this->status_ == this->SEV_SEG_ONE_ACTIVE){
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7b1b      	ldrb	r3, [r3, #12]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d106      	bne.n	80016c2 <_ZN7SEV_SEG9IncrementEv+0x1e>
		this->data2_++;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7a5b      	ldrb	r3, [r3, #9]
 80016b8:	3301      	adds	r3, #1
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	725a      	strb	r2, [r3, #9]
 80016c0:	e013      	b.n	80016ea <_ZN7SEV_SEG9IncrementEv+0x46>
	}
	else if(this->status_ == this->SEV_SEG_BOOTH_ACTIVE){
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7b1b      	ldrb	r3, [r3, #12]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d113      	bne.n	80016f2 <_ZN7SEV_SEG9IncrementEv+0x4e>
		this->data2_++;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7a5b      	ldrb	r3, [r3, #9]
 80016ce:	3301      	adds	r3, #1
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	725a      	strb	r2, [r3, #9]
		if (this->data2_ == 0) {
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7a5b      	ldrb	r3, [r3, #9]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d105      	bne.n	80016ea <_ZN7SEV_SEG9IncrementEv+0x46>
			this->data1_++;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	7a1b      	ldrb	r3, [r3, #8]
 80016e2:	3301      	adds	r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	721a      	strb	r2, [r3, #8]
		}
	}
	else { return; }

	this->UpdateDisplay();
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ff00 	bl	80014f0 <_ZN7SEV_SEG13UpdateDisplayEv>
 80016f0:	e000      	b.n	80016f4 <_ZN7SEV_SEG9IncrementEv+0x50>
	else { return; }
 80016f2:	bf00      	nop
}
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 80016fa:	b590      	push	{r4, r7, lr}
 80016fc:	b087      	sub	sp, #28
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	0fdb      	lsrs	r3, r3, #31
 8001708:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <_ZNSt7__cxx119to_stringEi+0x1c>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	425b      	negs	r3, r3
 8001714:	e000      	b.n	8001718 <_ZNSt7__cxx119to_stringEi+0x1e>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 800171a:	210a      	movs	r1, #10
 800171c:	6938      	ldr	r0, [r7, #16]
 800171e:	f002 fb47 	bl	8003db0 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 8001722:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 8001724:	7dfa      	ldrb	r2, [r7, #23]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	18d4      	adds	r4, r2, r3
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	4618      	mov	r0, r3
 8001730:	f009 ffe1 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	222d      	movs	r2, #45	; 0x2d
 800173a:	4621      	mov	r1, r4
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f00a f89b 	bl	800b878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	4618      	mov	r0, r3
 8001748:	f009 ffd6 	bl	800b6f8 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 800174c:	7dfb      	ldrb	r3, [r7, #23]
 800174e:	4619      	mov	r1, r3
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f00a f8a5 	bl	800b8a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001756:	4603      	mov	r3, r0
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	68f9      	ldr	r1, [r7, #12]
 800175c:	4618      	mov	r0, r3
 800175e:	f002 fb67 	bl	8003e30 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 8001762:	bf00      	nop
  }
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	371c      	adds	r7, #28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd90      	pop	{r4, r7, pc}

0800176c <_ZN6SkockoC1EP19__I2C_HandleTypeDef>:
  * @brief
  * @note
  * @param
  * @retval
  */
Skocko::Skocko(I2C_HandleTypeDef* i2cForDisplayHandler) : winComb_{0}, winFactor_(0x5734), currPos_{0}, currComb_{0}, currTry_(0), mask_{0x000F, 0x00F0, 0x0F00, 0xF000} {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	330d      	adds	r3, #13
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f245 7234 	movw	r2, #22324	; 0x5734
 8001784:	825a      	strh	r2, [r3, #18]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3329      	adds	r3, #41	; 0x29
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4919      	ldr	r1, [pc, #100]	; (8001808 <_ZN6SkockoC1EP19__I2C_HandleTypeDef+0x9c>)
 80017a2:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 80017a6:	460b      	mov	r3, r1
 80017a8:	cb03      	ldmia	r3!, {r0, r1}
 80017aa:	6010      	str	r0, [r2, #0]
 80017ac:	6051      	str	r1, [r2, #4]

	this->state_ = this->ST_BEGIN;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	731a      	strb	r2, [r3, #12]
	this->OLED_ = this->OLED_->GetInstance();
 80017b4:	f7ff fcf2 	bl	800119c <_ZN4OLED11GetInstanceEv>
 80017b8:	4602      	mov	r2, r0
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
	this->OLED_->Init(i2cForDisplayHandler);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c2:	6839      	ldr	r1, [r7, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fd03 	bl	80011d0 <_ZN4OLED4InitEP19__I2C_HandleTypeDef>
	this->SEV_SEG_ = this->SEV_SEG_->GetInstance();
 80017ca:	f7ff fe2b 	bl	8001424 <_ZN7SEV_SEG11GetInstanceEv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	63da      	str	r2, [r3, #60]	; 0x3c
	this->SEV_SEG_->Print(1);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d8:	2101      	movs	r1, #1
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fe3c 	bl	8001458 <_ZN7SEV_SEG5PrintEh>
	this->huart_ = new UART_HandleTypeDef;
 80017e0:	2084      	movs	r0, #132	; 0x84
 80017e2:	f009 ff74 	bl	800b6ce <_Znwj>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	601a      	str	r2, [r3, #0]
	memset(this->playerName_, 0, sizeof(this->playerName_));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3314      	adds	r3, #20
 80017f2:	2214      	movs	r2, #20
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f00a f97e 	bl	800baf8 <memset>
}
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	0800bda4 	.word	0x0800bda4

0800180c <_ZN6Skocko11GetInstanceEP19__I2C_HandleTypeDef>:
  * @brief
  * @note
  * @param
  * @retval
  */
Skocko* Skocko::GetInstance(I2C_HandleTypeDef* i2cForDisplayHandler){
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	if(instancePointerSkocko == nullptr){
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <_ZN6Skocko11GetInstanceEP19__I2C_HandleTypeDef+0x38>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10d      	bne.n	8001838 <_ZN6Skocko11GetInstanceEP19__I2C_HandleTypeDef+0x2c>
		instancePointerSkocko = new Skocko(i2cForDisplayHandler);
 800181c:	2040      	movs	r0, #64	; 0x40
 800181e:	f009 ff56 	bl	800b6ce <_Znwj>
 8001822:	4603      	mov	r3, r0
 8001824:	461c      	mov	r4, r3
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff ff9f 	bl	800176c <_ZN6SkockoC1EP19__I2C_HandleTypeDef>
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <_ZN6Skocko11GetInstanceEP19__I2C_HandleTypeDef+0x38>)
 8001830:	601c      	str	r4, [r3, #0]
		return instancePointerSkocko;
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <_ZN6Skocko11GetInstanceEP19__I2C_HandleTypeDef+0x38>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	e001      	b.n	800183c <_ZN6Skocko11GetInstanceEP19__I2C_HandleTypeDef+0x30>
	}
	else{
		return instancePointerSkocko;
 8001838:	4b02      	ldr	r3, [pc, #8]	; (8001844 <_ZN6Skocko11GetInstanceEP19__I2C_HandleTypeDef+0x38>)
 800183a:	681b      	ldr	r3, [r3, #0]
	}
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bd90      	pop	{r4, r7, pc}
 8001844:	20000214 	.word	0x20000214

08001848 <_ZN6Skocko4InitEP17TIM_HandleTypeDefS1_P20__UART_HandleTypeDef>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::Init(TIM_HandleTypeDef* htimOLED, TIM_HandleTypeDef* htimCombGen, UART_HandleTypeDef* huart){
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
	this->huart_ = huart;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	601a      	str	r2, [r3, #0]
	this->timerOLED_ = htimOLED;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	605a      	str	r2, [r3, #4]
	this->timerWinCombGen_ = htimCombGen;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	609a      	str	r2, [r3, #8]
	this->state_ = this->ST_WAITING_PLAYER_NAME;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2201      	movs	r2, #1
 800186c:	731a      	strb	r2, [r3, #12]
	/* Start timer for WinningCombinationGeneration */
	HAL_TIM_Base_Start(this->timerWinCombGen_);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	4618      	mov	r0, r3
 8001874:	f007 fe98 	bl	80095a8 <HAL_TIM_Base_Start>
	/* Startup window */
	this->PrintIntro();
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f000 f80b 	bl	8001894 <_ZN6Skocko10PrintIntroEv>
	this->SetupUser();
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 f8fe 	bl	8001a80 <_ZN6Skocko9SetupUserEv>
	this->SetupBrightness();
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 f985 	bl	8001b94 <_ZN6Skocko15SetupBrightnessEv>
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <_ZN6Skocko10PrintIntroEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::PrintIntro(void){
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b0b1      	sub	sp, #196	; 0xc4
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	/* OLED display */
	this->OLED_->Clear();
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4610      	mov	r0, r2
 80018aa:	4798      	blx	r3
	disp_pos_t info1_pos = {.x_ = OLED::FIRST_COL, .y_ = OLED::FIRST_ROW};
 80018ac:	4b6a      	ldr	r3, [pc, #424]	; (8001a58 <_ZN6Skocko10PrintIntroEv+0x1c4>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	82bb      	strh	r3, [r7, #20]
	this->OLED_->PrintString("Dobro dosli u", info1_pos);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80018b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ba:	4618      	mov	r0, r3
 80018bc:	f009 ff1b 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80018c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018c4:	f107 0318 	add.w	r3, r7, #24
 80018c8:	4964      	ldr	r1, [pc, #400]	; (8001a5c <_ZN6Skocko10PrintIntroEv+0x1c8>)
 80018ca:	4618      	mov	r0, r3
 80018cc:	f00a f88a 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80018d0:	f107 0214 	add.w	r2, r7, #20
 80018d4:	f107 0318 	add.w	r3, r7, #24
 80018d8:	4619      	mov	r1, r3
 80018da:	4620      	mov	r0, r4
 80018dc:	f7ff fcaa 	bl	8001234 <_ZN4OLED11PrintStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8disp_pos>
 80018e0:	f107 0318 	add.w	r3, r7, #24
 80018e4:	4618      	mov	r0, r3
 80018e6:	f009 ffd0 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80018ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ee:	4618      	mov	r0, r3
 80018f0:	f009 ff02 	bl	800b6f8 <_ZNSaIcED1Ev>
	disp_pos_t info2_pos = {.x_ = OLED::FIRST_COL, .y_ = OLED::SECOND_ROW};
 80018f4:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <_ZN6Skocko10PrintIntroEv+0x1cc>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	823b      	strh	r3, [r7, #16]
	this->OLED_->PrintString("Slagalicu!", info2_pos);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80018fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001902:	4618      	mov	r0, r3
 8001904:	f009 fef7 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001908:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800190c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001910:	4954      	ldr	r1, [pc, #336]	; (8001a64 <_ZN6Skocko10PrintIntroEv+0x1d0>)
 8001912:	4618      	mov	r0, r3
 8001914:	f00a f866 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001918:	f107 0210 	add.w	r2, r7, #16
 800191c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001920:	4619      	mov	r1, r3
 8001922:	4620      	mov	r0, r4
 8001924:	f7ff fc86 	bl	8001234 <_ZN4OLED11PrintStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8disp_pos>
 8001928:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800192c:	4618      	mov	r0, r3
 800192e:	f009 ffac 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001932:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001936:	4618      	mov	r0, r3
 8001938:	f009 fede 	bl	800b6f8 <_ZNSaIcED1Ev>
	disp_pos_t info3_pos = {.x_ = OLED::FIRST_COL, .y_ = OLED::THIRD_ROW};
 800193c:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <_ZN6Skocko10PrintIntroEv+0x1d4>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	81bb      	strh	r3, [r7, #12]
	this->OLED_->PrintString("Pratite uputstva", info3_pos);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001946:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800194a:	4618      	mov	r0, r3
 800194c:	f009 fed3 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001950:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001954:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001958:	4944      	ldr	r1, [pc, #272]	; (8001a6c <_ZN6Skocko10PrintIntroEv+0x1d8>)
 800195a:	4618      	mov	r0, r3
 800195c:	f00a f842 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001960:	f107 020c 	add.w	r2, r7, #12
 8001964:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001968:	4619      	mov	r1, r3
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff fc62 	bl	8001234 <_ZN4OLED11PrintStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8disp_pos>
 8001970:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001974:	4618      	mov	r0, r3
 8001976:	f009 ff88 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800197a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800197e:	4618      	mov	r0, r3
 8001980:	f009 feba 	bl	800b6f8 <_ZNSaIcED1Ev>
	disp_pos_t info4_pos = {.x_ = OLED::FIRST_COL, .y_ = OLED::FOURTH_ROW};
 8001984:	4b3a      	ldr	r3, [pc, #232]	; (8001a70 <_ZN6Skocko10PrintIntroEv+0x1dc>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	813b      	strh	r3, [r7, #8]
	this->OLED_->PrintString("sa terminala", info4_pos);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800198e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001992:	4618      	mov	r0, r3
 8001994:	f009 feaf 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001998:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800199c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019a0:	4934      	ldr	r1, [pc, #208]	; (8001a74 <_ZN6Skocko10PrintIntroEv+0x1e0>)
 80019a2:	4618      	mov	r0, r3
 80019a4:	f00a f81e 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80019a8:	f107 0208 	add.w	r2, r7, #8
 80019ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019b0:	4619      	mov	r1, r3
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff fc3e 	bl	8001234 <_ZN4OLED11PrintStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8disp_pos>
 80019b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019bc:	4618      	mov	r0, r3
 80019be:	f009 ff64 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80019c2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019c6:	4618      	mov	r0, r3
 80019c8:	f009 fe96 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->OLED_->UpdateScreen();
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fcc5 	bl	8001360 <_ZN4OLED12UpdateScreenEv>
	/* PC display */
	this->PrintUART("****Dobrodosli u Slagalicu****\n***Napomena: Igra je jos uvek u razvoju. ");
 80019d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019da:	4618      	mov	r0, r3
 80019dc:	f009 fe8b 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80019e0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80019e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80019e8:	4923      	ldr	r1, [pc, #140]	; (8001a78 <_ZN6Skocko10PrintIntroEv+0x1e4>)
 80019ea:	4618      	mov	r0, r3
 80019ec:	f009 fffa 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80019f0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f001 f909 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80019fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a00:	4618      	mov	r0, r3
 8001a02:	f009 ff42 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f009 fe74 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("Trenutno je moguce igrati igru skocko.\n");
 8001a10:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a14:	4618      	mov	r0, r3
 8001a16:	f009 fe6e 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001a1a:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001a1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a22:	4916      	ldr	r1, [pc, #88]	; (8001a7c <_ZN6Skocko10PrintIntroEv+0x1e8>)
 8001a24:	4618      	mov	r0, r3
 8001a26:	f009 ffdd 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001a2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f001 f8ec 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001a36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f009 ff25 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a40:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a44:	4618      	mov	r0, r3
 8001a46:	f009 fe57 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->state_ = this->ST_WAITING_PLAYER_NAME;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	731a      	strb	r2, [r3, #12]
}
 8001a50:	bf00      	nop
 8001a52:	37c4      	adds	r7, #196	; 0xc4
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd90      	pop	{r4, r7, pc}
 8001a58:	0800be60 	.word	0x0800be60
 8001a5c:	0800bdac 	.word	0x0800bdac
 8001a60:	0800be64 	.word	0x0800be64
 8001a64:	0800bdbc 	.word	0x0800bdbc
 8001a68:	0800be68 	.word	0x0800be68
 8001a6c:	0800bdc8 	.word	0x0800bdc8
 8001a70:	0800be6c 	.word	0x0800be6c
 8001a74:	0800bddc 	.word	0x0800bddc
 8001a78:	0800bdec 	.word	0x0800bdec
 8001a7c:	0800be38 	.word	0x0800be38

08001a80 <_ZN6Skocko9SetupUserEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::SetupUser(void){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b09e      	sub	sp, #120	; 0x78
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	/* Setup player name */
	this->PrintUART("Unesite Vase ime preko UART terminala sa zvezdom na kraju, u formatu: Radovan*\n");
 8001a88:	f107 0320 	add.w	r3, r7, #32
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f009 fe32 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001a92:	f107 0220 	add.w	r2, r7, #32
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	493a      	ldr	r1, [pc, #232]	; (8001b84 <_ZN6Skocko9SetupUserEv+0x104>)
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f009 ffa1 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f001 f8b0 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f009 fee9 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ab8:	f107 0320 	add.w	r3, r7, #32
 8001abc:	4618      	mov	r0, r3
 8001abe:	f009 fe1b 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("Ako zelite da preskocite ovu opciju samo pritisnite plavi taster na beloj plocici.\n");
 8001ac2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f009 fe15 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001acc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad4:	492c      	ldr	r1, [pc, #176]	; (8001b88 <_ZN6Skocko9SetupUserEv+0x108>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f009 ff84 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f001 f893 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aec:	4618      	mov	r0, r3
 8001aee:	f009 fecc 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001af2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001af6:	4618      	mov	r0, r3
 8001af8:	f009 fdfe 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->ReceivePlayerNameFromUART();
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f001 f83e 	bl	8002b7e <_ZN6Skocko25ReceivePlayerNameFromUARTEv>
	this->PrintUART("\nVase ime je: ");
 8001b02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b06:	4618      	mov	r0, r3
 8001b08:	f009 fdf5 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001b0c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001b10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b14:	491d      	ldr	r1, [pc, #116]	; (8001b8c <_ZN6Skocko9SetupUserEv+0x10c>)
 8001b16:	4618      	mov	r0, r3
 8001b18:	f009 ff64 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001b1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b20:	4619      	mov	r1, r3
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f001 f873 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001b28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f009 feac 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b36:	4618      	mov	r0, r3
 8001b38:	f009 fdde 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintPlayerNameToUART();
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f001 f844 	bl	8002bca <_ZN6Skocko21PrintPlayerNameToUARTEv>
	this->PrintUART("\n\n");
 8001b42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b46:	4618      	mov	r0, r3
 8001b48:	f009 fdd5 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001b4c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001b50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b54:	490e      	ldr	r1, [pc, #56]	; (8001b90 <_ZN6Skocko9SetupUserEv+0x110>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f009 ff44 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001b5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f001 f853 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001b68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f009 fe8c 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b72:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b76:	4618      	mov	r0, r3
 8001b78:	f009 fdbe 	bl	800b6f8 <_ZNSaIcED1Ev>
}
 8001b7c:	bf00      	nop
 8001b7e:	3778      	adds	r7, #120	; 0x78
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	0800be70 	.word	0x0800be70
 8001b88:	0800bec0 	.word	0x0800bec0
 8001b8c:	0800bf14 	.word	0x0800bf14
 8001b90:	0800bf24 	.word	0x0800bf24

08001b94 <_ZN6Skocko15SetupBrightnessEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::SetupBrightness(void){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b090      	sub	sp, #64	; 0x40
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	/* Setup OLED brightness */
	this->PrintUART("Podesite kontrast pomeranjem crvenog potenciometra. ");
 8001b9c:	f107 0320 	add.w	r3, r7, #32
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f009 fda8 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001ba6:	f107 0220 	add.w	r2, r7, #32
 8001baa:	f107 0308 	add.w	r3, r7, #8
 8001bae:	491e      	ldr	r1, [pc, #120]	; (8001c28 <_ZN6Skocko15SetupBrightnessEv+0x94>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f009 ff17 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	4619      	mov	r1, r3
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f001 f826 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001bc2:	f107 0308 	add.w	r3, r7, #8
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f009 fe5f 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001bcc:	f107 0320 	add.w	r3, r7, #32
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f009 fd91 	bl	800b6f8 <_ZNSaIcED1Ev>
	HAL_TIM_Base_Start_IT(this->timerOLED_);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f007 fd74 	bl	80096c8 <HAL_TIM_Base_Start_IT>
	this->PrintUART("Kada ste zadovoljni sa kontrastom, pritisnite plavi taster.\n\n");
 8001be0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001be4:	4618      	mov	r0, r3
 8001be6:	f009 fd86 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001bea:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf2:	490e      	ldr	r1, [pc, #56]	; (8001c2c <_ZN6Skocko15SetupBrightnessEv+0x98>)
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f009 fef5 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f001 f804 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f009 fe3d 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c14:	4618      	mov	r0, r3
 8001c16:	f009 fd6f 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->state_ = this->ST_WAITING_BRIGHTNESS;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	731a      	strb	r2, [r3, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3740      	adds	r7, #64	; 0x40
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	0800bf28 	.word	0x0800bf28
 8001c2c:	0800bf60 	.word	0x0800bf60

08001c30 <_ZN6Skocko13PrintGameInfoEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::PrintGameInfo(void){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0c2      	sub	sp, #264	; 0x108
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c3e:	6018      	str	r0, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c46:	489c      	ldr	r0, [pc, #624]	; (8001eb8 <_ZN6Skocko13PrintGameInfoEv+0x288>)
 8001c48:	f005 fbca 	bl	80073e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c56:	f005 fbc3 	bl	80073e0 <HAL_GPIO_WritePin>
	this->PrintUART("\n***UPUTSTVO***\n");
 8001c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f009 fd49 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001c64:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	4993      	ldr	r1, [pc, #588]	; (8001ebc <_ZN6Skocko13PrintGameInfoEv+0x28c>)
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f009 feb8 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c74:	f107 020c 	add.w	r2, r7, #12
 8001c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c80:	4611      	mov	r1, r2
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	f000 ffc3 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f009 fdfc 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c96:	4618      	mov	r0, r3
 8001c98:	f009 fd2e 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("Da biste otpoceli unos pocetne ili bilo koje naredne kombinacije potrebno je da pritisnete bilo koji od sledecih tastera:\n");
 8001c9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f009 fd28 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001ca6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cae:	4984      	ldr	r1, [pc, #528]	; (8001ec0 <_ZN6Skocko13PrintGameInfoEv+0x290>)
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f009 fe97 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001cb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	f000 ffa2 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f009 fddb 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001cd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f009 fd0d 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART(" - Plavi taster - nalazi se na beloj plocici\n");
 8001cde:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f009 fd07 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001ce8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001cec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cf0:	4974      	ldr	r1, [pc, #464]	; (8001ec4 <_ZN6Skocko13PrintGameInfoEv+0x294>)
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f009 fe76 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001cf8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d04:	4611      	mov	r1, r2
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	f000 ff81 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001d0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d10:	4618      	mov	r0, r3
 8001d12:	f009 fdba 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d16:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f009 fcec 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART(" - Braon taster SW1 - nalazi se na plavoj plocici odmah ispod OLED displeja (levi od dva braon tastera)\n");
 8001d20:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d24:	4618      	mov	r0, r3
 8001d26:	f009 fce6 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001d2a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001d2e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d32:	4965      	ldr	r1, [pc, #404]	; (8001ec8 <_ZN6Skocko13PrintGameInfoEv+0x298>)
 8001d34:	4618      	mov	r0, r3
 8001d36:	f009 fe55 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001d3a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d46:	4611      	mov	r1, r2
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	f000 ff60 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001d4e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d52:	4618      	mov	r0, r3
 8001d54:	f009 fd99 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d58:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f009 fccb 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART(" - Braon taster SW2 - nalazi se na plavoj plocici odmah ispod OLED displeja (desni od dva braon tastera)\n");
 8001d62:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d66:	4618      	mov	r0, r3
 8001d68:	f009 fcc5 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001d6c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001d70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d74:	4955      	ldr	r1, [pc, #340]	; (8001ecc <_ZN6Skocko13PrintGameInfoEv+0x29c>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f009 fe34 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001d7c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d88:	4611      	mov	r1, r2
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	f000 ff3f 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001d90:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d94:	4618      	mov	r0, r3
 8001d96:	f009 fd78 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f009 fcaa 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("Na tastere SW2/SW1 se pomerate udesno/ulevo.\nOkretanjem crnog potenciometra birate znak.\n");
 8001da4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f009 fca4 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001dae:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001db2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001db6:	4946      	ldr	r1, [pc, #280]	; (8001ed0 <_ZN6Skocko13PrintGameInfoEv+0x2a0>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f009 fe13 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001dbe:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001dca:	4611      	mov	r1, r2
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	f000 ff1e 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001dd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f009 fd57 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ddc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f009 fc89 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("Na plavi taster potvrdjujete unetu kombinaciju. Tom prilikom se putem UART-a ispisuje kombinacija koju ste uneli ");
 8001de6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dea:	4618      	mov	r0, r3
 8001dec:	f009 fc83 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001df0:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001df4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001df8:	4936      	ldr	r1, [pc, #216]	; (8001ed4 <_ZN6Skocko13PrintGameInfoEv+0x2a4>)
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f009 fdf2 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001e00:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	f000 fefd 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001e14:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f009 fd36 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e1e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e22:	4618      	mov	r0, r3
 8001e24:	f009 fc68 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("i rezultat koji ste tom prilikom ostvarili.\n");
 8001e28:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f009 fc62 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001e32:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001e36:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e3a:	4927      	ldr	r1, [pc, #156]	; (8001ed8 <_ZN6Skocko13PrintGameInfoEv+0x2a8>)
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f009 fdd1 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001e42:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e4e:	4611      	mov	r1, r2
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	f000 fedc 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001e56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f009 fd15 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e60:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e64:	4618      	mov	r0, r3
 8001e66:	f009 fc47 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("\nDa biste poceli igru pritisnite bilo koji od tri pomenuta tastera.\n");
 8001e6a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f009 fc41 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001e74:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8001e78:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e7c:	4917      	ldr	r1, [pc, #92]	; (8001edc <_ZN6Skocko13PrintGameInfoEv+0x2ac>)
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f009 fdb0 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001e84:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8001e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e90:	4611      	mov	r1, r2
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	f000 febb 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001e98:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f009 fcf4 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ea2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f009 fc26 	bl	800b6f8 <_ZNSaIcED1Ev>
}
 8001eac:	bf00      	nop
 8001eae:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	48000400 	.word	0x48000400
 8001ebc:	0800bfa0 	.word	0x0800bfa0
 8001ec0:	0800bfb4 	.word	0x0800bfb4
 8001ec4:	0800c030 	.word	0x0800c030
 8001ec8:	0800c060 	.word	0x0800c060
 8001ecc:	0800c0cc 	.word	0x0800c0cc
 8001ed0:	0800c138 	.word	0x0800c138
 8001ed4:	0800c194 	.word	0x0800c194
 8001ed8:	0800c208 	.word	0x0800c208
 8001edc:	0800c238 	.word	0x0800c238

08001ee0 <_ZN6Skocko13SetBrightnessERKm>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::SetBrightness(const uint32_t& value){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
	uint32_t temp;
	temp = value / 16;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	60fb      	str	r3, [r7, #12]
	this->OLED_->SetBrightness((uint8_t) temp);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fa3c 	bl	800137a <_ZN4OLED13SetBrightnessEh>
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_ZN6Skocko17ConfirmBrightnessEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::ConfirmBrightness(void){
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(this->timerOLED_);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f007 fc46 	bl	80097a8 <HAL_TIM_Base_Stop_IT>
	//this->SetupUser();
	this->PrintGameInfo();
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff fe87 	bl	8001c30 <_ZN6Skocko13PrintGameInfoEv>
	this->state_ = this->ST_WAITING_TO_START;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2203      	movs	r2, #3
 8001f26:	731a      	strb	r2, [r3, #12]
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_ZN6Skocko11StartSkockoEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::StartSkocko(void){
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b0d1      	sub	sp, #324	; 0x144
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f3a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f3e:	6018      	str	r0, [r3, #0]
	//TODO
	this->PrintUART("\nNova igra je pocela!\nSrecno!!!\n\n\n");
 8001f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f44:	4618      	mov	r0, r3
 8001f46:	f009 fbd6 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001f4a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	49d6      	ldr	r1, [pc, #856]	; (80022ac <_ZN6Skocko11StartSkockoEv+0x37c>)
 8001f54:	4618      	mov	r0, r3
 8001f56:	f009 fd45 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001f5a:	f107 020c 	add.w	r2, r7, #12
 8001f5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f62:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f66:	4611      	mov	r1, r2
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	f000 fe50 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	4618      	mov	r0, r3
 8001f74:	f009 fc89 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f009 fbbb 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("******************************************************************************************\n");
 8001f82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f86:	4618      	mov	r0, r3
 8001f88:	f009 fbb5 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001f8c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001f90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f94:	49c6      	ldr	r1, [pc, #792]	; (80022b0 <_ZN6Skocko11StartSkockoEv+0x380>)
 8001f96:	4618      	mov	r0, r3
 8001f98:	f009 fd24 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001f9c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fa0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001fa4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001fa8:	4611      	mov	r1, r2
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	f000 fe2f 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001fb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f009 fc68 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001fba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f009 fb9a 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("*                                                                                        *\n");
 8001fc4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f009 fb94 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8001fce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fd6:	49b7      	ldr	r1, [pc, #732]	; (80022b4 <_ZN6Skocko11StartSkockoEv+0x384>)
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f009 fd03 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001fde:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001fe2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001fe6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001fea:	4611      	mov	r1, r2
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	f000 fe0e 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001ff2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f009 fc47 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ffc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002000:	4618      	mov	r0, r3
 8002002:	f009 fb79 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("*                                                                                        *\n");
 8002006:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800200a:	4618      	mov	r0, r3
 800200c:	f009 fb73 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8002010:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002014:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002018:	49a6      	ldr	r1, [pc, #664]	; (80022b4 <_ZN6Skocko11StartSkockoEv+0x384>)
 800201a:	4618      	mov	r0, r3
 800201c:	f009 fce2 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002020:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002024:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002028:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800202c:	4611      	mov	r1, r2
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	f000 fded 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002034:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002038:	4618      	mov	r0, r3
 800203a:	f009 fc26 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800203e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002042:	4618      	mov	r0, r3
 8002044:	f009 fb58 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("*    |------------------------------------------------------------------------------|    *\n");
 8002048:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800204c:	4618      	mov	r0, r3
 800204e:	f009 fb52 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8002052:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002056:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800205a:	4997      	ldr	r1, [pc, #604]	; (80022b8 <_ZN6Skocko11StartSkockoEv+0x388>)
 800205c:	4618      	mov	r0, r3
 800205e:	f009 fcc1 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002062:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002066:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800206a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800206e:	4611      	mov	r1, r2
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f000 fdcc 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002076:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800207a:	4618      	mov	r0, r3
 800207c:	f009 fc05 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002080:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002084:	4618      	mov	r0, r3
 8002086:	f009 fb37 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("*    ||----------------------------------------------------------------------------||    *\n");
 800208a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800208e:	4618      	mov	r0, r3
 8002090:	f009 fb31 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8002094:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002098:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800209c:	4987      	ldr	r1, [pc, #540]	; (80022bc <_ZN6Skocko11StartSkockoEv+0x38c>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f009 fca0 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80020a4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80020a8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80020ac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020b0:	4611      	mov	r1, r2
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	f000 fdab 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80020b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020bc:	4618      	mov	r0, r3
 80020be:	f009 fbe4 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80020c2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f009 fb16 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("*    ||    S1    |    S2    |    S3    |    S4    |||   Na mestu   | Nisu na mestu ||    *\n");
 80020cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020d0:	4618      	mov	r0, r3
 80020d2:	f009 fb10 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80020d6:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80020da:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020de:	4978      	ldr	r1, [pc, #480]	; (80022c0 <_ZN6Skocko11StartSkockoEv+0x390>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f009 fc7f 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80020e6:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80020ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80020ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020f2:	4611      	mov	r1, r2
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	f000 fd8a 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80020fa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020fe:	4618      	mov	r0, r3
 8002100:	f009 fbc3 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002104:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002108:	4618      	mov	r0, r3
 800210a:	f009 faf5 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("*    ||----------------------------------------------------------------------------||    *\n");
 800210e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002112:	4618      	mov	r0, r3
 8002114:	f009 faef 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8002118:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800211c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002120:	4966      	ldr	r1, [pc, #408]	; (80022bc <_ZN6Skocko11StartSkockoEv+0x38c>)
 8002122:	4618      	mov	r0, r3
 8002124:	f009 fc5e 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002128:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800212c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002130:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002134:	4611      	mov	r1, r2
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	f000 fd69 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800213c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002140:	4618      	mov	r0, r3
 8002142:	f009 fba2 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002146:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800214a:	4618      	mov	r0, r3
 800214c:	f009 fad4 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("*    |                                                                              |    *\n");
 8002150:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002154:	4618      	mov	r0, r3
 8002156:	f009 face 	bl	800b6f6 <_ZNSaIcEC1Ev>
 800215a:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800215e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002162:	4958      	ldr	r1, [pc, #352]	; (80022c4 <_ZN6Skocko11StartSkockoEv+0x394>)
 8002164:	4618      	mov	r0, r3
 8002166:	f009 fc3d 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800216a:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800216e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002172:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002176:	4611      	mov	r1, r2
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	f000 fd48 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800217e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002182:	4618      	mov	r0, r3
 8002184:	f009 fb81 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002188:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800218c:	4618      	mov	r0, r3
 800218e:	f009 fab3 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("*    ||----------------------------------------------------------------------------||    *\n");
 8002192:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002196:	4618      	mov	r0, r3
 8002198:	f009 faad 	bl	800b6f6 <_ZNSaIcEC1Ev>
 800219c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80021a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021a4:	4945      	ldr	r1, [pc, #276]	; (80022bc <_ZN6Skocko11StartSkockoEv+0x38c>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f009 fc1c 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80021ac:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80021b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80021b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021b8:	4611      	mov	r1, r2
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	f000 fd27 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80021c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021c4:	4618      	mov	r0, r3
 80021c6:	f009 fb60 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80021ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80021ce:	4618      	mov	r0, r3
 80021d0:	f009 fa92 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->state_ = this->ST_RECEIVING_COMB;
 80021d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80021d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2204      	movs	r2, #4
 80021e0:	731a      	strb	r2, [r3, #12]
	this->WinCombGen();
 80021e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80021e6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	f000 f87c 	bl	80022e8 <_ZN6Skocko10WinCombGenEv>
	this->OLED_->Clear();
 80021f0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80021f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002200:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4610      	mov	r0, r2
 800220e:	4798      	blx	r3
	disp_pos_t header_pos = {.x_ = OLED::FIRST_COL, .y_ = OLED::FIRST_COL};
 8002210:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002214:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002218:	4a2b      	ldr	r2, [pc, #172]	; (80022c8 <_ZN6Skocko11StartSkockoEv+0x398>)
 800221a:	8812      	ldrh	r2, [r2, #0]
 800221c:	801a      	strh	r2, [r3, #0]
	this->OLED_->PrintString("IGRA SKOCKO", header_pos);
 800221e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002222:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800222a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800222e:	4618      	mov	r0, r3
 8002230:	f009 fa61 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8002234:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8002238:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800223c:	4923      	ldr	r1, [pc, #140]	; (80022cc <_ZN6Skocko11StartSkockoEv+0x39c>)
 800223e:	4618      	mov	r0, r3
 8002240:	f009 fbd0 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002244:	f107 0208 	add.w	r2, r7, #8
 8002248:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800224c:	4619      	mov	r1, r3
 800224e:	4620      	mov	r0, r4
 8002250:	f7fe fff0 	bl	8001234 <_ZN4OLED11PrintStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8disp_pos>
 8002254:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002258:	4618      	mov	r0, r3
 800225a:	f009 fb16 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800225e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002262:	4618      	mov	r0, r3
 8002264:	f009 fa48 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->OLED_->UpdateScreen();
 8002268:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800226c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff f873 	bl	8001360 <_ZN4OLED12UpdateScreenEv>
	this->SEV_SEG_->Print(1);
 800227a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800227e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002286:	2101      	movs	r1, #1
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff f8e5 	bl	8001458 <_ZN7SEV_SEG5PrintEh>
	HAL_TIM_Base_Start_IT(this->timerOLED_);
 800228e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002292:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4618      	mov	r0, r3
 800229c:	f007 fa14 	bl	80096c8 <HAL_TIM_Base_Start_IT>
}
 80022a0:	bf00      	nop
 80022a2:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd90      	pop	{r4, r7, pc}
 80022aa:	bf00      	nop
 80022ac:	0800c280 	.word	0x0800c280
 80022b0:	0800c2a4 	.word	0x0800c2a4
 80022b4:	0800c300 	.word	0x0800c300
 80022b8:	0800c35c 	.word	0x0800c35c
 80022bc:	0800c3b8 	.word	0x0800c3b8
 80022c0:	0800c414 	.word	0x0800c414
 80022c4:	0800c470 	.word	0x0800c470
 80022c8:	0800be60 	.word	0x0800be60
 80022cc:	0800c4cc 	.word	0x0800c4cc

080022d0 <_ZN6Skocko8GetStateEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
uint8_t Skocko::GetState(void){
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	return this->state_;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	7b1b      	ldrb	r3, [r3, #12]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_ZN6Skocko10WinCombGenEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::WinCombGen(void){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(this->timerWinCombGen_);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f007 f9bf 	bl	8009678 <HAL_TIM_Base_Stop>
	uint16_t timVal = __HAL_TIM_GET_COUNTER(this->timerWinCombGen_);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	81bb      	strh	r3, [r7, #12]
	uint32_t temp1 = timVal * this->winFactor_;
 8002304:	89bb      	ldrh	r3, [r7, #12]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	8a52      	ldrh	r2, [r2, #18]
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	60bb      	str	r3, [r7, #8]
	for(uint8_t i = 0; i < 4; i++){
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	2b03      	cmp	r3, #3
 8002318:	f200 8099 	bhi.w	800244e <_ZN6Skocko10WinCombGenEv+0x166>
		switch((temp1 & this->mask_[i]) >> (i*4) ){
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	3314      	adds	r3, #20
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	88db      	ldrh	r3, [r3, #6]
 8002328:	461a      	mov	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	401a      	ands	r2, r3
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	2b0f      	cmp	r3, #15
 8002338:	f200 8084 	bhi.w	8002444 <_ZN6Skocko10WinCombGenEv+0x15c>
 800233c:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <_ZN6Skocko10WinCombGenEv+0x5c>)
 800233e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002342:	bf00      	nop
 8002344:	08002385 	.word	0x08002385
 8002348:	08002391 	.word	0x08002391
 800234c:	0800239d 	.word	0x0800239d
 8002350:	080023a9 	.word	0x080023a9
 8002354:	080023b5 	.word	0x080023b5
 8002358:	080023c1 	.word	0x080023c1
 800235c:	080023cd 	.word	0x080023cd
 8002360:	080023d9 	.word	0x080023d9
 8002364:	080023e5 	.word	0x080023e5
 8002368:	080023f1 	.word	0x080023f1
 800236c:	080023fd 	.word	0x080023fd
 8002370:	08002409 	.word	0x08002409
 8002374:	08002415 	.word	0x08002415
 8002378:	08002421 	.word	0x08002421
 800237c:	0800242d 	.word	0x0800242d
 8002380:	08002439 	.word	0x08002439
		case 0:
			this->winComb_[i] = this->SKOCKO;
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	2201      	movs	r2, #1
 800238c:	735a      	strb	r2, [r3, #13]
			break;
 800238e:	e05a      	b.n	8002446 <_ZN6Skocko10WinCombGenEv+0x15e>
		case 1:
			this->winComb_[i] = this->ZVEZDA;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	2202      	movs	r2, #2
 8002398:	735a      	strb	r2, [r3, #13]
			break;
 800239a:	e054      	b.n	8002446 <_ZN6Skocko10WinCombGenEv+0x15e>
		case 2:
			this->winComb_[i] = this->PIK;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	2203      	movs	r2, #3
 80023a4:	735a      	strb	r2, [r3, #13]
			break;
 80023a6:	e04e      	b.n	8002446 <_ZN6Skocko10WinCombGenEv+0x15e>
		case 3:
			this->winComb_[i] = this->HERC;
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	2204      	movs	r2, #4
 80023b0:	735a      	strb	r2, [r3, #13]
			break;
 80023b2:	e048      	b.n	8002446 <_ZN6Skocko10WinCombGenEv+0x15e>
		case 4:
			this->winComb_[i] = this->TREF;
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	2205      	movs	r2, #5
 80023bc:	735a      	strb	r2, [r3, #13]
			break;
 80023be:	e042      	b.n	8002446 <_ZN6Skocko10WinCombGenEv+0x15e>
		case 5:
			this->winComb_[i] = this->KARO;
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	2206      	movs	r2, #6
 80023c8:	735a      	strb	r2, [r3, #13]
			break;
 80023ca:	e03c      	b.n	8002446 <_ZN6Skocko10WinCombGenEv+0x15e>
		case 6:
			this->winComb_[i] = this->SKOCKO;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	2201      	movs	r2, #1
 80023d4:	735a      	strb	r2, [r3, #13]
			break;
 80023d6:	e036      	b.n	8002446 <_ZN6Skocko10WinCombGenEv+0x15e>
		case 7:
			this->winComb_[i] = this->ZVEZDA;
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	2202      	movs	r2, #2
 80023e0:	735a      	strb	r2, [r3, #13]
			break;
 80023e2:	e030      	b.n	8002446 <_ZN6Skocko10WinCombGenEv+0x15e>
		case 8:
			this->winComb_[i] = this->PIK;
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	2203      	movs	r2, #3
 80023ec:	735a      	strb	r2, [r3, #13]
			break;
 80023ee:	e02a      	b.n	8002446 <_ZN6Skocko10WinCombGenEv+0x15e>
		case 9:
			this->winComb_[i] = this->HERC;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	2204      	movs	r2, #4
 80023f8:	735a      	strb	r2, [r3, #13]
			break;
 80023fa:	e024      	b.n	8002446 <_ZN6Skocko10WinCombGenEv+0x15e>
		case 10:
			this->winComb_[i] = this->TREF;
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	2205      	movs	r2, #5
 8002404:	735a      	strb	r2, [r3, #13]
			break;
 8002406:	e01e      	b.n	8002446 <_ZN6Skocko10WinCombGenEv+0x15e>
		case 11:
			this->winComb_[i] = this->KARO;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	2206      	movs	r2, #6
 8002410:	735a      	strb	r2, [r3, #13]
			break;
 8002412:	e018      	b.n	8002446 <_ZN6Skocko10WinCombGenEv+0x15e>
		case 12:
			this->winComb_[i] = this->SKOCKO;
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	2201      	movs	r2, #1
 800241c:	735a      	strb	r2, [r3, #13]
			break;
 800241e:	e012      	b.n	8002446 <_ZN6Skocko10WinCombGenEv+0x15e>
		case 13:
			this->winComb_[i] = this->ZVEZDA;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	2202      	movs	r2, #2
 8002428:	735a      	strb	r2, [r3, #13]
			break;
 800242a:	e00c      	b.n	8002446 <_ZN6Skocko10WinCombGenEv+0x15e>
		case 14:
			this->winComb_[i] = this->PIK;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	2203      	movs	r2, #3
 8002434:	735a      	strb	r2, [r3, #13]
			break;
 8002436:	e006      	b.n	8002446 <_ZN6Skocko10WinCombGenEv+0x15e>
		case 15:
			this->winComb_[i] = this->HERC;
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	2204      	movs	r2, #4
 8002440:	735a      	strb	r2, [r3, #13]
			break;
 8002442:	e000      	b.n	8002446 <_ZN6Skocko10WinCombGenEv+0x15e>
		default:
			break;
 8002444:	bf00      	nop
	for(uint8_t i = 0; i < 4; i++){
 8002446:	7bfb      	ldrb	r3, [r7, #15]
 8002448:	3301      	adds	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e762      	b.n	8002314 <_ZN6Skocko10WinCombGenEv+0x2c>
		}
	}
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop

08002458 <_ZN6Skocko7NewCombEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::NewComb(void){
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b08b      	sub	sp, #44	; 0x2c
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	this->currComb_[this->POSITION_1] = this->NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	this->currComb_[this->POSITION_2] = this->NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	this->currComb_[this->POSITION_3] = this->NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	this->currComb_[this->POSITION_4] = this->NONE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	this->OLED_->Clear();
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4610      	mov	r0, r2
 800248e:	4798      	blx	r3
	disp_pos_t header_pos = {.x_ = OLED::FIRST_COL, .y_ = OLED::FIRST_COL};
 8002490:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <_ZN6Skocko7NewCombEv+0xa4>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	813b      	strh	r3, [r7, #8]
	this->OLED_->PrintString("IGRA SKOCKO", header_pos);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800249a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249e:	4618      	mov	r0, r3
 80024a0:	f009 f929 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80024a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	4914      	ldr	r1, [pc, #80]	; (8002500 <_ZN6Skocko7NewCombEv+0xa8>)
 80024ae:	4618      	mov	r0, r3
 80024b0:	f009 fa98 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80024b4:	f107 0208 	add.w	r2, r7, #8
 80024b8:	f107 030c 	add.w	r3, r7, #12
 80024bc:	4619      	mov	r1, r3
 80024be:	4620      	mov	r0, r4
 80024c0:	f7fe feb8 	bl	8001234 <_ZN4OLED11PrintStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8disp_pos>
 80024c4:	f107 030c 	add.w	r3, r7, #12
 80024c8:	4618      	mov	r0, r3
 80024ca:	f009 f9de 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80024ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d2:	4618      	mov	r0, r3
 80024d4:	f009 f910 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->OLED_->UpdateScreen();
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe ff3f 	bl	8001360 <_ZN4OLED12UpdateScreenEv>
	HAL_TIM_Base_Start_IT(this->timerOLED_);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f007 f8ee 	bl	80096c8 <HAL_TIM_Base_Start_IT>
	this->state_ = this->ST_RECEIVING_COMB;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2204      	movs	r2, #4
 80024f0:	731a      	strb	r2, [r3, #12]
}
 80024f2:	bf00      	nop
 80024f4:	372c      	adds	r7, #44	; 0x2c
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd90      	pop	{r4, r7, pc}
 80024fa:	bf00      	nop
 80024fc:	0800be60 	.word	0x0800be60
 8002500:	0800c4cc 	.word	0x0800c4cc

08002504 <_ZN6Skocko17IncrementPositionEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::IncrementPosition(void){
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	if(this->currPos_ < this->POSITION_4){
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002512:	2b02      	cmp	r3, #2
 8002514:	d808      	bhi.n	8002528 <_ZN6Skocko17IncrementPositionEv+0x24>
		this->currPos_++;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800251c:	3301      	adds	r3, #1
 800251e:	b2da      	uxtb	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	else{
		this->currPos_ = this->POSITION_1;
	}
}
 8002526:	e003      	b.n	8002530 <_ZN6Skocko17IncrementPositionEv+0x2c>
		this->currPos_ = this->POSITION_1;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <_ZN6Skocko17DecrementPositionEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::DecrementPosition(void){
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	if(this->currPos_ > POSITION_1){
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <_ZN6Skocko17DecrementPositionEv+0x24>
		this->currPos_--;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002554:	3b01      	subs	r3, #1
 8002556:	b2da      	uxtb	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	else{
		this->currPos_ = POSITION_4;
	}
}
 800255e:	e003      	b.n	8002568 <_ZN6Skocko17DecrementPositionEv+0x2c>
		this->currPos_ = POSITION_4;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2203      	movs	r2, #3
 8002564:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <_ZN6Skocko12CountSymbolsEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
Skocko::combCnt Skocko::CountSymbols(void){
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
	combCnt comb = {0};
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	461a      	mov	r2, r3
 8002582:	2300      	movs	r3, #0
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	6053      	str	r3, [r2, #4]
 8002588:	6093      	str	r3, [r2, #8]

	for(uint8_t i = 0; i < COMB_SYMBOLS_CNT; i++){
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b03      	cmp	r3, #3
 8002592:	f200 8088 	bhi.w	80026a6 <_ZN6Skocko12CountSymbolsEv+0x132>

		switch(this->winComb_[i]){
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	4413      	add	r3, r2
 800259c:	7b5b      	ldrb	r3, [r3, #13]
 800259e:	3b01      	subs	r3, #1
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d839      	bhi.n	8002618 <_ZN6Skocko12CountSymbolsEv+0xa4>
 80025a4:	a201      	add	r2, pc, #4	; (adr r2, 80025ac <_ZN6Skocko12CountSymbolsEv+0x38>)
 80025a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025aa:	bf00      	nop
 80025ac:	080025c5 	.word	0x080025c5
 80025b0:	080025d3 	.word	0x080025d3
 80025b4:	080025e1 	.word	0x080025e1
 80025b8:	080025ef 	.word	0x080025ef
 80025bc:	080025fd 	.word	0x080025fd
 80025c0:	0800260b 	.word	0x0800260b
		case this->SKOCKO:
			comb.winComb.skockoCnt_++;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	701a      	strb	r2, [r3, #0]
			break;
 80025d0:	e023      	b.n	800261a <_ZN6Skocko12CountSymbolsEv+0xa6>
		case this->ZVEZDA:
			comb.winComb.zvezdaCnt_++;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	785b      	ldrb	r3, [r3, #1]
 80025d6:	3301      	adds	r3, #1
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	705a      	strb	r2, [r3, #1]
			break;
 80025de:	e01c      	b.n	800261a <_ZN6Skocko12CountSymbolsEv+0xa6>
		case this->PIK:
			comb.winComb.pikCnt_++;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	789b      	ldrb	r3, [r3, #2]
 80025e4:	3301      	adds	r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	709a      	strb	r2, [r3, #2]
			break;
 80025ec:	e015      	b.n	800261a <_ZN6Skocko12CountSymbolsEv+0xa6>
		case this->HERC:
			comb.winComb.hercCnt_++;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	78db      	ldrb	r3, [r3, #3]
 80025f2:	3301      	adds	r3, #1
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	70da      	strb	r2, [r3, #3]
			break;
 80025fa:	e00e      	b.n	800261a <_ZN6Skocko12CountSymbolsEv+0xa6>
		case this->TREF:
			comb.winComb.trefCnt_++;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	791b      	ldrb	r3, [r3, #4]
 8002600:	3301      	adds	r3, #1
 8002602:	b2da      	uxtb	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	711a      	strb	r2, [r3, #4]
			break;
 8002608:	e007      	b.n	800261a <_ZN6Skocko12CountSymbolsEv+0xa6>
		case this->KARO:
			comb.winComb.karoCnt_++;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	795b      	ldrb	r3, [r3, #5]
 800260e:	3301      	adds	r3, #1
 8002610:	b2da      	uxtb	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	715a      	strb	r2, [r3, #5]
			break;
 8002616:	e000      	b.n	800261a <_ZN6Skocko12CountSymbolsEv+0xa6>
		default:
			break;
 8002618:	bf00      	nop
		}

		switch(this->currComb_[i]){
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	4413      	add	r3, r2
 8002620:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002624:	3b01      	subs	r3, #1
 8002626:	2b05      	cmp	r3, #5
 8002628:	d838      	bhi.n	800269c <_ZN6Skocko12CountSymbolsEv+0x128>
 800262a:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <_ZN6Skocko12CountSymbolsEv+0xbc>)
 800262c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002630:	08002649 	.word	0x08002649
 8002634:	08002657 	.word	0x08002657
 8002638:	08002665 	.word	0x08002665
 800263c:	08002673 	.word	0x08002673
 8002640:	08002681 	.word	0x08002681
 8002644:	0800268f 	.word	0x0800268f
		case this->SKOCKO:
			comb.userComb.skockoCnt_++;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	799b      	ldrb	r3, [r3, #6]
 800264c:	3301      	adds	r3, #1
 800264e:	b2da      	uxtb	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	719a      	strb	r2, [r3, #6]
			break;
 8002654:	e023      	b.n	800269e <_ZN6Skocko12CountSymbolsEv+0x12a>
		case this->ZVEZDA:
			comb.userComb.zvezdaCnt_++;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	79db      	ldrb	r3, [r3, #7]
 800265a:	3301      	adds	r3, #1
 800265c:	b2da      	uxtb	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	71da      	strb	r2, [r3, #7]
			break;
 8002662:	e01c      	b.n	800269e <_ZN6Skocko12CountSymbolsEv+0x12a>
		case this->PIK:
			comb.userComb.pikCnt_++;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	7a1b      	ldrb	r3, [r3, #8]
 8002668:	3301      	adds	r3, #1
 800266a:	b2da      	uxtb	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	721a      	strb	r2, [r3, #8]
			break;
 8002670:	e015      	b.n	800269e <_ZN6Skocko12CountSymbolsEv+0x12a>
		case this->HERC:
			comb.userComb.hercCnt_++;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7a5b      	ldrb	r3, [r3, #9]
 8002676:	3301      	adds	r3, #1
 8002678:	b2da      	uxtb	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	725a      	strb	r2, [r3, #9]
			break;
 800267e:	e00e      	b.n	800269e <_ZN6Skocko12CountSymbolsEv+0x12a>
		case this->TREF:
			comb.userComb.trefCnt_++;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7a9b      	ldrb	r3, [r3, #10]
 8002684:	3301      	adds	r3, #1
 8002686:	b2da      	uxtb	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	729a      	strb	r2, [r3, #10]
			break;
 800268c:	e007      	b.n	800269e <_ZN6Skocko12CountSymbolsEv+0x12a>
		case this->KARO:
			comb.userComb.karoCnt_++;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	7adb      	ldrb	r3, [r3, #11]
 8002692:	3301      	adds	r3, #1
 8002694:	b2da      	uxtb	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	72da      	strb	r2, [r3, #11]
			break;
 800269a:	e000      	b.n	800269e <_ZN6Skocko12CountSymbolsEv+0x12a>
		default:
			break;
 800269c:	bf00      	nop
	for(uint8_t i = 0; i < COMB_SYMBOLS_CNT; i++){
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	3301      	adds	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	e773      	b.n	800258e <_ZN6Skocko12CountSymbolsEv+0x1a>
		}
	}
	return comb;
 80026a6:	bf00      	nop
}
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <_ZN6Skocko15CalculateResultEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
Skocko::result Skocko::CalculateResult(void){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

	combCnt comb = CountSymbols();
 80026bc:	f107 0310 	add.w	r3, r7, #16
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff56 	bl	8002574 <_ZN6Skocko12CountSymbolsEv>
	result res;
	res.half_correct_ = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	737b      	strb	r3, [r7, #13]
	res.correct_ = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	733b      	strb	r3, [r7, #12]

	if(this->currComb_[this->POSITION_1] == this->winComb_[this->POSITION_1]){
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	7b5b      	ldrb	r3, [r3, #13]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d103      	bne.n	80026e6 <_ZN6Skocko15CalculateResultEv+0x32>
		res.correct_++;
 80026de:	7b3b      	ldrb	r3, [r7, #12]
 80026e0:	3301      	adds	r3, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	733b      	strb	r3, [r7, #12]
	}
	if(this->currComb_[this->POSITION_2] == this->winComb_[this->POSITION_2]){
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7b9b      	ldrb	r3, [r3, #14]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d103      	bne.n	80026fc <_ZN6Skocko15CalculateResultEv+0x48>
		res.correct_++;
 80026f4:	7b3b      	ldrb	r3, [r7, #12]
 80026f6:	3301      	adds	r3, #1
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	733b      	strb	r3, [r7, #12]
	}
	if(this->currComb_[this->POSITION_3] == this->winComb_[this->POSITION_3]){
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	7bdb      	ldrb	r3, [r3, #15]
 8002706:	429a      	cmp	r2, r3
 8002708:	d103      	bne.n	8002712 <_ZN6Skocko15CalculateResultEv+0x5e>
		res.correct_++;
 800270a:	7b3b      	ldrb	r3, [r7, #12]
 800270c:	3301      	adds	r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	733b      	strb	r3, [r7, #12]
	}
	if(this->currComb_[this->POSITION_4] == this->winComb_[this->POSITION_4]){
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	7c1b      	ldrb	r3, [r3, #16]
 800271c:	429a      	cmp	r2, r3
 800271e:	d103      	bne.n	8002728 <_ZN6Skocko15CalculateResultEv+0x74>
		res.correct_++;
 8002720:	7b3b      	ldrb	r3, [r7, #12]
 8002722:	3301      	adds	r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	733b      	strb	r3, [r7, #12]
	}

	if(comb.winComb.skockoCnt_ >= comb.userComb.skockoCnt_){ res.half_correct_ += comb.userComb.skockoCnt_; }
 8002728:	7c3a      	ldrb	r2, [r7, #16]
 800272a:	7dbb      	ldrb	r3, [r7, #22]
 800272c:	429a      	cmp	r2, r3
 800272e:	d305      	bcc.n	800273c <_ZN6Skocko15CalculateResultEv+0x88>
 8002730:	7b7a      	ldrb	r2, [r7, #13]
 8002732:	7dbb      	ldrb	r3, [r7, #22]
 8002734:	4413      	add	r3, r2
 8002736:	b2db      	uxtb	r3, r3
 8002738:	737b      	strb	r3, [r7, #13]
 800273a:	e004      	b.n	8002746 <_ZN6Skocko15CalculateResultEv+0x92>
	else{ res.half_correct_ += comb.winComb.skockoCnt_; }
 800273c:	7b7a      	ldrb	r2, [r7, #13]
 800273e:	7c3b      	ldrb	r3, [r7, #16]
 8002740:	4413      	add	r3, r2
 8002742:	b2db      	uxtb	r3, r3
 8002744:	737b      	strb	r3, [r7, #13]

	if(comb.winComb.zvezdaCnt_ >= comb.userComb.zvezdaCnt_){ res.half_correct_ += comb.userComb.zvezdaCnt_; }
 8002746:	7c7a      	ldrb	r2, [r7, #17]
 8002748:	7dfb      	ldrb	r3, [r7, #23]
 800274a:	429a      	cmp	r2, r3
 800274c:	d305      	bcc.n	800275a <_ZN6Skocko15CalculateResultEv+0xa6>
 800274e:	7b7a      	ldrb	r2, [r7, #13]
 8002750:	7dfb      	ldrb	r3, [r7, #23]
 8002752:	4413      	add	r3, r2
 8002754:	b2db      	uxtb	r3, r3
 8002756:	737b      	strb	r3, [r7, #13]
 8002758:	e004      	b.n	8002764 <_ZN6Skocko15CalculateResultEv+0xb0>
	else{ res.half_correct_ += comb.winComb.zvezdaCnt_; }
 800275a:	7b7a      	ldrb	r2, [r7, #13]
 800275c:	7c7b      	ldrb	r3, [r7, #17]
 800275e:	4413      	add	r3, r2
 8002760:	b2db      	uxtb	r3, r3
 8002762:	737b      	strb	r3, [r7, #13]

	if(comb.winComb.pikCnt_ >= comb.userComb.pikCnt_){ res.half_correct_ += comb.userComb.pikCnt_; }
 8002764:	7cba      	ldrb	r2, [r7, #18]
 8002766:	7e3b      	ldrb	r3, [r7, #24]
 8002768:	429a      	cmp	r2, r3
 800276a:	d305      	bcc.n	8002778 <_ZN6Skocko15CalculateResultEv+0xc4>
 800276c:	7b7a      	ldrb	r2, [r7, #13]
 800276e:	7e3b      	ldrb	r3, [r7, #24]
 8002770:	4413      	add	r3, r2
 8002772:	b2db      	uxtb	r3, r3
 8002774:	737b      	strb	r3, [r7, #13]
 8002776:	e004      	b.n	8002782 <_ZN6Skocko15CalculateResultEv+0xce>
	else{ res.half_correct_ += comb.winComb.pikCnt_; }
 8002778:	7b7a      	ldrb	r2, [r7, #13]
 800277a:	7cbb      	ldrb	r3, [r7, #18]
 800277c:	4413      	add	r3, r2
 800277e:	b2db      	uxtb	r3, r3
 8002780:	737b      	strb	r3, [r7, #13]

	if(comb.winComb.hercCnt_ >= comb.userComb.hercCnt_){ res.half_correct_ += comb.userComb.hercCnt_; }
 8002782:	7cfa      	ldrb	r2, [r7, #19]
 8002784:	7e7b      	ldrb	r3, [r7, #25]
 8002786:	429a      	cmp	r2, r3
 8002788:	d305      	bcc.n	8002796 <_ZN6Skocko15CalculateResultEv+0xe2>
 800278a:	7b7a      	ldrb	r2, [r7, #13]
 800278c:	7e7b      	ldrb	r3, [r7, #25]
 800278e:	4413      	add	r3, r2
 8002790:	b2db      	uxtb	r3, r3
 8002792:	737b      	strb	r3, [r7, #13]
 8002794:	e004      	b.n	80027a0 <_ZN6Skocko15CalculateResultEv+0xec>
	else{ res.half_correct_ += comb.winComb.hercCnt_; }
 8002796:	7b7a      	ldrb	r2, [r7, #13]
 8002798:	7cfb      	ldrb	r3, [r7, #19]
 800279a:	4413      	add	r3, r2
 800279c:	b2db      	uxtb	r3, r3
 800279e:	737b      	strb	r3, [r7, #13]

	if(comb.winComb.trefCnt_ >= comb.userComb.trefCnt_){ res.half_correct_ += comb.userComb.trefCnt_; }
 80027a0:	7d3a      	ldrb	r2, [r7, #20]
 80027a2:	7ebb      	ldrb	r3, [r7, #26]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d305      	bcc.n	80027b4 <_ZN6Skocko15CalculateResultEv+0x100>
 80027a8:	7b7a      	ldrb	r2, [r7, #13]
 80027aa:	7ebb      	ldrb	r3, [r7, #26]
 80027ac:	4413      	add	r3, r2
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	737b      	strb	r3, [r7, #13]
 80027b2:	e004      	b.n	80027be <_ZN6Skocko15CalculateResultEv+0x10a>
	else{ res.half_correct_ += comb.winComb.trefCnt_; }
 80027b4:	7b7a      	ldrb	r2, [r7, #13]
 80027b6:	7d3b      	ldrb	r3, [r7, #20]
 80027b8:	4413      	add	r3, r2
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	737b      	strb	r3, [r7, #13]

	if(comb.winComb.karoCnt_ >= comb.userComb.karoCnt_){ res.half_correct_ += comb.userComb.karoCnt_; }
 80027be:	7d7a      	ldrb	r2, [r7, #21]
 80027c0:	7efb      	ldrb	r3, [r7, #27]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d305      	bcc.n	80027d2 <_ZN6Skocko15CalculateResultEv+0x11e>
 80027c6:	7b7a      	ldrb	r2, [r7, #13]
 80027c8:	7efb      	ldrb	r3, [r7, #27]
 80027ca:	4413      	add	r3, r2
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	737b      	strb	r3, [r7, #13]
 80027d0:	e004      	b.n	80027dc <_ZN6Skocko15CalculateResultEv+0x128>
	else{ res.half_correct_ += comb.winComb.karoCnt_; }
 80027d2:	7b7a      	ldrb	r2, [r7, #13]
 80027d4:	7d7b      	ldrb	r3, [r7, #21]
 80027d6:	4413      	add	r3, r2
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	737b      	strb	r3, [r7, #13]

	res.half_correct_ -= res.correct_;
 80027dc:	7b7a      	ldrb	r2, [r7, #13]
 80027de:	7b3b      	ldrb	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	737b      	strb	r3, [r7, #13]
	return res;
 80027e6:	89bb      	ldrh	r3, [r7, #12]
 80027e8:	83bb      	strh	r3, [r7, #28]
 80027ea:	2300      	movs	r3, #0
 80027ec:	7f3a      	ldrb	r2, [r7, #28]
 80027ee:	f362 0307 	bfi	r3, r2, #0, #8
 80027f2:	7f7a      	ldrb	r2, [r7, #29]
 80027f4:	f362 230f 	bfi	r3, r2, #8, #8
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <_ZN6Skocko11PrintResultERKNS_6resultE>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::PrintResult(const result& res){
 8002800:	b580      	push	{r7, lr}
 8002802:	b0ba      	sub	sp, #232	; 0xe8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
	//TODO
	/* Message to OLED */
	string message = "Result = ";
 800280a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800280e:	4618      	mov	r0, r3
 8002810:	f008 ff71 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8002814:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002818:	f107 0310 	add.w	r3, r7, #16
 800281c:	497b      	ldr	r1, [pc, #492]	; (8002a0c <_ZN6Skocko11PrintResultERKNS_6resultE+0x20c>)
 800281e:	4618      	mov	r0, r3
 8002820:	f009 f8e0 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002824:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002828:	4618      	mov	r0, r3
 800282a:	f008 ff65 	bl	800b6f8 <_ZNSaIcED1Ev>
	message += std::to_string(res.correct_);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe ff5d 	bl	80016fa <_ZNSt7__cxx119to_stringEi>
 8002840:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002844:	f107 0310 	add.w	r3, r7, #16
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f009 f853 	bl	800b8f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8002850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002854:	4618      	mov	r0, r3
 8002856:	f009 f818 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	message += ", ";
 800285a:	f107 0310 	add.w	r3, r7, #16
 800285e:	496c      	ldr	r1, [pc, #432]	; (8002a10 <_ZN6Skocko11PrintResultERKNS_6resultE+0x210>)
 8002860:	4618      	mov	r0, r3
 8002862:	f009 f863 	bl	800b92c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	message += std::to_string(res.half_correct_);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	785b      	ldrb	r3, [r3, #1]
 800286a:	461a      	mov	r2, r3
 800286c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe ff41 	bl	80016fa <_ZNSt7__cxx119to_stringEi>
 8002878:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800287c:	f107 0310 	add.w	r3, r7, #16
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f009 f837 	bl	800b8f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8002888:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800288c:	4618      	mov	r0, r3
 800288e:	f008 fffc 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	disp_pos_t winMSG = {.x_ = OLED::FIRST_COL, .y_ = OLED::THIRD_ROW};
 8002892:	4b60      	ldr	r3, [pc, #384]	; (8002a14 <_ZN6Skocko11PrintResultERKNS_6resultE+0x214>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	81bb      	strh	r3, [r7, #12]
	this->OLED_->PrintString(message, winMSG);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	f107 020c 	add.w	r2, r7, #12
 80028a0:	f107 0110 	add.w	r1, r7, #16
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe fcc5 	bl	8001234 <_ZN4OLED11PrintStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8disp_pos>
	this->OLED_->UpdateScreen();
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fd56 	bl	8001360 <_ZN4OLED12UpdateScreenEv>

	/* Message to UART */
	this->PrintUART("*    ||");
 80028b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028b8:	4618      	mov	r0, r3
 80028ba:	f008 ff1c 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80028be:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80028c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028c6:	4954      	ldr	r1, [pc, #336]	; (8002a18 <_ZN6Skocko11PrintResultERKNS_6resultE+0x218>)
 80028c8:	4618      	mov	r0, r3
 80028ca:	f009 f88b 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80028ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028d2:	4619      	mov	r1, r3
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f99a 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80028da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028de:	4618      	mov	r0, r3
 80028e0:	f008 ffd3 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80028e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028e8:	4618      	mov	r0, r3
 80028ea:	f008 ff05 	bl	800b6f8 <_ZNSaIcED1Ev>
	PrintCombToUART(this->currComb_);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3329      	adds	r3, #41	; 0x29
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f001 f969 	bl	8003bcc <_ZN6Skocko15PrintCombToUARTEPKh>

	this->PrintUART("||      ");
 80028fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80028fe:	4618      	mov	r0, r3
 8002900:	f008 fef9 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8002904:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002908:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800290c:	4943      	ldr	r1, [pc, #268]	; (8002a1c <_ZN6Skocko11PrintResultERKNS_6resultE+0x21c>)
 800290e:	4618      	mov	r0, r3
 8002910:	f009 f868 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002914:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002918:	4619      	mov	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f977 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002920:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002924:	4618      	mov	r0, r3
 8002926:	f008 ffb0 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800292a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800292e:	4618      	mov	r0, r3
 8002930:	f008 fee2 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART(res.correct_);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	4619      	mov	r1, r3
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f9b5 	bl	8002ca8 <_ZN6Skocko9PrintUARTERKh>
	this->PrintUART("       |       ");
 800293e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002942:	4618      	mov	r0, r3
 8002944:	f008 fed7 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8002948:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800294c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002950:	4933      	ldr	r1, [pc, #204]	; (8002a20 <_ZN6Skocko11PrintResultERKNS_6resultE+0x220>)
 8002952:	4618      	mov	r0, r3
 8002954:	f009 f846 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002958:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800295c:	4619      	mov	r1, r3
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f955 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002964:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002968:	4618      	mov	r0, r3
 800296a:	f008 ff8e 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800296e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002972:	4618      	mov	r0, r3
 8002974:	f008 fec0 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART(res.half_correct_);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	3301      	adds	r3, #1
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f992 	bl	8002ca8 <_ZN6Skocko9PrintUARTERKh>
	this->PrintUART("       ||    *\n");
 8002984:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002988:	4618      	mov	r0, r3
 800298a:	f008 feb4 	bl	800b6f6 <_ZNSaIcEC1Ev>
 800298e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002992:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002996:	4923      	ldr	r1, [pc, #140]	; (8002a24 <_ZN6Skocko11PrintResultERKNS_6resultE+0x224>)
 8002998:	4618      	mov	r0, r3
 800299a:	f009 f823 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800299e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029a2:	4619      	mov	r1, r3
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f932 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80029aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f008 ff6b 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80029b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029b8:	4618      	mov	r0, r3
 80029ba:	f008 fe9d 	bl	800b6f8 <_ZNSaIcED1Ev>
	this->PrintUART("*    ||----------------------------------------------------------------------------||    *\n");
 80029be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029c2:	4618      	mov	r0, r3
 80029c4:	f008 fe97 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80029c8:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80029cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029d0:	4915      	ldr	r1, [pc, #84]	; (8002a28 <_ZN6Skocko11PrintResultERKNS_6resultE+0x228>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f009 f806 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80029d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029dc:	4619      	mov	r1, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f915 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80029e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029e8:	4618      	mov	r0, r3
 80029ea:	f008 ff4e 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80029ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029f2:	4618      	mov	r0, r3
 80029f4:	f008 fe80 	bl	800b6f8 <_ZNSaIcED1Ev>
	string message = "Result = ";
 80029f8:	f107 0310 	add.w	r3, r7, #16
 80029fc:	4618      	mov	r0, r3
 80029fe:	f008 ff44 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8002a02:	bf00      	nop
 8002a04:	37e8      	adds	r7, #232	; 0xe8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	0800c4d8 	.word	0x0800c4d8
 8002a10:	0800c4e4 	.word	0x0800c4e4
 8002a14:	0800be68 	.word	0x0800be68
 8002a18:	0800c4e8 	.word	0x0800c4e8
 8002a1c:	0800c4f0 	.word	0x0800c4f0
 8002a20:	0800c4fc 	.word	0x0800c4fc
 8002a24:	0800c50c 	.word	0x0800c50c
 8002a28:	0800c3b8 	.word	0x0800c3b8

08002a2c <_ZN6Skocko11RefreshOLEDEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::RefreshOLED(void){
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	6078      	str	r0, [r7, #4]
	this->OLED_->PrintSkockoComb(this->currComb_, this->currPos_, OLED::SECOND_ROW, OLED::WITH_UNDERLINE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002a44:	2314      	movs	r3, #20
 8002a46:	73bb      	strb	r3, [r7, #14]
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
 8002a4c:	f107 040e 	add.w	r4, r7, #14
 8002a50:	f107 030f 	add.w	r3, r7, #15
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	4623      	mov	r3, r4
 8002a58:	f7fe fc1a 	bl	8001290 <_ZN4OLED15PrintSkockoCombEPKhRS0_S2_S2_>
	this->OLED_->UpdateScreen();
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe fc7d 	bl	8001360 <_ZN4OLED12UpdateScreenEv>
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd90      	pop	{r4, r7, pc}

08002a6e <_ZN6Skocko11ConfirmCombEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::ConfirmComb(void){
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
	if (this->InputCheck() != this->INPUT_VALID) {
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f961 	bl	8002d3e <_ZN6Skocko10InputCheckEv>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	bf14      	ite	ne
 8002a82:	2301      	movne	r3, #1
 8002a84:	2300      	moveq	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d143      	bne.n	8002b14 <_ZN6Skocko11ConfirmCombEv+0xa6>
		return;
	}

	HAL_TIM_Base_Stop_IT(this->timerOLED_);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f006 fe89 	bl	80097a8 <HAL_TIM_Base_Stop_IT>
	this->currTry_++;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	result res = this->CalculateResult();
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff fe04 	bl	80026b4 <_ZN6Skocko15CalculateResultEv>
 8002aac:	4603      	mov	r3, r0
 8002aae:	81bb      	strh	r3, [r7, #12]
	this->PrintResult(res);
 8002ab0:	f107 030c 	add.w	r3, r7, #12
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff fea2 	bl	8002800 <_ZN6Skocko11PrintResultERKNS_6resultE>
	if((this->currTry_ == this->MAX_TRIES) || (res.correct_ == COMB_SYMBOLS_CNT)){
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d002      	beq.n	8002acc <_ZN6Skocko11ConfirmCombEv+0x5e>
 8002ac6:	7b3b      	ldrb	r3, [r7, #12]
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d106      	bne.n	8002ada <_ZN6Skocko11ConfirmCombEv+0x6c>
		//this->PrintWinComb(OLED::FOURTH_ROW);
		this->EndGame(res);
 8002acc:	f107 030c 	add.w	r3, r7, #12
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f970 	bl	8002db8 <_ZN6Skocko7EndGameERKNS_6resultE>
 8002ad8:	e01d      	b.n	8002b16 <_ZN6Skocko11ConfirmCombEv+0xa8>
	}
	else {
		this->SEV_SEG_->Increment();
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe fde0 	bl	80016a4 <_ZN7SEV_SEG9IncrementEv>
		this->currPos_ = this->POSITION_1;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		this->currComb_[this->POSITION_1] = this->NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		this->currComb_[this->POSITION_2] = this->NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		this->currComb_[this->POSITION_3] = this->NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		this->currComb_[this->POSITION_4] = this->NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		this->state_ = this->ST_WAITING_NEXT_COMB;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2205      	movs	r2, #5
 8002b10:	731a      	strb	r2, [r3, #12]
 8002b12:	e000      	b.n	8002b16 <_ZN6Skocko11ConfirmCombEv+0xa8>
		return;
 8002b14:	bf00      	nop

	}
}
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_ZN6Skocko9ResetGameEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::ResetGame(void){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	/* Start timer for WinningCombinationGeneration */
	HAL_TIM_Base_Start(this->timerWinCombGen_);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f006 fd3d 	bl	80095a8 <HAL_TIM_Base_Start>
	this->currPos_ = this->POSITION_1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	this->winComb_[this->POSITION_1] = this->NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	735a      	strb	r2, [r3, #13]
	this->winComb_[this->POSITION_2] = this->NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	739a      	strb	r2, [r3, #14]
	this->winComb_[this->POSITION_3] = this->NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	73da      	strb	r2, [r3, #15]
	this->winComb_[this->POSITION_4] = this->NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	741a      	strb	r2, [r3, #16]
	this->currComb_[this->POSITION_1] = this->NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	this->currComb_[this->POSITION_2] = this->NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	this->currComb_[this->POSITION_3] = this->NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	this->currComb_[this->POSITION_4] = this->NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	this->currTry_ = 0;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//TODO
	//delete all including winComb, and start timer to be able to generate again new comb on next blue button press
	// and reset all data of class Skocko
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <_ZN6Skocko25ReceivePlayerNameFromUARTEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::ReceivePlayerNameFromUART(void){
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b084      	sub	sp, #16
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
	uint8_t name_i = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
	uint8_t ch[1];
	while(1){
		ch[0] = '!';
 8002b8a:	2321      	movs	r3, #33	; 0x21
 8002b8c:	733b      	strb	r3, [r7, #12]
		HAL_UART_Receive_IT(this->huart_, ch, 1);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f107 010c 	add.w	r1, r7, #12
 8002b96:	2201      	movs	r2, #1
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f007 fb01 	bl	800a1a0 <HAL_UART_Receive_IT>
		while(ch[0] == '!'){}
 8002b9e:	7b3b      	ldrb	r3, [r7, #12]
 8002ba0:	2b21      	cmp	r3, #33	; 0x21
 8002ba2:	d100      	bne.n	8002ba6 <_ZN6Skocko25ReceivePlayerNameFromUARTEv+0x28>
 8002ba4:	e7fb      	b.n	8002b9e <_ZN6Skocko25ReceivePlayerNameFromUARTEv+0x20>
		if(ch[0] == '*'){ break; }
 8002ba6:	7b3b      	ldrb	r3, [r7, #12]
 8002ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8002baa:	d009      	beq.n	8002bc0 <_ZN6Skocko25ReceivePlayerNameFromUARTEv+0x42>
		this->playerName_[name_i] = ch[0];
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	7b39      	ldrb	r1, [r7, #12]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	460a      	mov	r2, r1
 8002bb6:	751a      	strb	r2, [r3, #20]
		name_i++;
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
		ch[0] = '!';
 8002bbe:	e7e4      	b.n	8002b8a <_ZN6Skocko25ReceivePlayerNameFromUARTEv+0xc>
		if(ch[0] == '*'){ break; }
 8002bc0:	bf00      	nop
	}
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <_ZN6Skocko21PrintPlayerNameToUARTEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::PrintPlayerNameToUART(void){
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
	uint8_t name_i = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]
	uint8_t ch[1];
	while(this->playerName_[name_i] != '\0'){
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	4413      	add	r3, r2
 8002bdc:	7d1b      	ldrb	r3, [r3, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d011      	beq.n	8002c06 <_ZN6Skocko21PrintPlayerNameToUARTEv+0x3c>
		ch[0] = this->playerName_[name_i];
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	4413      	add	r3, r2
 8002be8:	7d1b      	ldrb	r3, [r3, #20]
 8002bea:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(this->huart_, ch, 1, 5000);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	f107 010c 	add.w	r1, r7, #12
 8002bf4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f007 fa3d 	bl	800a078 <HAL_UART_Transmit>
		name_i++;
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	3301      	adds	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
	while(this->playerName_[name_i] != '\0'){
 8002c04:	e7e7      	b.n	8002bd6 <_ZN6Skocko21PrintPlayerNameToUARTEv+0xc>
	}
}
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::PrintUART(const string& message){
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b0da      	sub	sp, #360	; 0x168
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002c18:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002c1c:	6018      	str	r0, [r3, #0]
 8002c1e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002c22:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c26:	6019      	str	r1, [r3, #0]

	//char ch;
	uint8_t message_size = message.size();
 8002c28:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002c2c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	f008 fe30 	bl	800b896 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
	uint8_t message_ascci[350];
	for(uint8_t i = 0; i < message_size; i++){
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 8002c42:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 8002c46:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d218      	bcs.n	8002c80 <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x72>
		//ch = message[i];
		//message_ascci[i] = (uint8_t) ch;
		message_ascci[i] = (uint8_t) message[i];
 8002c4e:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 8002c52:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002c56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	f008 fe1c 	bl	800b89a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002c62:	4602      	mov	r2, r0
 8002c64:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8002c68:	7811      	ldrb	r1, [r2, #0]
 8002c6a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8002c6e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002c72:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < message_size; i++){
 8002c74:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 8002c7e:	e7e0      	b.n	8002c42 <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
	}
	HAL_UART_Transmit(this->huart_, message_ascci, message_size, 5000);
 8002c80:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002c84:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	f107 0108 	add.w	r1, r7, #8
 8002c96:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c9a:	f007 f9ed 	bl	800a078 <HAL_UART_Transmit>
}
 8002c9e:	bf00      	nop
 8002ca0:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <_ZN6Skocko9PrintUARTERKh>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::PrintUART(const uint8_t& digit){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]

	uint8_t digit_ascci[1];
	digit_ascci[0] = digit + 48;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	3330      	adds	r3, #48	; 0x30
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(this->huart_, digit_ascci, 1, 5000);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	f107 010c 	add.w	r1, r7, #12
 8002cc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f007 f9d5 	bl	800a078 <HAL_UART_Transmit>

}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <_ZN6Skocko9SetSymbolERKhS1_>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::SetSymbol(const uint8_t& position, const uint8_t& symbol){
 8002cd6:	b480      	push	{r7}
 8002cd8:	b085      	sub	sp, #20
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
	this->currComb_[position] = symbol;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	781a      	ldrb	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	440b      	add	r3, r1
 8002cf0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <_ZN6Skocko18GetCurrentPositionEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
uint8_t Skocko::GetCurrentPosition(void){
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	return this->currPos_;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <_ZN6Skocko9GetSymbolERKh>:
  * @brief
  * @note
  * @param
  * @retval
  */
uint8_t Skocko::GetSymbol(const uint8_t& position){
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
	return this->currComb_[position];
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <_ZN6Skocko10InputCheckEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
uint8_t Skocko::InputCheck(void){
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
	if((this->GetSymbol(this->POSITION_1) != this->NONE) && (this->GetSymbol(this->POSITION_2) != this->NONE) &&
 8002d46:	2300      	movs	r3, #0
 8002d48:	733b      	strb	r3, [r7, #12]
 8002d4a:	f107 030c 	add.w	r3, r7, #12
 8002d4e:	4619      	mov	r1, r3
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff ffe2 	bl	8002d1a <_ZN6Skocko9GetSymbolERKh>
 8002d56:	4603      	mov	r3, r0
			(this->GetSymbol(this->POSITION_3) != this->NONE) && (this->GetSymbol(this->POSITION_4) != this->NONE)){
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d022      	beq.n	8002da2 <_ZN6Skocko10InputCheckEv+0x64>
	if((this->GetSymbol(this->POSITION_1) != this->NONE) && (this->GetSymbol(this->POSITION_2) != this->NONE) &&
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	737b      	strb	r3, [r7, #13]
 8002d60:	f107 030d 	add.w	r3, r7, #13
 8002d64:	4619      	mov	r1, r3
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff ffd7 	bl	8002d1a <_ZN6Skocko9GetSymbolERKh>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d017      	beq.n	8002da2 <_ZN6Skocko10InputCheckEv+0x64>
			(this->GetSymbol(this->POSITION_3) != this->NONE) && (this->GetSymbol(this->POSITION_4) != this->NONE)){
 8002d72:	2302      	movs	r3, #2
 8002d74:	73bb      	strb	r3, [r7, #14]
 8002d76:	f107 030e 	add.w	r3, r7, #14
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ffcc 	bl	8002d1a <_ZN6Skocko9GetSymbolERKh>
 8002d82:	4603      	mov	r3, r0
	if((this->GetSymbol(this->POSITION_1) != this->NONE) && (this->GetSymbol(this->POSITION_2) != this->NONE) &&
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00c      	beq.n	8002da2 <_ZN6Skocko10InputCheckEv+0x64>
			(this->GetSymbol(this->POSITION_3) != this->NONE) && (this->GetSymbol(this->POSITION_4) != this->NONE)){
 8002d88:	2303      	movs	r3, #3
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	f107 030f 	add.w	r3, r7, #15
 8002d90:	4619      	mov	r1, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ffc1 	bl	8002d1a <_ZN6Skocko9GetSymbolERKh>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <_ZN6Skocko10InputCheckEv+0x64>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <_ZN6Skocko10InputCheckEv+0x66>
 8002da2:	2300      	movs	r3, #0
	if((this->GetSymbol(this->POSITION_1) != this->NONE) && (this->GetSymbol(this->POSITION_2) != this->NONE) &&
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <_ZN6Skocko10InputCheckEv+0x6e>

		return this->INPUT_VALID;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <_ZN6Skocko10InputCheckEv+0x70>
	}

	else { return this->INPUT_INVALID; }
 8002dac:	2302      	movs	r3, #2
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <_ZN6Skocko7EndGameERKNS_6resultE>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::EndGame(const result& res){
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	f2ad 4dbc 	subw	sp, sp, #1212	; 0x4bc
 8002dbe:	af02      	add	r7, sp, #8
 8002dc0:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002dc4:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8002dc8:	6018      	str	r0, [r3, #0]
 8002dca:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002dce:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8002dd2:	6019      	str	r1, [r3, #0]
	this->state_ = this->ST_GAME_END;
 8002dd4:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002dd8:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2206      	movs	r2, #6
 8002de0:	731a      	strb	r2, [r3, #12]

	if(res.correct_ == COMB_SYMBOLS_CNT){
 8002de2:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002de6:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	f040 8378 	bne.w	80034e4 <_ZN6Skocko7EndGameERKNS_6resultE+0x72c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8002df4:	2201      	movs	r2, #1
 8002df6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dfa:	48ef      	ldr	r0, [pc, #956]	; (80031b8 <_ZN6Skocko7EndGameERKNS_6resultE+0x400>)
 8002dfc:	f004 faf0 	bl	80073e0 <HAL_GPIO_WritePin>
		this->PrintUART("*    --------------------------------------------------------------------------------    *\n");
 8002e00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e04:	4618      	mov	r0, r3
 8002e06:	f008 fc76 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8002e0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e0e:	f107 0318 	add.w	r3, r7, #24
 8002e12:	49ea      	ldr	r1, [pc, #936]	; (80031bc <_ZN6Skocko7EndGameERKNS_6resultE+0x404>)
 8002e14:	4618      	mov	r0, r3
 8002e16:	f008 fde5 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002e1a:	f107 0218 	add.w	r2, r7, #24
 8002e1e:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002e22:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8002e26:	4611      	mov	r1, r2
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	f7ff fef0 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002e2e:	f107 0318 	add.w	r3, r7, #24
 8002e32:	4618      	mov	r0, r3
 8002e34:	f008 fd29 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002e38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f008 fc5b 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*                                                                                        *\n");
 8002e42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e46:	4618      	mov	r0, r3
 8002e48:	f008 fc55 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8002e4c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002e50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e54:	49da      	ldr	r1, [pc, #872]	; (80031c0 <_ZN6Skocko7EndGameERKNS_6resultE+0x408>)
 8002e56:	4618      	mov	r0, r3
 8002e58:	f008 fdc4 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002e5c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002e60:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002e64:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8002e68:	4611      	mov	r1, r2
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	f7ff fecf 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002e70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e74:	4618      	mov	r0, r3
 8002e76:	f008 fd08 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002e7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f008 fc3a 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*                                                                                        *\n");
 8002e84:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f008 fc34 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8002e8e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002e92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e96:	49ca      	ldr	r1, [pc, #808]	; (80031c0 <_ZN6Skocko7EndGameERKNS_6resultE+0x408>)
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f008 fda3 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002e9e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ea2:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002ea6:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8002eaa:	4611      	mov	r1, r2
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	f7ff feae 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002eb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f008 fce7 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002ebc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f008 fc19 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    |------------------------------------------------------------------------------|    *\n");
 8002ec6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f008 fc13 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8002ed0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002ed4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ed8:	49ba      	ldr	r1, [pc, #744]	; (80031c4 <_ZN6Skocko7EndGameERKNS_6resultE+0x40c>)
 8002eda:	4618      	mov	r0, r3
 8002edc:	f008 fd82 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002ee0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002ee4:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002ee8:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8002eec:	4611      	mov	r1, r2
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	f7ff fe8d 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002ef4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f008 fcc6 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002efe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002f02:	4618      	mov	r0, r3
 8002f04:	f008 fbf8 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    ||----------------------------------------------------------------------------||    *\n");
 8002f08:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f008 fbf2 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8002f12:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002f16:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002f1a:	49ab      	ldr	r1, [pc, #684]	; (80031c8 <_ZN6Skocko7EndGameERKNS_6resultE+0x410>)
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f008 fd61 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002f22:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f26:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002f2a:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8002f2e:	4611      	mov	r1, r2
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	f7ff fe6c 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002f36:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f008 fca5 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002f40:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f008 fbd7 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    ||                         Dobitna kombinacija je:                            ||    *\n");
 8002f4a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f008 fbd1 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8002f54:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8002f58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f5c:	499b      	ldr	r1, [pc, #620]	; (80031cc <_ZN6Skocko7EndGameERKNS_6resultE+0x414>)
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f008 fd40 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002f64:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f68:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002f6c:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8002f70:	4611      	mov	r1, r2
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	f7ff fe4b 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002f78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f008 fc84 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002f82:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f86:	4618      	mov	r0, r3
 8002f88:	f008 fbb6 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    ||----------------------------------------------------------------------------||    *\n");
 8002f8c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002f90:	4618      	mov	r0, r3
 8002f92:	f008 fbb0 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8002f96:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8002f9a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f9e:	498a      	ldr	r1, [pc, #552]	; (80031c8 <_ZN6Skocko7EndGameERKNS_6resultE+0x410>)
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f008 fd1f 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002fa6:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002faa:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002fae:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	f7ff fe2a 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002fba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f008 fc63 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002fc4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f008 fb95 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    |                                                                              |    *\n");
 8002fce:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f008 fb8f 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8002fd8:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8002fdc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002fe0:	497b      	ldr	r1, [pc, #492]	; (80031d0 <_ZN6Skocko7EndGameERKNS_6resultE+0x418>)
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f008 fcfe 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002fe8:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8002fec:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002ff0:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	f7ff fe09 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002ffc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003000:	4618      	mov	r0, r3
 8003002:	f008 fc42 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003006:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800300a:	4618      	mov	r0, r3
 800300c:	f008 fb74 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    ||----------------------------------------------------------------------------||    *\n");
 8003010:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003014:	4618      	mov	r0, r3
 8003016:	f008 fb6e 	bl	800b6f6 <_ZNSaIcEC1Ev>
 800301a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800301e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003022:	4969      	ldr	r1, [pc, #420]	; (80031c8 <_ZN6Skocko7EndGameERKNS_6resultE+0x410>)
 8003024:	4618      	mov	r0, r3
 8003026:	f008 fcdd 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800302a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800302e:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003032:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003036:	4611      	mov	r1, r2
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	f7ff fde8 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800303e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003042:	4618      	mov	r0, r3
 8003044:	f008 fc21 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003048:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800304c:	4618      	mov	r0, r3
 800304e:	f008 fb53 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    ||"); this->PrintCombToUART(this->winComb_); this->PrintUART("||      4       |       0       ||    *\n");
 8003052:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003056:	4618      	mov	r0, r3
 8003058:	f008 fb4d 	bl	800b6f6 <_ZNSaIcEC1Ev>
 800305c:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8003060:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003064:	495b      	ldr	r1, [pc, #364]	; (80031d4 <_ZN6Skocko7EndGameERKNS_6resultE+0x41c>)
 8003066:	4618      	mov	r0, r3
 8003068:	f008 fcbc 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800306c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8003070:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003074:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003078:	4611      	mov	r1, r2
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	f7ff fdc7 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003080:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003084:	4618      	mov	r0, r3
 8003086:	f008 fc00 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800308a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800308e:	4618      	mov	r0, r3
 8003090:	f008 fb32 	bl	800b6f8 <_ZNSaIcED1Ev>
 8003094:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003098:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f103 020d 	add.w	r2, r3, #13
 80030a2:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80030a6:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80030aa:	4611      	mov	r1, r2
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	f000 fd8d 	bl	8003bcc <_ZN6Skocko15PrintCombToUARTEPKh>
 80030b2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80030b6:	4618      	mov	r0, r3
 80030b8:	f008 fb1d 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80030bc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80030c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030c4:	4944      	ldr	r1, [pc, #272]	; (80031d8 <_ZN6Skocko7EndGameERKNS_6resultE+0x420>)
 80030c6:	4618      	mov	r0, r3
 80030c8:	f008 fc8c 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80030cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80030d0:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80030d4:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80030d8:	4611      	mov	r1, r2
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	f7ff fd97 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80030e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030e4:	4618      	mov	r0, r3
 80030e6:	f008 fbd0 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80030ea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80030ee:	4618      	mov	r0, r3
 80030f0:	f008 fb02 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    ||----------------------------------------------------------------------------||    *\n");
 80030f4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80030f8:	4618      	mov	r0, r3
 80030fa:	f008 fafc 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80030fe:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8003102:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8003106:	4930      	ldr	r1, [pc, #192]	; (80031c8 <_ZN6Skocko7EndGameERKNS_6resultE+0x410>)
 8003108:	4618      	mov	r0, r3
 800310a:	f008 fc6b 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800310e:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8003112:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003116:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800311a:	4611      	mov	r1, r2
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	f7ff fd76 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003122:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8003126:	4618      	mov	r0, r3
 8003128:	f008 fbaf 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800312c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8003130:	4618      	mov	r0, r3
 8003132:	f008 fae1 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    |------------------------------------------------------------------------------|    *\n");
 8003136:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800313a:	4618      	mov	r0, r3
 800313c:	f008 fadb 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003140:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8003144:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003148:	491e      	ldr	r1, [pc, #120]	; (80031c4 <_ZN6Skocko7EndGameERKNS_6resultE+0x40c>)
 800314a:	4618      	mov	r0, r3
 800314c:	f008 fc4a 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003150:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8003154:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003158:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800315c:	4611      	mov	r1, r2
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	f7ff fd55 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003164:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003168:	4618      	mov	r0, r3
 800316a:	f008 fb8e 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800316e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003172:	4618      	mov	r0, r3
 8003174:	f008 fac0 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*                                                                                        *\n");
 8003178:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800317c:	4618      	mov	r0, r3
 800317e:	f008 faba 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003182:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8003186:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800318a:	490d      	ldr	r1, [pc, #52]	; (80031c0 <_ZN6Skocko7EndGameERKNS_6resultE+0x408>)
 800318c:	4618      	mov	r0, r3
 800318e:	f008 fc29 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003192:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8003196:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800319a:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800319e:	4611      	mov	r1, r2
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	f7ff fd34 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80031a6:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80031aa:	4618      	mov	r0, r3
 80031ac:	f008 fb6d 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80031b0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80031b4:	e012      	b.n	80031dc <_ZN6Skocko7EndGameERKNS_6resultE+0x424>
 80031b6:	bf00      	nop
 80031b8:	48000400 	.word	0x48000400
 80031bc:	0800c51c 	.word	0x0800c51c
 80031c0:	0800c300 	.word	0x0800c300
 80031c4:	0800c35c 	.word	0x0800c35c
 80031c8:	0800c3b8 	.word	0x0800c3b8
 80031cc:	0800c578 	.word	0x0800c578
 80031d0:	0800c470 	.word	0x0800c470
 80031d4:	0800c4e8 	.word	0x0800c4e8
 80031d8:	0800c5d4 	.word	0x0800c5d4
 80031dc:	4618      	mov	r0, r3
 80031de:	f008 fa8b 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*                                                                                        *\n");
 80031e2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80031e6:	4618      	mov	r0, r3
 80031e8:	f008 fa85 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80031ec:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 80031f0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80031f4:	49b2      	ldr	r1, [pc, #712]	; (80034c0 <_ZN6Skocko7EndGameERKNS_6resultE+0x708>)
 80031f6:	4618      	mov	r0, r3
 80031f8:	f008 fbf4 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80031fc:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003200:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003204:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003208:	4611      	mov	r1, r2
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	f7ff fcff 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003210:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003214:	4618      	mov	r0, r3
 8003216:	f008 fb38 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800321a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800321e:	4618      	mov	r0, r3
 8003220:	f008 fa6a 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("******************************************************************************************\n\n");
 8003224:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8003228:	4618      	mov	r0, r3
 800322a:	f008 fa64 	bl	800b6f6 <_ZNSaIcEC1Ev>
 800322e:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 8003232:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8003236:	49a3      	ldr	r1, [pc, #652]	; (80034c4 <_ZN6Skocko7EndGameERKNS_6resultE+0x70c>)
 8003238:	4618      	mov	r0, r3
 800323a:	f008 fbd3 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800323e:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8003242:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003246:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800324a:	4611      	mov	r1, r2
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	f7ff fcde 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003252:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8003256:	4618      	mov	r0, r3
 8003258:	f008 fb17 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800325c:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8003260:	4618      	mov	r0, r3
 8003262:	f008 fa49 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("Pogodili ste!!!\n");
 8003266:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800326a:	4618      	mov	r0, r3
 800326c:	f008 fa43 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003270:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8003274:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8003278:	4993      	ldr	r1, [pc, #588]	; (80034c8 <_ZN6Skocko7EndGameERKNS_6resultE+0x710>)
 800327a:	4618      	mov	r0, r3
 800327c:	f008 fbb2 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003280:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8003284:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003288:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800328c:	4611      	mov	r1, r2
 800328e:	6818      	ldr	r0, [r3, #0]
 8003290:	f7ff fcbd 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003294:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8003298:	4618      	mov	r0, r3
 800329a:	f008 faf6 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800329e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f008 fa28 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("\nIgrac: ");
 80032a8:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80032ac:	4618      	mov	r0, r3
 80032ae:	f008 fa22 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80032b2:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 80032b6:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80032ba:	4984      	ldr	r1, [pc, #528]	; (80034cc <_ZN6Skocko7EndGameERKNS_6resultE+0x714>)
 80032bc:	4618      	mov	r0, r3
 80032be:	f008 fb91 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80032c2:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 80032c6:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80032ca:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80032ce:	4611      	mov	r1, r2
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	f7ff fc9c 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80032d6:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80032da:	4618      	mov	r0, r3
 80032dc:	f008 fad5 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80032e0:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80032e4:	4618      	mov	r0, r3
 80032e6:	f008 fa07 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintPlayerNameToUART();
 80032ea:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80032ee:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	f7ff fc69 	bl	8002bca <_ZN6Skocko21PrintPlayerNameToUARTEv>
		this->PrintUART("\nAko zelite ponovo da igrate, pritisnite bilo koji taster.\n");
 80032f8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80032fc:	4618      	mov	r0, r3
 80032fe:	f008 f9fa 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003302:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8003306:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800330a:	4971      	ldr	r1, [pc, #452]	; (80034d0 <_ZN6Skocko7EndGameERKNS_6resultE+0x718>)
 800330c:	4618      	mov	r0, r3
 800330e:	f008 fb69 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003312:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8003316:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800331a:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800331e:	4611      	mov	r1, r2
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	f7ff fc74 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003326:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800332a:	4618      	mov	r0, r3
 800332c:	f008 faad 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003330:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003334:	4618      	mov	r0, r3
 8003336:	f008 f9df 	bl	800b6f8 <_ZNSaIcED1Ev>

		/* OLED */
		this->OLED_->Clear();
 800333a:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800333e:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003346:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800334a:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4610      	mov	r0, r2
 8003358:	4798      	blx	r3
		disp_pos_t text1_pos = {.x_ = OLED::FIRST_COL, .y_ = OLED::FIRST_COL};
 800335a:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800335e:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8003362:	4a5c      	ldr	r2, [pc, #368]	; (80034d4 <_ZN6Skocko7EndGameERKNS_6resultE+0x71c>)
 8003364:	8812      	ldrh	r2, [r2, #0]
 8003366:	801a      	strh	r2, [r3, #0]
		this->OLED_->PrintString("Pogodili ste!!!", text1_pos);
 8003368:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800336c:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003374:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003378:	4618      	mov	r0, r3
 800337a:	f008 f9bc 	bl	800b6f6 <_ZNSaIcEC1Ev>
 800337e:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8003382:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8003386:	4954      	ldr	r1, [pc, #336]	; (80034d8 <_ZN6Skocko7EndGameERKNS_6resultE+0x720>)
 8003388:	4618      	mov	r0, r3
 800338a:	f008 fb2b 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800338e:	f107 0214 	add.w	r2, r7, #20
 8003392:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8003396:	4619      	mov	r1, r3
 8003398:	4620      	mov	r0, r4
 800339a:	f7fd ff4b 	bl	8001234 <_ZN4OLED11PrintStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8disp_pos>
 800339e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80033a2:	4618      	mov	r0, r3
 80033a4:	f008 fa71 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80033a8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80033ac:	4618      	mov	r0, r3
 80033ae:	f008 f9a3 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->OLED_->PrintSkockoComb(this->currComb_, this->currPos_, OLED::SECOND_ROW, OLED::NO_UNDERLINE);
 80033b2:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80033b6:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80033be:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80033c2:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f103 0129 	add.w	r1, r3, #41	; 0x29
 80033cc:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80033d0:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80033da:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80033de:	f2a3 236a 	subw	r3, r3, #618	; 0x26a
 80033e2:	2414      	movs	r4, #20
 80033e4:	701c      	strb	r4, [r3, #0]
 80033e6:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80033ea:	f2a3 2369 	subw	r3, r3, #617	; 0x269
 80033ee:	2400      	movs	r4, #0
 80033f0:	701c      	strb	r4, [r3, #0]
 80033f2:	f207 2446 	addw	r4, r7, #582	; 0x246
 80033f6:	f207 2347 	addw	r3, r7, #583	; 0x247
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	4623      	mov	r3, r4
 80033fe:	f7fd ff47 	bl	8001290 <_ZN4OLED15PrintSkockoCombEPKhRS0_S2_S2_>
		disp_pos_t text2_pos = {.x_ = OLED::FIRST_COL, .y_ = OLED::THIRD_ROW};
 8003402:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003406:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 800340a:	4a34      	ldr	r2, [pc, #208]	; (80034dc <_ZN6Skocko7EndGameERKNS_6resultE+0x724>)
 800340c:	8812      	ldrh	r2, [r2, #0]
 800340e:	801a      	strh	r2, [r3, #0]
		this->OLED_->PrintString("Dobitna komb:", text2_pos);
 8003410:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003414:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800341c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003420:	4618      	mov	r0, r3
 8003422:	f008 f968 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003426:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800342a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800342e:	492c      	ldr	r1, [pc, #176]	; (80034e0 <_ZN6Skocko7EndGameERKNS_6resultE+0x728>)
 8003430:	4618      	mov	r0, r3
 8003432:	f008 fad7 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003436:	f107 0210 	add.w	r2, r7, #16
 800343a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800343e:	4619      	mov	r1, r3
 8003440:	4620      	mov	r0, r4
 8003442:	f7fd fef7 	bl	8001234 <_ZN4OLED11PrintStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8disp_pos>
 8003446:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800344a:	4618      	mov	r0, r3
 800344c:	f008 fa1d 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003450:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003454:	4618      	mov	r0, r3
 8003456:	f008 f94f 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->OLED_->PrintSkockoComb(this->winComb_, this->currPos_, OLED::FOURTH_ROW, OLED::NO_UNDERLINE);
 800345a:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800345e:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003466:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800346a:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f103 010d 	add.w	r1, r3, #13
 8003474:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003478:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003482:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003486:	f2a3 234e 	subw	r3, r3, #590	; 0x24e
 800348a:	2432      	movs	r4, #50	; 0x32
 800348c:	701c      	strb	r4, [r3, #0]
 800348e:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003492:	f2a3 234d 	subw	r3, r3, #589	; 0x24d
 8003496:	2400      	movs	r4, #0
 8003498:	701c      	strb	r4, [r3, #0]
 800349a:	f207 2462 	addw	r4, r7, #610	; 0x262
 800349e:	f207 2363 	addw	r3, r7, #611	; 0x263
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	4623      	mov	r3, r4
 80034a6:	f7fd fef3 	bl	8001290 <_ZN4OLED15PrintSkockoCombEPKhRS0_S2_S2_>
		this->OLED_->UpdateScreen();
 80034aa:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80034ae:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd ff52 	bl	8001360 <_ZN4OLED12UpdateScreenEv>
 80034bc:	e368      	b.n	8003b90 <_ZN6Skocko7EndGameERKNS_6resultE+0xdd8>
 80034be:	bf00      	nop
 80034c0:	0800c300 	.word	0x0800c300
 80034c4:	0800c600 	.word	0x0800c600
 80034c8:	0800c660 	.word	0x0800c660
 80034cc:	0800c674 	.word	0x0800c674
 80034d0:	0800c680 	.word	0x0800c680
 80034d4:	0800be60 	.word	0x0800be60
 80034d8:	0800c6bc 	.word	0x0800c6bc
 80034dc:	0800be68 	.word	0x0800be68
 80034e0:	0800c6cc 	.word	0x0800c6cc
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80034e4:	2201      	movs	r2, #1
 80034e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ee:	f003 ff77 	bl	80073e0 <HAL_GPIO_WritePin>
		this->PrintUART("*    --------------------------------------------------------------------------------    *\n");
 80034f2:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80034f6:	4618      	mov	r0, r3
 80034f8:	f008 f8fd 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80034fc:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8003500:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8003504:	49ee      	ldr	r1, [pc, #952]	; (80038c0 <_ZN6Skocko7EndGameERKNS_6resultE+0xb08>)
 8003506:	4618      	mov	r0, r3
 8003508:	f008 fa6c 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800350c:	f507 7219 	add.w	r2, r7, #612	; 0x264
 8003510:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003514:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003518:	4611      	mov	r1, r2
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	f7ff fb77 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003520:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8003524:	4618      	mov	r0, r3
 8003526:	f008 f9b0 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800352a:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800352e:	4618      	mov	r0, r3
 8003530:	f008 f8e2 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*                                                                                        *\n");
 8003534:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003538:	4618      	mov	r0, r3
 800353a:	f008 f8dc 	bl	800b6f6 <_ZNSaIcEC1Ev>
 800353e:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8003542:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8003546:	49df      	ldr	r1, [pc, #892]	; (80038c4 <_ZN6Skocko7EndGameERKNS_6resultE+0xb0c>)
 8003548:	4618      	mov	r0, r3
 800354a:	f008 fa4b 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800354e:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8003552:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003556:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800355a:	4611      	mov	r1, r2
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	f7ff fb56 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003562:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8003566:	4618      	mov	r0, r3
 8003568:	f008 f98f 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800356c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003570:	4618      	mov	r0, r3
 8003572:	f008 f8c1 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*                                                                                        *\n");
 8003576:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800357a:	4618      	mov	r0, r3
 800357c:	f008 f8bb 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003580:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 8003584:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8003588:	49ce      	ldr	r1, [pc, #824]	; (80038c4 <_ZN6Skocko7EndGameERKNS_6resultE+0xb0c>)
 800358a:	4618      	mov	r0, r3
 800358c:	f008 fa2a 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003590:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 8003594:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003598:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800359c:	4611      	mov	r1, r2
 800359e:	6818      	ldr	r0, [r3, #0]
 80035a0:	f7ff fb35 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80035a4:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80035a8:	4618      	mov	r0, r3
 80035aa:	f008 f96e 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80035ae:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80035b2:	4618      	mov	r0, r3
 80035b4:	f008 f8a0 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    |------------------------------------------------------------------------------|    *\n");
 80035b8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80035bc:	4618      	mov	r0, r3
 80035be:	f008 f89a 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80035c2:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80035c6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80035ca:	49bf      	ldr	r1, [pc, #764]	; (80038c8 <_ZN6Skocko7EndGameERKNS_6resultE+0xb10>)
 80035cc:	4618      	mov	r0, r3
 80035ce:	f008 fa09 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80035d2:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80035d6:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80035da:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80035de:	4611      	mov	r1, r2
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	f7ff fb14 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80035e6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80035ea:	4618      	mov	r0, r3
 80035ec:	f008 f94d 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80035f0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f008 f87f 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    ||----------------------------------------------------------------------------||    *\n");
 80035fa:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80035fe:	4618      	mov	r0, r3
 8003600:	f008 f879 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003604:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 8003608:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800360c:	49af      	ldr	r1, [pc, #700]	; (80038cc <_ZN6Skocko7EndGameERKNS_6resultE+0xb14>)
 800360e:	4618      	mov	r0, r3
 8003610:	f008 f9e8 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003614:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8003618:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800361c:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003620:	4611      	mov	r1, r2
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	f7ff faf3 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003628:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800362c:	4618      	mov	r0, r3
 800362e:	f008 f92c 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003632:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8003636:	4618      	mov	r0, r3
 8003638:	f008 f85e 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    ||                         Dobitna kombinacija je:                            ||    *\n");
 800363c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003640:	4618      	mov	r0, r3
 8003642:	f008 f858 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003646:	f507 7242 	add.w	r2, r7, #776	; 0x308
 800364a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800364e:	49a0      	ldr	r1, [pc, #640]	; (80038d0 <_ZN6Skocko7EndGameERKNS_6resultE+0xb18>)
 8003650:	4618      	mov	r0, r3
 8003652:	f008 f9c7 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003656:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 800365a:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800365e:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003662:	4611      	mov	r1, r2
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	f7ff fad2 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800366a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800366e:	4618      	mov	r0, r3
 8003670:	f008 f90b 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003674:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003678:	4618      	mov	r0, r3
 800367a:	f008 f83d 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    ||----------------------------------------------------------------------------||    *\n");
 800367e:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8003682:	4618      	mov	r0, r3
 8003684:	f008 f837 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003688:	f507 7249 	add.w	r2, r7, #804	; 0x324
 800368c:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8003690:	498e      	ldr	r1, [pc, #568]	; (80038cc <_ZN6Skocko7EndGameERKNS_6resultE+0xb14>)
 8003692:	4618      	mov	r0, r3
 8003694:	f008 f9a6 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003698:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 800369c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80036a0:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80036a4:	4611      	mov	r1, r2
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	f7ff fab1 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80036ac:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80036b0:	4618      	mov	r0, r3
 80036b2:	f008 f8ea 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80036b6:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80036ba:	4618      	mov	r0, r3
 80036bc:	f008 f81c 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    |                                                                              |    *\n");
 80036c0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80036c4:	4618      	mov	r0, r3
 80036c6:	f008 f816 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80036ca:	f507 7250 	add.w	r2, r7, #832	; 0x340
 80036ce:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80036d2:	4980      	ldr	r1, [pc, #512]	; (80038d4 <_ZN6Skocko7EndGameERKNS_6resultE+0xb1c>)
 80036d4:	4618      	mov	r0, r3
 80036d6:	f008 f985 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80036da:	f507 724a 	add.w	r2, r7, #808	; 0x328
 80036de:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80036e2:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80036e6:	4611      	mov	r1, r2
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	f7ff fa90 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80036ee:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80036f2:	4618      	mov	r0, r3
 80036f4:	f008 f8c9 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80036f8:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80036fc:	4618      	mov	r0, r3
 80036fe:	f007 fffb 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    ||----------------------------------------------------------------------------||    *\n");
 8003702:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8003706:	4618      	mov	r0, r3
 8003708:	f007 fff5 	bl	800b6f6 <_ZNSaIcEC1Ev>
 800370c:	f507 7257 	add.w	r2, r7, #860	; 0x35c
 8003710:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8003714:	496d      	ldr	r1, [pc, #436]	; (80038cc <_ZN6Skocko7EndGameERKNS_6resultE+0xb14>)
 8003716:	4618      	mov	r0, r3
 8003718:	f008 f964 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800371c:	f507 7251 	add.w	r2, r7, #836	; 0x344
 8003720:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003724:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003728:	4611      	mov	r1, r2
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	f7ff fa6f 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003730:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8003734:	4618      	mov	r0, r3
 8003736:	f008 f8a8 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800373a:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800373e:	4618      	mov	r0, r3
 8003740:	f007 ffda 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    ||"); this->PrintCombToUART(this->winComb_); this->PrintUART("||      4       |       0       ||    *\n");
 8003744:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8003748:	4618      	mov	r0, r3
 800374a:	f007 ffd4 	bl	800b6f6 <_ZNSaIcEC1Ev>
 800374e:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8003752:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8003756:	4960      	ldr	r1, [pc, #384]	; (80038d8 <_ZN6Skocko7EndGameERKNS_6resultE+0xb20>)
 8003758:	4618      	mov	r0, r3
 800375a:	f008 f943 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800375e:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8003762:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003766:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800376a:	4611      	mov	r1, r2
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	f7ff fa4e 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003772:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8003776:	4618      	mov	r0, r3
 8003778:	f008 f887 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800377c:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8003780:	4618      	mov	r0, r3
 8003782:	f007 ffb9 	bl	800b6f8 <_ZNSaIcED1Ev>
 8003786:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800378a:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f103 020d 	add.w	r2, r3, #13
 8003794:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003798:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800379c:	4611      	mov	r1, r2
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	f000 fa14 	bl	8003bcc <_ZN6Skocko15PrintCombToUARTEPKh>
 80037a4:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80037a8:	4618      	mov	r0, r3
 80037aa:	f007 ffa4 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80037ae:	f507 7265 	add.w	r2, r7, #916	; 0x394
 80037b2:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80037b6:	4949      	ldr	r1, [pc, #292]	; (80038dc <_ZN6Skocko7EndGameERKNS_6resultE+0xb24>)
 80037b8:	4618      	mov	r0, r3
 80037ba:	f008 f913 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80037be:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 80037c2:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80037c6:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80037ca:	4611      	mov	r1, r2
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	f7ff fa1e 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80037d2:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80037d6:	4618      	mov	r0, r3
 80037d8:	f008 f857 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80037dc:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80037e0:	4618      	mov	r0, r3
 80037e2:	f007 ff89 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    ||----------------------------------------------------------------------------||    *\n");
 80037e6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f007 ff83 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80037f0:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 80037f4:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80037f8:	4934      	ldr	r1, [pc, #208]	; (80038cc <_ZN6Skocko7EndGameERKNS_6resultE+0xb14>)
 80037fa:	4618      	mov	r0, r3
 80037fc:	f008 f8f2 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003800:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8003804:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003808:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800380c:	4611      	mov	r1, r2
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	f7ff f9fd 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003814:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003818:	4618      	mov	r0, r3
 800381a:	f008 f836 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800381e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003822:	4618      	mov	r0, r3
 8003824:	f007 ff68 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*    |------------------------------------------------------------------------------|    *\n");
 8003828:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 800382c:	4618      	mov	r0, r3
 800382e:	f007 ff62 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003832:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 8003836:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800383a:	4923      	ldr	r1, [pc, #140]	; (80038c8 <_ZN6Skocko7EndGameERKNS_6resultE+0xb10>)
 800383c:	4618      	mov	r0, r3
 800383e:	f008 f8d1 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003842:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 8003846:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800384a:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800384e:	4611      	mov	r1, r2
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	f7ff f9dc 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003856:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800385a:	4618      	mov	r0, r3
 800385c:	f008 f815 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003860:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8003864:	4618      	mov	r0, r3
 8003866:	f007 ff47 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*                                                                                        *\n");
 800386a:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800386e:	4618      	mov	r0, r3
 8003870:	f007 ff41 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003874:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8003878:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800387c:	4911      	ldr	r1, [pc, #68]	; (80038c4 <_ZN6Skocko7EndGameERKNS_6resultE+0xb0c>)
 800387e:	4618      	mov	r0, r3
 8003880:	f008 f8b0 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003884:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8003888:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800388c:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003890:	4611      	mov	r1, r2
 8003892:	6818      	ldr	r0, [r3, #0]
 8003894:	f7ff f9bb 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003898:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800389c:	4618      	mov	r0, r3
 800389e:	f007 fff4 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80038a2:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80038a6:	4618      	mov	r0, r3
 80038a8:	f007 ff26 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("*                                                                                        *\n");
 80038ac:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80038b0:	4618      	mov	r0, r3
 80038b2:	f007 ff20 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80038b6:	f207 4204 	addw	r2, r7, #1028	; 0x404
 80038ba:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80038be:	e00f      	b.n	80038e0 <_ZN6Skocko7EndGameERKNS_6resultE+0xb28>
 80038c0:	0800c51c 	.word	0x0800c51c
 80038c4:	0800c300 	.word	0x0800c300
 80038c8:	0800c35c 	.word	0x0800c35c
 80038cc:	0800c3b8 	.word	0x0800c3b8
 80038d0:	0800c578 	.word	0x0800c578
 80038d4:	0800c470 	.word	0x0800c470
 80038d8:	0800c4e8 	.word	0x0800c4e8
 80038dc:	0800c5d4 	.word	0x0800c5d4
 80038e0:	49b1      	ldr	r1, [pc, #708]	; (8003ba8 <_ZN6Skocko7EndGameERKNS_6resultE+0xdf0>)
 80038e2:	4618      	mov	r0, r3
 80038e4:	f008 f87e 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80038e8:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 80038ec:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80038f0:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80038f4:	4611      	mov	r1, r2
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	f7ff f989 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80038fc:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8003900:	4618      	mov	r0, r3
 8003902:	f007 ffc2 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003906:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800390a:	4618      	mov	r0, r3
 800390c:	f007 fef4 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("******************************************************************************************\n\n");
 8003910:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003914:	4618      	mov	r0, r3
 8003916:	f007 feee 	bl	800b6f6 <_ZNSaIcEC1Ev>
 800391a:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 800391e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8003922:	49a2      	ldr	r1, [pc, #648]	; (8003bac <_ZN6Skocko7EndGameERKNS_6resultE+0xdf4>)
 8003924:	4618      	mov	r0, r3
 8003926:	f008 f85d 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800392a:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800392e:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003932:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003936:	4611      	mov	r1, r2
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	f7ff f968 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800393e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8003942:	4618      	mov	r0, r3
 8003944:	f007 ffa1 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003948:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800394c:	4618      	mov	r0, r3
 800394e:	f007 fed3 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("Nazalost niste pogodili.\n");
 8003952:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8003956:	4618      	mov	r0, r3
 8003958:	f007 fecd 	bl	800b6f6 <_ZNSaIcEC1Ev>
 800395c:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8003960:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8003964:	4992      	ldr	r1, [pc, #584]	; (8003bb0 <_ZN6Skocko7EndGameERKNS_6resultE+0xdf8>)
 8003966:	4618      	mov	r0, r3
 8003968:	f008 f83c 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800396c:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8003970:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003974:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003978:	4611      	mov	r1, r2
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	f7ff f947 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003980:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8003984:	4618      	mov	r0, r3
 8003986:	f007 ff80 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800398a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800398e:	4618      	mov	r0, r3
 8003990:	f007 feb2 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintUART("\nIgrac: ");
 8003994:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8003998:	4618      	mov	r0, r3
 800399a:	f007 feac 	bl	800b6f6 <_ZNSaIcEC1Ev>
 800399e:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 80039a2:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80039a6:	4983      	ldr	r1, [pc, #524]	; (8003bb4 <_ZN6Skocko7EndGameERKNS_6resultE+0xdfc>)
 80039a8:	4618      	mov	r0, r3
 80039aa:	f008 f81b 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80039ae:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 80039b2:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80039b6:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80039ba:	4611      	mov	r1, r2
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	f7ff f926 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80039c2:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80039c6:	4618      	mov	r0, r3
 80039c8:	f007 ff5f 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80039cc:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80039d0:	4618      	mov	r0, r3
 80039d2:	f007 fe91 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->PrintPlayerNameToUART();
 80039d6:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80039da:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	f7ff f8f3 	bl	8002bca <_ZN6Skocko21PrintPlayerNameToUARTEv>
		this->PrintUART("\nAko zelite ponovo da igrate, pritisnite bilo koji taster.\n");
 80039e4:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80039e8:	4618      	mov	r0, r3
 80039ea:	f007 fe84 	bl	800b6f6 <_ZNSaIcEC1Ev>
 80039ee:	f207 4274 	addw	r2, r7, #1140	; 0x474
 80039f2:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80039f6:	4970      	ldr	r1, [pc, #448]	; (8003bb8 <_ZN6Skocko7EndGameERKNS_6resultE+0xe00>)
 80039f8:	4618      	mov	r0, r3
 80039fa:	f007 fff3 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80039fe:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8003a02:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003a06:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	f7ff f8fe 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003a12:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8003a16:	4618      	mov	r0, r3
 8003a18:	f007 ff37 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003a1c:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8003a20:	4618      	mov	r0, r3
 8003a22:	f007 fe69 	bl	800b6f8 <_ZNSaIcED1Ev>

		/* OLED */
		this->OLED_->Clear();
 8003a26:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003a2a:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a32:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003a36:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4610      	mov	r0, r2
 8003a44:	4798      	blx	r3
		disp_pos_t text1_pos = {.x_ = OLED::FIRST_COL, .y_ = OLED::FIRST_COL};
 8003a46:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003a4a:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8003a4e:	4a5b      	ldr	r2, [pc, #364]	; (8003bbc <_ZN6Skocko7EndGameERKNS_6resultE+0xe04>)
 8003a50:	8812      	ldrh	r2, [r2, #0]
 8003a52:	801a      	strh	r2, [r3, #0]
		this->OLED_->PrintString("Probajte ponovo?", text1_pos);
 8003a54:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003a58:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003a60:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003a64:	4618      	mov	r0, r3
 8003a66:	f007 fe46 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003a6a:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8003a6e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003a72:	4953      	ldr	r1, [pc, #332]	; (8003bc0 <_ZN6Skocko7EndGameERKNS_6resultE+0xe08>)
 8003a74:	4618      	mov	r0, r3
 8003a76:	f007 ffb5 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003a7a:	f107 020c 	add.w	r2, r7, #12
 8003a7e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003a82:	4619      	mov	r1, r3
 8003a84:	4620      	mov	r0, r4
 8003a86:	f7fd fbd5 	bl	8001234 <_ZN4OLED11PrintStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8disp_pos>
 8003a8a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f007 fefb 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003a94:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f007 fe2d 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->OLED_->PrintSkockoComb(this->currComb_, this->currPos_, OLED::SECOND_ROW, OLED::NO_UNDERLINE);
 8003a9e:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003aa2:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003aaa:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003aae:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8003ab8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003abc:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003ac6:	2314      	movs	r3, #20
 8003ac8:	f887 3492 	strb.w	r3, [r7, #1170]	; 0x492
 8003acc:	2300      	movs	r3, #0
 8003ace:	f887 3493 	strb.w	r3, [r7, #1171]	; 0x493
 8003ad2:	f207 4492 	addw	r4, r7, #1170	; 0x492
 8003ad6:	f207 4393 	addw	r3, r7, #1171	; 0x493
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	4623      	mov	r3, r4
 8003ade:	f7fd fbd7 	bl	8001290 <_ZN4OLED15PrintSkockoCombEPKhRS0_S2_S2_>
		disp_pos_t text2_pos = {.x_ = OLED::FIRST_COL, .y_ = OLED::THIRD_ROW};
 8003ae2:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003ae6:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8003aea:	4a36      	ldr	r2, [pc, #216]	; (8003bc4 <_ZN6Skocko7EndGameERKNS_6resultE+0xe0c>)
 8003aec:	8812      	ldrh	r2, [r2, #0]
 8003aee:	801a      	strh	r2, [r3, #0]
		this->OLED_->PrintString("Dobitna komb:", text2_pos);
 8003af0:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003af4:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003afc:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8003b00:	4618      	mov	r0, r3
 8003b02:	f007 fdf8 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003b06:	f207 42ac 	addw	r2, r7, #1196	; 0x4ac
 8003b0a:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8003b0e:	492e      	ldr	r1, [pc, #184]	; (8003bc8 <_ZN6Skocko7EndGameERKNS_6resultE+0xe10>)
 8003b10:	4618      	mov	r0, r3
 8003b12:	f007 ff67 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003b16:	f107 0208 	add.w	r2, r7, #8
 8003b1a:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7fd fb87 	bl	8001234 <_ZN4OLED11PrintStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8disp_pos>
 8003b26:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f007 fead 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b30:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8003b34:	4618      	mov	r0, r3
 8003b36:	f007 fddf 	bl	800b6f8 <_ZNSaIcED1Ev>
		this->OLED_->PrintSkockoComb(this->winComb_, this->currPos_, OLED::FOURTH_ROW, OLED::NO_UNDERLINE);
 8003b3a:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003b3e:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b46:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003b4a:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f103 010d 	add.w	r1, r3, #13
 8003b54:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003b58:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003b62:	2332      	movs	r3, #50	; 0x32
 8003b64:	f887 34ae 	strb.w	r3, [r7, #1198]	; 0x4ae
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f887 34af 	strb.w	r3, [r7, #1199]	; 0x4af
 8003b6e:	f207 44ae 	addw	r4, r7, #1198	; 0x4ae
 8003b72:	f207 43af 	addw	r3, r7, #1199	; 0x4af
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	4623      	mov	r3, r4
 8003b7a:	f7fd fb89 	bl	8001290 <_ZN4OLED15PrintSkockoCombEPKhRS0_S2_S2_>
		this->OLED_->UpdateScreen();
 8003b7e:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003b82:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd fbe8 	bl	8001360 <_ZN4OLED12UpdateScreenEv>
	}
	this->ResetGame();
 8003b90:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003b94:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	f7fe ffbf 	bl	8002b1c <_ZN6Skocko9ResetGameEv>
}
 8003b9e:	bf00      	nop
 8003ba0:	f207 47b4 	addw	r7, r7, #1204	; 0x4b4
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd90      	pop	{r4, r7, pc}
 8003ba8:	0800c300 	.word	0x0800c300
 8003bac:	0800c600 	.word	0x0800c600
 8003bb0:	0800c6dc 	.word	0x0800c6dc
 8003bb4:	0800c674 	.word	0x0800c674
 8003bb8:	0800c680 	.word	0x0800c680
 8003bbc:	0800be60 	.word	0x0800be60
 8003bc0:	0800c6f8 	.word	0x0800c6f8
 8003bc4:	0800be68 	.word	0x0800be68
 8003bc8:	0800c6cc 	.word	0x0800c6cc

08003bcc <_ZN6Skocko15PrintCombToUARTEPKh>:
  * @brief
  * @note
  * @param
  * @retval
  */
void Skocko::PrintCombToUART(const uint8_t* comb){
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b0ae      	sub	sp, #184	; 0xb8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < COMB_SYMBOLS_CNT; i++){
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	f300 80d4 	bgt.w	8003d8e <_ZN6Skocko15PrintCombToUARTEPKh+0x1c2>
		switch(comb[i]){
 8003be6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	4413      	add	r3, r2
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	2b05      	cmp	r3, #5
 8003bf4:	f200 80c4 	bhi.w	8003d80 <_ZN6Skocko15PrintCombToUARTEPKh+0x1b4>
 8003bf8:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <_ZN6Skocko15PrintCombToUARTEPKh+0x34>)
 8003bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfe:	bf00      	nop
 8003c00:	08003c19 	.word	0x08003c19
 8003c04:	08003c55 	.word	0x08003c55
 8003c08:	08003c91 	.word	0x08003c91
 8003c0c:	08003ccd 	.word	0x08003ccd
 8003c10:	08003d09 	.word	0x08003d09
 8003c14:	08003d45 	.word	0x08003d45
		case this->SKOCKO:
			PrintUART("  SKOCKO  |");
 8003c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f007 fd6a 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003c22:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003c26:	f107 030c 	add.w	r3, r7, #12
 8003c2a:	495b      	ldr	r1, [pc, #364]	; (8003d98 <_ZN6Skocko15PrintCombToUARTEPKh+0x1cc>)
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f007 fed9 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003c32:	f107 030c 	add.w	r3, r7, #12
 8003c36:	4619      	mov	r1, r3
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fe ffe8 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003c3e:	f107 030c 	add.w	r3, r7, #12
 8003c42:	4618      	mov	r0, r3
 8003c44:	f007 fe21 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f007 fd53 	bl	800b6f8 <_ZNSaIcED1Ev>
			break;
 8003c52:	e096      	b.n	8003d82 <_ZN6Skocko15PrintCombToUARTEPKh+0x1b6>
		case this->ZVEZDA:
			PrintUART("  ZVEZDA  |");
 8003c54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f007 fd4c 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003c5e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c66:	494d      	ldr	r1, [pc, #308]	; (8003d9c <_ZN6Skocko15PrintCombToUARTEPKh+0x1d0>)
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f007 febb 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c72:	4619      	mov	r1, r3
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7fe ffca 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f007 fe03 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f007 fd35 	bl	800b6f8 <_ZNSaIcED1Ev>
			break;
 8003c8e:	e078      	b.n	8003d82 <_ZN6Skocko15PrintCombToUARTEPKh+0x1b6>
		case this->PIK:
			PrintUART("   PIK    |");
 8003c90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c94:	4618      	mov	r0, r3
 8003c96:	f007 fd2e 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003c9a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003c9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ca2:	493f      	ldr	r1, [pc, #252]	; (8003da0 <_ZN6Skocko15PrintCombToUARTEPKh+0x1d4>)
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f007 fe9d 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003caa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7fe ffac 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003cb6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f007 fde5 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003cc0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f007 fd17 	bl	800b6f8 <_ZNSaIcED1Ev>
			break;
 8003cca:	e05a      	b.n	8003d82 <_ZN6Skocko15PrintCombToUARTEPKh+0x1b6>
		case this->HERC:
			PrintUART("   HERC   |");
 8003ccc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f007 fd10 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003cd6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003cda:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003cde:	4931      	ldr	r1, [pc, #196]	; (8003da4 <_ZN6Skocko15PrintCombToUARTEPKh+0x1d8>)
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f007 fe7f 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003ce6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003cea:	4619      	mov	r1, r3
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7fe ff8e 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003cf2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f007 fdc7 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003cfc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d00:	4618      	mov	r0, r3
 8003d02:	f007 fcf9 	bl	800b6f8 <_ZNSaIcED1Ev>
			break;
 8003d06:	e03c      	b.n	8003d82 <_ZN6Skocko15PrintCombToUARTEPKh+0x1b6>
		case this->TREF:
			PrintUART("   TREF   |");
 8003d08:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f007 fcf2 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003d12:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003d16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d1a:	4923      	ldr	r1, [pc, #140]	; (8003da8 <_ZN6Skocko15PrintCombToUARTEPKh+0x1dc>)
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f007 fe61 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003d22:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d26:	4619      	mov	r1, r3
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7fe ff70 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003d2e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d32:	4618      	mov	r0, r3
 8003d34:	f007 fda9 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d38:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f007 fcdb 	bl	800b6f8 <_ZNSaIcED1Ev>
			break;
 8003d42:	e01e      	b.n	8003d82 <_ZN6Skocko15PrintCombToUARTEPKh+0x1b6>
		case this->KARO:
			PrintUART("   KARO   |");
 8003d44:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f007 fcd4 	bl	800b6f6 <_ZNSaIcEC1Ev>
 8003d4e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003d52:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d56:	4915      	ldr	r1, [pc, #84]	; (8003dac <_ZN6Skocko15PrintCombToUARTEPKh+0x1e0>)
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f007 fe43 	bl	800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003d5e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d62:	4619      	mov	r1, r3
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7fe ff52 	bl	8002c0e <_ZN6Skocko9PrintUARTERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003d6a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f007 fd8b 	bl	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d74:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f007 fcbd 	bl	800b6f8 <_ZNSaIcED1Ev>
			break;
 8003d7e:	e000      	b.n	8003d82 <_ZN6Skocko15PrintCombToUARTEPKh+0x1b6>
		default:
			break;
 8003d80:	bf00      	nop
	for(int i = 0; i < COMB_SYMBOLS_CNT; i++){
 8003d82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d86:	3301      	adds	r3, #1
 8003d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d8c:	e726      	b.n	8003bdc <_ZN6Skocko15PrintCombToUARTEPKh+0x10>
		}
	}
}
 8003d8e:	bf00      	nop
 8003d90:	37b8      	adds	r7, #184	; 0xb8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	0800c70c 	.word	0x0800c70c
 8003d9c:	0800c718 	.word	0x0800c718
 8003da0:	0800c724 	.word	0x0800c724
 8003da4:	0800c730 	.word	0x0800c730
 8003da8:	0800c73c 	.word	0x0800c73c
 8003dac:	0800c748 	.word	0x0800c748

08003db0 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	fb03 f303 	mul.w	r3, r3, r3
 8003dc4:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
 8003dce:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	fb02 f303 	mul.w	r3, r2, r3
 8003dd8:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d201      	bcs.n	8003de6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	e01d      	b.n	8003e22 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d202      	bcs.n	8003df4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	3301      	adds	r3, #1
 8003df2:	e016      	b.n	8003e22 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d202      	bcs.n	8003e02 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	3302      	adds	r3, #2
 8003e00:	e00f      	b.n	8003e22 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d202      	bcs.n	8003e10 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	3303      	adds	r3, #3
 8003e0e:	e008      	b.n	8003e22 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e18:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8003e20:	e7db      	b.n	8003dda <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8003e22:	4618      	mov	r0, r3
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8003e30:	b480      	push	{r7}
 8003e32:	b089      	sub	sp, #36	; 0x24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b63      	cmp	r3, #99	; 0x63
 8003e46:	d925      	bls.n	8003e94 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8003e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	2164      	movs	r1, #100	; 0x64
 8003e54:	fb01 f303 	mul.w	r3, r1, r3
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a1c      	ldr	r2, [pc, #112]	; (8003ed4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68f9      	ldr	r1, [r7, #12]
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	440b      	add	r3, r1
 8003e74:	4918      	ldr	r1, [pc, #96]	; (8003ed8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8003e76:	5c8a      	ldrb	r2, [r1, r2]
 8003e78:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4413      	add	r3, r2
 8003e82:	4915      	ldr	r1, [pc, #84]	; (8003ed8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	440a      	add	r2, r1
 8003e88:	7812      	ldrb	r2, [r2, #0]
 8003e8a:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	3b02      	subs	r3, #2
 8003e90:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8003e92:	e7d6      	b.n	8003e42 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b09      	cmp	r3, #9
 8003e98:	d910      	bls.n	8003ebc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	490b      	ldr	r1, [pc, #44]	; (8003ed8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8003eaa:	5c8a      	ldrb	r2, [r1, r2]
 8003eac:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8003eae:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8003eba:	e005      	b.n	8003ec8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	3330      	adds	r3, #48	; 0x30
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	701a      	strb	r2, [r3, #0]
    }
 8003ec8:	bf00      	nop
 8003eca:	3724      	adds	r7, #36	; 0x24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	51eb851f 	.word	0x51eb851f
 8003ed8:	0800d028 	.word	0x0800d028

08003edc <_ZN7SSD1306C1Ev>:
  * @brief
  * @note
  * @param
  * @retval
  */
SSD1306::SSD1306(void){
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	i2ch_ = new I2C_HandleTypeDef;
 8003ee4:	2054      	movs	r0, #84	; 0x54
 8003ee6:	f007 fbf2 	bl	800b6ce <_Znwj>
 8003eea:	4603      	mov	r3, r0
 8003eec:	461a      	mov	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	601a      	str	r2, [r3, #0]
}
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_ZN7SSD130617FindDeviceAddressEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void SSD1306::FindDeviceAddress(void){
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]

	uint8_t devAddr = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	73fb      	strb	r3, [r7, #15]

	while(devAddr < 128){
 8003f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	db15      	blt.n	8003f3c <_ZN7SSD130617FindDeviceAddressEv+0x40>
		if (HAL_I2C_IsDeviceReady(this->i2ch_, devAddr, 1, 0x00000100) == HAL_OK){
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	b299      	uxth	r1, r3
 8003f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f003 fc13 	bl	8007748 <HAL_I2C_IsDeviceReady>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf0c      	ite	eq
 8003f28:	2301      	moveq	r3, #1
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d103      	bne.n	8003f3a <_ZN7SSD130617FindDeviceAddressEv+0x3e>
			break;
		}
		devAddr++;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	3301      	adds	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
	while(devAddr < 128){
 8003f38:	e7e6      	b.n	8003f08 <_ZN7SSD130617FindDeviceAddressEv+0xc>
			break;
 8003f3a:	bf00      	nop
	}

	this->devAddr_ = devAddr;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	7bfa      	ldrb	r2, [r7, #15]
 8003f40:	711a      	strb	r2, [r3, #4]
}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <_ZN7SSD13064InitEP19__I2C_HandleTypeDef>:
  * @brief
  * @note
  * @param
  * @retval
  */
uint8_t SSD1306::Init(I2C_HandleTypeDef* i2cHandler){
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]

	/* Set default values */
	this->x_ = 0;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	80da      	strh	r2, [r3, #6]
	this->y_ = 0;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	811a      	strh	r2, [r3, #8]
	this->init_ = SSD1306_UNINITIALIZED;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	72da      	strb	r2, [r3, #11]
	this->inverted_ = SSD1306_NOT_INVERTED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	729a      	strb	r2, [r3, #10]

	this->i2ch_ = i2cHandler;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	601a      	str	r2, [r3, #0]
	this->FindDeviceAddress();
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff ffc2 	bl	8003efc <_ZN7SSD130617FindDeviceAddressEv>

	/* A little delay */
	uint32_t start_delay_iterator = 2500;
 8003f78:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003f7c:	60fb      	str	r3, [r7, #12]
	while(start_delay_iterator > 0){
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x42>
		start_delay_iterator--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	60fb      	str	r3, [r7, #12]
	while(start_delay_iterator > 0){
 8003f8a:	e7f8      	b.n	8003f7e <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x34>
	 *	For more info consult: https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf
	 *	pages 28 to 32 contain tables with commands, and bellow is additional description of commands
	 *
	 *										// DEFAULT VALUES (after reset) is the first row and bellow row is command description
	 * */									// -	, single command
	if(this->SendCommand(0xAE) != HAL_OK){	// Display OFF (sleep mode)
 8003f8c:	21ae      	movs	r1, #174	; 0xae
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fc31 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bf14      	ite	ne
 8003f9a:	2301      	movne	r3, #1
 8003f9c:	2300      	moveq	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x5e>
		return SSD1306_ERROR;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e184      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// -	, double Byte command : first Byte
	if(this->SendCommand(0x20) != HAL_OK){	// Set Memory Addressing Mode (next sent command will adjust which one!)
 8003fa8:	2120      	movs	r1, #32
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fc23 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	bf14      	ite	ne
 8003fb6:	2301      	movne	r3, #1
 8003fb8:	2300      	moveq	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x7a>
		return SSD1306_ERROR;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e176      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// 0x10	, double Byte command : second Byte
	if(this->SendCommand(0x10) != HAL_OK){	// 00 = Horizontal Addressing Mode, 01 = Vertical Addressing Mode
 8003fc4:	2110      	movs	r1, #16
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fc15 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	bf14      	ite	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	2300      	moveq	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x96>
		return SSD1306_ERROR;														// 10,Page Addressing Mode (RESET), 11,Invalid
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e168      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// -	, single command
	if(this->SendCommand(0xB0) != HAL_OK){	// Set Page Start Address for Page Addressing Mode,0-7
 8003fe0:	21b0      	movs	r1, #176	; 0xb0
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fc07 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0xb2>
		return SSD1306_ERROR;														// 0xB0 = PAGE0 , ... , 0xB7 = PAGE7
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e15a      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// 0xC0	, single command
	if(this->SendCommand(0xC8) != HAL_OK){	// Set COM Output Scan Direction: 0xC8 = remapped mode, 0xC0 = normal mode
 8003ffc:	21c8      	movs	r1, #200	; 0xc8
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fbf9 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf14      	ite	ne
 800400a:	2301      	movne	r3, #1
 800400c:	2300      	moveq	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0xce>
		return SSD1306_ERROR;														// For example, if this command is sent during normal display then the
 8004014:	2302      	movs	r3, #2
 8004016:	e14c      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
																					// graphic display will be vertically flipped immediately
	}										// -	, single command
	if(this->SendCommand(0x00) != HAL_OK){	// Sets lower nibble of column address (this command is only for page addressing mode)
 8004018:	2100      	movs	r1, #0
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fbeb 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	bf14      	ite	ne
 8004026:	2301      	movne	r3, #1
 8004028:	2300      	moveq	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0xea>
		return SSD1306_ERROR;														// in this case 0x00 will give 0000 nibble
 8004030:	2302      	movs	r3, #2
 8004032:	e13e      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// -	, single command
	if(this->SendCommand(0x10) != HAL_OK){	// Set higher nibble of column address
 8004034:	2110      	movs	r1, #16
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fbdd 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x106>
		return SSD1306_ERROR;														// in this case 0x00 will give 0000 nibble
 800404c:	2302      	movs	r3, #2
 800404e:	e130      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
																					// which will result to COLUMN_0
	}										// 0x40	, single command
	if(this->SendCommand(0x40) != HAL_OK){	// Set display start line - Set display RAM display start line register from
 8004050:	2140      	movs	r1, #64	; 0x40
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fbcf 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	bf14      	ite	ne
 800405e:	2301      	movne	r3, #1
 8004060:	2300      	moveq	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x122>
		return SSD1306_ERROR;														// 0-63 using lower 6 bits of this command which are in this case = 00 0000b
 8004068:	2302      	movs	r3, #2
 800406a:	e122      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// -	, double Byte command : first Byte
	if(this->SendCommand(0x81) != HAL_OK){	// Set contrast control with next command
 800406c:	2181      	movs	r1, #129	; 0x81
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fbc1 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	bf14      	ite	ne
 800407a:	2301      	movne	r3, #1
 800407c:	2300      	moveq	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x13e>
		return SSD1306_ERROR;
 8004084:	2302      	movs	r3, #2
 8004086:	e114      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// 0x7F	, double Byte command : second Byte
	if(this->SendCommand(0x7F) != HAL_OK){	// Contrast value (RESET = 0x7F)
 8004088:	217f      	movs	r1, #127	; 0x7f
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fbb3 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf14      	ite	ne
 8004096:	2301      	movne	r3, #1
 8004098:	2300      	moveq	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x15a>
		return SSD1306_ERROR;														// as much this value is higher, contrast will be higher
 80040a0:	2302      	movs	r3, #2
 80040a2:	e106      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// 0xA0	, single command
	if(this->SendCommand(0xA1) != HAL_OK){	// Set segment Re-map
 80040a4:	21a1      	movs	r1, #161	; 0xa1
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fba5 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bf14      	ite	ne
 80040b2:	2301      	movne	r3, #1
 80040b4:	2300      	moveq	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x176>
		return SSD1306_ERROR;														// 0xA1 = column address 127 will be mapped to SEG0
 80040bc:	2302      	movs	r3, #2
 80040be:	e0f8      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// 0xA6	, single command
	if(this->SendCommand(0xA6) != HAL_OK){	// Set normal/inverse display
 80040c0:	21a6      	movs	r1, #166	; 0xa6
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fb97 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bf14      	ite	ne
 80040ce:	2301      	movne	r3, #1
 80040d0:	2300      	moveq	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x192>
		return SSD1306_ERROR;														// 0xA6 = Normal, 0xA7 = Inverse
 80040d8:	2302      	movs	r3, #2
 80040da:	e0ea      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// -	, double Byte command : first Byte
	if(this->SendCommand(0xA8) != HAL_OK){	// Set multiplex ratio (from 16 to 64, 0 to 15 are invalid)
 80040dc:	21a8      	movs	r1, #168	; 0xa8
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fb89 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bf14      	ite	ne
 80040ea:	2301      	movne	r3, #1
 80040ec:	2300      	moveq	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x1ae>
		return SSD1306_ERROR;
 80040f4:	2302      	movs	r3, #2
 80040f6:	e0dc      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// 0x3F	, double Byte command : second Byte
	if(this->SendCommand(0x3F) != HAL_OK){	// 0x3F = 63 decimally => MUX ratio =  64
 80040f8:	213f      	movs	r1, #63	; 0x3f
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fb7b 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	bf14      	ite	ne
 8004106:	2301      	movne	r3, #1
 8004108:	2300      	moveq	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x1ca>
		return SSD1306_ERROR;
 8004110:	2302      	movs	r3, #2
 8004112:	e0ce      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// 0xA4 , single command
	if(this->SendCommand(0xA4) != HAL_OK){	//0xA4 = Output follows RAM content, 0xA5 = Output ignores RAM content (ENTIRE DISPLAY ON)
 8004114:	21a4      	movs	r1, #164	; 0xa4
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fb6d 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	bf14      	ite	ne
 8004122:	2301      	movne	r3, #1
 8004124:	2300      	moveq	r3, #0
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x1e6>
		return SSD1306_ERROR;
 800412c:	2302      	movs	r3, #2
 800412e:	e0c0      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// -	, double Byte command : first Byte
	if(this->SendCommand(0xD3) != HAL_OK){	// Set display offset: set vertical shift by COM from 0d~63d
 8004130:	21d3      	movs	r1, #211	; 0xd3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fb5f 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	bf14      	ite	ne
 800413e:	2301      	movne	r3, #1
 8004140:	2300      	moveq	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x202>
		return SSD1306_ERROR;
 8004148:	2302      	movs	r3, #2
 800414a:	e0b2      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// 0x00	, double Byte command : second Byte
	if(this->SendCommand(0x00) != HAL_OK){	// 0x00 = Not offset
 800414c:	2100      	movs	r1, #0
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fb51 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	bf14      	ite	ne
 800415a:	2301      	movne	r3, #1
 800415c:	2300      	moveq	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x21e>
		return SSD1306_ERROR;
 8004164:	2302      	movs	r3, #2
 8004166:	e0a4      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// -	, double Byte command : first Byte
	if(this->SendCommand(0xD5) != HAL_OK){	// Set display clock divide ratio/oscillator frequency
 8004168:	21d5      	movs	r1, #213	; 0xd5
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fb43 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	bf14      	ite	ne
 8004176:	2301      	movne	r3, #1
 8004178:	2300      	moveq	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x23a>
		return SSD1306_ERROR;
 8004180:	2302      	movs	r3, #2
 8004182:	e096      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// 0x80	, double Byte command : second Byte
	if(this->SendCommand(0xF0) != HAL_OK){	// divide ratio = 1, oscillator frequency = MAX
 8004184:	21f0      	movs	r1, #240	; 0xf0
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fb35 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	bf14      	ite	ne
 8004192:	2301      	movne	r3, #1
 8004194:	2300      	moveq	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x256>
		return SSD1306_ERROR;
 800419c:	2302      	movs	r3, #2
 800419e:	e088      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// -	, double Byte command : first Byte
	if(this->SendCommand(0xD9) != HAL_OK){	// Set pre-charge period
 80041a0:	21d9      	movs	r1, #217	; 0xd9
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fb27 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	bf14      	ite	ne
 80041ae:	2301      	movne	r3, #1
 80041b0:	2300      	moveq	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x272>
		return SSD1306_ERROR;
 80041b8:	2302      	movs	r3, #2
 80041ba:	e07a      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// 0x22	, double Byte command : second Byte
	if(this->SendCommand(0x22) != HAL_OK){	// phase1 and phase2 adjustment = by default
 80041bc:	2122      	movs	r1, #34	; 0x22
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fb19 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bf14      	ite	ne
 80041ca:	2301      	movne	r3, #1
 80041cc:	2300      	moveq	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x28e>
		return SSD1306_ERROR;
 80041d4:	2302      	movs	r3, #2
 80041d6:	e06c      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// -	, double Byte command : first Byte
	if(this->SendCommand(0xDA) != HAL_OK){	// Set COM pins hardware configuration
 80041d8:	21da      	movs	r1, #218	; 0xda
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fb0b 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bf14      	ite	ne
 80041e6:	2301      	movne	r3, #1
 80041e8:	2300      	moveq	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x2aa>
		return SSD1306_ERROR;
 80041f0:	2302      	movs	r3, #2
 80041f2:	e05e      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// 0x12	, double Byte command : second Byte
	if(this->SendCommand(0x12) != HAL_OK){	// => alternative COM pin configuration, disable COM left/right re-map
 80041f4:	2112      	movs	r1, #18
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fafd 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	bf14      	ite	ne
 8004202:	2301      	movne	r3, #1
 8004204:	2300      	moveq	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x2c6>
		return SSD1306_ERROR;
 800420c:	2302      	movs	r3, #2
 800420e:	e050      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// -	, double Byte command : first Byte
	if(this->SendCommand(0xDB) != HAL_OK){	// Set Vcomh deselect level
 8004210:	21db      	movs	r1, #219	; 0xdb
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 faef 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	bf14      	ite	ne
 800421e:	2301      	movne	r3, #1
 8004220:	2300      	moveq	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x2e2>
		return SSD1306_ERROR;
 8004228:	2302      	movs	r3, #2
 800422a:	e042      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// 0x20	, double Byte command : second Byte
	if(this->SendCommand(0x20) != HAL_OK){	// =>Vcomh deselect level = 0.77xVcc
 800422c:	2120      	movs	r1, #32
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fae1 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf14      	ite	ne
 800423a:	2301      	movne	r3, #1
 800423c:	2300      	moveq	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x2fe>
		return SSD1306_ERROR;
 8004244:	2302      	movs	r3, #2
 8004246:	e034      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										//
	if(this->SendCommand(0x8D) != HAL_OK){	//--set DC-DC enable
 8004248:	218d      	movs	r1, #141	; 0x8d
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fad3 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	bf14      	ite	ne
 8004256:	2301      	movne	r3, #1
 8004258:	2300      	moveq	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x31a>
		return SSD1306_ERROR;
 8004260:	2302      	movs	r3, #2
 8004262:	e026      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										//
	if(this->SendCommand(0x14) != HAL_OK){ //
 8004264:	2114      	movs	r1, #20
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fac5 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf14      	ite	ne
 8004272:	2301      	movne	r3, #1
 8004274:	2300      	moveq	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x336>
		return SSD1306_ERROR;
 800427c:	2302      	movs	r3, #2
 800427e:	e018      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}										// -	, single command
	if(this->SendCommand(0xAF) != HAL_OK){	// Turn on SSD1306 panel
 8004280:	21af      	movs	r1, #175	; 0xaf
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fab7 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf14      	ite	ne
 800428e:	2301      	movne	r3, #1
 8004290:	2300      	moveq	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x352>
		return SSD1306_ERROR;
 8004298:	2302      	movs	r3, #2
 800429a:	e00a      	b.n	80042b2 <_ZN7SSD13064InitEP19__I2C_HandleTypeDef+0x368>
	}

	/* Clear screen */
	this->Fill(SSD1306_COLOR_WHITE);
 800429c:	2101      	movs	r1, #1
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f87a 	bl	8004398 <_ZN7SSD13064FillEh>
	/* Update screen */
	this->UpdateScreen();
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f830 	bl	800430a <_ZN7SSD130612UpdateScreenEv>


	/* After initialization if all commands have passed we can assume that SSD1306 OLED is initalized. */
	this->init_ = SSD1306_INITIALIZED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	72da      	strb	r2, [r3, #11]

	return SSD1306_OK;
 80042b0:	2301      	movs	r3, #1
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <_ZN7SSD130611SetContrastEh>:


uint8_t SSD1306::SetContrast(uint8_t value){
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	460b      	mov	r3, r1
 80042c4:	70fb      	strb	r3, [r7, #3]
	// -	, double Byte command : first Byte
	if(this->SendCommand(0x81) != HAL_OK){	// Set contrast control with next command
 80042c6:	2181      	movs	r1, #129	; 0x81
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fa94 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf14      	ite	ne
 80042d4:	2301      	movne	r3, #1
 80042d6:	2300      	moveq	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <_ZN7SSD130611SetContrastEh+0x28>
		return SSD1306_ERROR;
 80042de:	2302      	movs	r3, #2
 80042e0:	e00f      	b.n	8004302 <_ZN7SSD130611SetContrastEh+0x48>
	}										// 0x7F	, double Byte command : second Byte
	if(this->SendCommand(value) != HAL_OK){	// Contrast value (RESET = 0x7F)
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	4619      	mov	r1, r3
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fa85 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	bf14      	ite	ne
 80042f2:	2301      	movne	r3, #1
 80042f4:	2300      	moveq	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <_ZN7SSD130611SetContrastEh+0x46>
		return SSD1306_ERROR;				// as much this value is higher, contrast will be higher
 80042fc:	2302      	movs	r3, #2
 80042fe:	e000      	b.n	8004302 <_ZN7SSD130611SetContrastEh+0x48>
	}
	return SSD1306_OK;
 8004300:	2301      	movs	r3, #1
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <_ZN7SSD130612UpdateScreenEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void SSD1306::UpdateScreen(void) {
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8004312:	2300      	movs	r3, #0
 8004314:	73fb      	strb	r3, [r7, #15]
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b07      	cmp	r3, #7
 800431a:	d83a      	bhi.n	8004392 <_ZN7SSD130612UpdateScreenEv+0x88>
		/* This Code is following datasheet on page 34 */
		if(this->SendCommand(0xB0 + m) != HAL_OK){
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	3b50      	subs	r3, #80	; 0x50
 8004320:	b2db      	uxtb	r3, r3
 8004322:	4619      	mov	r1, r3
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fa66 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	bf14      	ite	ne
 8004330:	2301      	movne	r3, #1
 8004332:	2300      	moveq	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d126      	bne.n	8004388 <_ZN7SSD130612UpdateScreenEv+0x7e>
			return;
		}
		if(this->SendCommand(0x00) != HAL_OK){
 800433a:	2100      	movs	r1, #0
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fa5a 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	bf14      	ite	ne
 8004348:	2301      	movne	r3, #1
 800434a:	2300      	moveq	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d11c      	bne.n	800438c <_ZN7SSD130612UpdateScreenEv+0x82>
			return;
		}
		if(this->SendCommand(0x10) != HAL_OK){
 8004352:	2110      	movs	r1, #16
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fa4e 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf14      	ite	ne
 8004360:	2301      	movne	r3, #1
 8004362:	2300      	moveq	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d112      	bne.n	8004390 <_ZN7SSD130612UpdateScreenEv+0x86>
			return;
		}

		/* Write multi data */
		this->SendData(&buff_[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	01db      	lsls	r3, r3, #7
 800436e:	3308      	adds	r3, #8
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	4413      	add	r3, r2
 8004374:	3304      	adds	r3, #4
 8004376:	2280      	movs	r2, #128	; 0x80
 8004378:	4619      	mov	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fa5b 	bl	8004836 <_ZN7SSD13068SendDataEPht>
	for (m = 0; m < 8; m++) {
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	3301      	adds	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]
 8004386:	e7c6      	b.n	8004316 <_ZN7SSD130612UpdateScreenEv+0xc>
			return;
 8004388:	bf00      	nop
 800438a:	e002      	b.n	8004392 <_ZN7SSD130612UpdateScreenEv+0x88>
			return;
 800438c:	bf00      	nop
 800438e:	e000      	b.n	8004392 <_ZN7SSD130612UpdateScreenEv+0x88>
			return;
 8004390:	bf00      	nop
	}
}
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <_ZN7SSD13064FillEh>:
  * @brief
  * @note
  * @param
  * @retval
  */
void SSD1306::Fill(uint8_t color) {
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
	/* Set memory */
	if (color == SSD1306_COLOR_BLACK){
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10e      	bne.n	80043c8 <_ZN7SSD13064FillEh+0x30>
		for(uint16_t i = 0; i < sizeof(this->buff_); i++){
 80043aa:	2300      	movs	r3, #0
 80043ac:	81fb      	strh	r3, [r7, #14]
 80043ae:	89fb      	ldrh	r3, [r7, #14]
 80043b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b4:	d217      	bcs.n	80043e6 <_ZN7SSD13064FillEh+0x4e>
			this->buff_[i] = 0x00;
 80043b6:	89fb      	ldrh	r3, [r7, #14]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	4413      	add	r3, r2
 80043bc:	2200      	movs	r2, #0
 80043be:	731a      	strb	r2, [r3, #12]
		for(uint16_t i = 0; i < sizeof(this->buff_); i++){
 80043c0:	89fb      	ldrh	r3, [r7, #14]
 80043c2:	3301      	adds	r3, #1
 80043c4:	81fb      	strh	r3, [r7, #14]
 80043c6:	e7f2      	b.n	80043ae <_ZN7SSD13064FillEh+0x16>
		}
	}
	else{
		for(uint16_t i = 0; i < sizeof(this->buff_); i++){
 80043c8:	2300      	movs	r3, #0
 80043ca:	81bb      	strh	r3, [r7, #12]
 80043cc:	89bb      	ldrh	r3, [r7, #12]
 80043ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d2:	d208      	bcs.n	80043e6 <_ZN7SSD13064FillEh+0x4e>
			this->buff_[i] = 0xFF;
 80043d4:	89bb      	ldrh	r3, [r7, #12]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	22ff      	movs	r2, #255	; 0xff
 80043dc:	731a      	strb	r2, [r3, #12]
		for(uint16_t i = 0; i < sizeof(this->buff_); i++){
 80043de:	89bb      	ldrh	r3, [r7, #12]
 80043e0:	3301      	adds	r3, #1
 80043e2:	81bb      	strh	r3, [r7, #12]
 80043e4:	e7f2      	b.n	80043cc <_ZN7SSD13064FillEh+0x34>
		}
	}
}
 80043e6:	bf00      	nop
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <_ZN7SSD13069DrawPixelEtth>:
  * @brief
  * @note
  * @param
  * @retval
  */
void SSD1306::DrawPixel(uint16_t x, uint16_t y, uint8_t color) {
 80043f2:	b480      	push	{r7}
 80043f4:	b085      	sub	sp, #20
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	4608      	mov	r0, r1
 80043fc:	4611      	mov	r1, r2
 80043fe:	461a      	mov	r2, r3
 8004400:	4603      	mov	r3, r0
 8004402:	817b      	strh	r3, [r7, #10]
 8004404:	460b      	mov	r3, r1
 8004406:	813b      	strh	r3, [r7, #8]
 8004408:	4613      	mov	r3, r2
 800440a:	71fb      	strb	r3, [r7, #7]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800440c:	897b      	ldrh	r3, [r7, #10]
 800440e:	2b7f      	cmp	r3, #127	; 0x7f
 8004410:	d84e      	bhi.n	80044b0 <_ZN7SSD13069DrawPixelEtth+0xbe>
 8004412:	893b      	ldrh	r3, [r7, #8]
 8004414:	2b3f      	cmp	r3, #63	; 0x3f
 8004416:	d84b      	bhi.n	80044b0 <_ZN7SSD13069DrawPixelEtth+0xbe>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (this->inverted_) {
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	7a9b      	ldrb	r3, [r3, #10]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d006      	beq.n	800442e <_ZN7SSD13069DrawPixelEtth+0x3c>
		color = (uint8_t)!color;
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	2b00      	cmp	r3, #0
 8004424:	bf0c      	ite	eq
 8004426:	2301      	moveq	r3, #1
 8004428:	2300      	movne	r3, #0
 800442a:	b2db      	uxtb	r3, r3
 800442c:	71fb      	strb	r3, [r7, #7]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d11d      	bne.n	8004470 <_ZN7SSD13069DrawPixelEtth+0x7e>
		this->buff_[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004434:	897a      	ldrh	r2, [r7, #10]
 8004436:	893b      	ldrh	r3, [r7, #8]
 8004438:	08db      	lsrs	r3, r3, #3
 800443a:	b298      	uxth	r0, r3
 800443c:	4603      	mov	r3, r0
 800443e:	01db      	lsls	r3, r3, #7
 8004440:	4413      	add	r3, r2
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4413      	add	r3, r2
 8004446:	7b1b      	ldrb	r3, [r3, #12]
 8004448:	b25a      	sxtb	r2, r3
 800444a:	893b      	ldrh	r3, [r7, #8]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	2101      	movs	r1, #1
 8004452:	fa01 f303 	lsl.w	r3, r1, r3
 8004456:	b25b      	sxtb	r3, r3
 8004458:	4313      	orrs	r3, r2
 800445a:	b259      	sxtb	r1, r3
 800445c:	897a      	ldrh	r2, [r7, #10]
 800445e:	4603      	mov	r3, r0
 8004460:	01db      	lsls	r3, r3, #7
 8004462:	4413      	add	r3, r2
 8004464:	b2c9      	uxtb	r1, r1
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	460a      	mov	r2, r1
 800446c:	731a      	strb	r2, [r3, #12]
 800446e:	e020      	b.n	80044b2 <_ZN7SSD13069DrawPixelEtth+0xc0>
	}
	else {
		this->buff_[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004470:	897a      	ldrh	r2, [r7, #10]
 8004472:	893b      	ldrh	r3, [r7, #8]
 8004474:	08db      	lsrs	r3, r3, #3
 8004476:	b298      	uxth	r0, r3
 8004478:	4603      	mov	r3, r0
 800447a:	01db      	lsls	r3, r3, #7
 800447c:	4413      	add	r3, r2
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	7b1b      	ldrb	r3, [r3, #12]
 8004484:	b25a      	sxtb	r2, r3
 8004486:	893b      	ldrh	r3, [r7, #8]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	2101      	movs	r1, #1
 800448e:	fa01 f303 	lsl.w	r3, r1, r3
 8004492:	b25b      	sxtb	r3, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	b25b      	sxtb	r3, r3
 8004498:	4013      	ands	r3, r2
 800449a:	b259      	sxtb	r1, r3
 800449c:	897a      	ldrh	r2, [r7, #10]
 800449e:	4603      	mov	r3, r0
 80044a0:	01db      	lsls	r3, r3, #7
 80044a2:	4413      	add	r3, r2
 80044a4:	b2c9      	uxtb	r1, r1
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4413      	add	r3, r2
 80044aa:	460a      	mov	r2, r1
 80044ac:	731a      	strb	r2, [r3, #12]
 80044ae:	e000      	b.n	80044b2 <_ZN7SSD13069DrawPixelEtth+0xc0>
		return;
 80044b0:	bf00      	nop
	}
}
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <_ZN7SSD13066GoToXYEtt>:
  * @brief
  * @note
  * @param
  * @retval
  */
void SSD1306::GoToXY(uint16_t x, uint16_t y) {
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	807b      	strh	r3, [r7, #2]
 80044c8:	4613      	mov	r3, r2
 80044ca:	803b      	strh	r3, [r7, #0]
	/* Set write pointers */
	this->x_ = x;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	887a      	ldrh	r2, [r7, #2]
 80044d0:	80da      	strh	r2, [r3, #6]
	this->y_ = y;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	883a      	ldrh	r2, [r7, #0]
 80044d6:	811a      	strh	r2, [r3, #8]
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <_ZN7SSD13067PutCharEcP6font_th>:
  * @brief
  * @note
  * @param
  * @retval
  */
char SSD1306::PutChar(char ch, font_t* font, uint8_t color) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	461a      	mov	r2, r3
 80044f0:	460b      	mov	r3, r1
 80044f2:	72fb      	strb	r3, [r7, #11]
 80044f4:	4613      	mov	r3, r2
 80044f6:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (SSD1306_WIDTH <= (this->x_ + font->font_width) || SSD1306_HEIGHT <= (this->y_ + font->font_height)) {
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	88db      	ldrh	r3, [r3, #6]
 80044fc:	461a      	mov	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	4413      	add	r3, r2
 8004504:	2b7f      	cmp	r3, #127	; 0x7f
 8004506:	dc07      	bgt.n	8004518 <_ZN7SSD13067PutCharEcP6font_th+0x34>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	891b      	ldrh	r3, [r3, #8]
 800450c:	461a      	mov	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	4413      	add	r3, r2
 8004514:	2b3f      	cmp	r3, #63	; 0x3f
 8004516:	dd01      	ble.n	800451c <_ZN7SSD13067PutCharEcP6font_th+0x38>
		/* Error */
		return 0;
 8004518:	2300      	movs	r3, #0
 800451a:	e05e      	b.n	80045da <_ZN7SSD13067PutCharEcP6font_th+0xf6>
	}

	/* Go through font */
	for (i = 0; i < font->font_height; i++) {
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	461a      	mov	r2, r3
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	4293      	cmp	r3, r2
 800452a:	d24c      	bcs.n	80045c6 <_ZN7SSD13067PutCharEcP6font_th+0xe2>
		b = font->data[(ch - 32) * font->font_height + i];
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	7afb      	ldrb	r3, [r7, #11]
 8004532:	3b20      	subs	r3, #32
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	7849      	ldrb	r1, [r1, #1]
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	4619      	mov	r1, r3
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	440b      	add	r3, r1
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	4413      	add	r3, r2
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font->font_width; j++) {
 800454a:	2300      	movs	r3, #0
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	4293      	cmp	r3, r2
 8004558:	d231      	bcs.n	80045be <_ZN7SSD13067PutCharEcP6font_th+0xda>
			if ((b << j) & 0x8000) {
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d010      	beq.n	800458c <_ZN7SSD13067PutCharEcP6font_th+0xa8>
				this->DrawPixel(this->x_ + j, (this->y_ + i), (uint8_t) color);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	88da      	ldrh	r2, [r3, #6]
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	b29b      	uxth	r3, r3
 8004572:	4413      	add	r3, r2
 8004574:	b299      	uxth	r1, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	891a      	ldrh	r2, [r3, #8]
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	b29b      	uxth	r3, r3
 800457e:	4413      	add	r3, r2
 8004580:	b29a      	uxth	r2, r3
 8004582:	7abb      	ldrb	r3, [r7, #10]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f7ff ff34 	bl	80043f2 <_ZN7SSD13069DrawPixelEtth>
 800458a:	e014      	b.n	80045b6 <_ZN7SSD13067PutCharEcP6font_th+0xd2>
			}
			else {
				this->DrawPixel(this->x_ + j, (this->y_ + i), (uint8_t)!color);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	88da      	ldrh	r2, [r3, #6]
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	b29b      	uxth	r3, r3
 8004594:	4413      	add	r3, r2
 8004596:	b299      	uxth	r1, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	891a      	ldrh	r2, [r3, #8]
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	7abb      	ldrb	r3, [r7, #10]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f7ff ff1e 	bl	80043f2 <_ZN7SSD13069DrawPixelEtth>
		for (j = 0; j < font->font_width; j++) {
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	3301      	adds	r3, #1
 80045ba:	61bb      	str	r3, [r7, #24]
 80045bc:	e7c7      	b.n	800454e <_ZN7SSD13067PutCharEcP6font_th+0x6a>
	for (i = 0; i < font->font_height; i++) {
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3301      	adds	r3, #1
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	e7ac      	b.n	8004520 <_ZN7SSD13067PutCharEcP6font_th+0x3c>
			}
		}
	}

	/* Increase pointer */
	this->x_ += font->font_width;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	88da      	ldrh	r2, [r3, #6]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	80da      	strh	r2, [r3, #6]

	/* Return character written */
	return ch;
 80045d8:	7afb      	ldrb	r3, [r7, #11]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3720      	adds	r7, #32
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <_ZN7SSD13069PutSymbolERKhP6font_th>:
  * @brief
  * @note
  * @param
  * @retval
  */
uint8_t SSD1306::PutSymbol(const uint8_t& symbol, font_t* font, uint8_t color) {
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b088      	sub	sp, #32
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
 80045ee:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (SSD1306_WIDTH <= (this->x_ + font->font_width) || SSD1306_HEIGHT <= (this->y_ + font->font_height)) {
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	88db      	ldrh	r3, [r3, #6]
 80045f4:	461a      	mov	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	4413      	add	r3, r2
 80045fc:	2b7f      	cmp	r3, #127	; 0x7f
 80045fe:	dc07      	bgt.n	8004610 <_ZN7SSD13069PutSymbolERKhP6font_th+0x2e>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	891b      	ldrh	r3, [r3, #8]
 8004604:	461a      	mov	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	785b      	ldrb	r3, [r3, #1]
 800460a:	4413      	add	r3, r2
 800460c:	2b3f      	cmp	r3, #63	; 0x3f
 800460e:	dd01      	ble.n	8004614 <_ZN7SSD13069PutSymbolERKhP6font_th+0x32>
		/* Error */
		return 0;
 8004610:	2300      	movs	r3, #0
 8004612:	e060      	b.n	80046d6 <_ZN7SSD13069PutSymbolERKhP6font_th+0xf4>
	}

	/* Go through font */
	for (i = 0; i < font->font_height; i++) {
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	785b      	ldrb	r3, [r3, #1]
 800461c:	461a      	mov	r2, r3
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	4293      	cmp	r3, r2
 8004622:	d24d      	bcs.n	80046c0 <_ZN7SSD13069PutSymbolERKhP6font_th+0xde>
		b = font->data[symbol * font->font_height + i];
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	4619      	mov	r1, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	785b      	ldrb	r3, [r3, #1]
 8004632:	fb01 f303 	mul.w	r3, r1, r3
 8004636:	4619      	mov	r1, r3
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	440b      	add	r3, r1
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	4413      	add	r3, r2
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font->font_width; j++) {
 8004644:	2300      	movs	r3, #0
 8004646:	61bb      	str	r3, [r7, #24]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	4293      	cmp	r3, r2
 8004652:	d231      	bcs.n	80046b8 <_ZN7SSD13069PutSymbolERKhP6font_th+0xd6>
			if ((b << j) & 0x8000) {
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d010      	beq.n	8004686 <_ZN7SSD13069PutSymbolERKhP6font_th+0xa4>
				this->DrawPixel(this->x_ + j, (this->y_ + i), (uint8_t) color);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	88da      	ldrh	r2, [r3, #6]
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	b29b      	uxth	r3, r3
 800466c:	4413      	add	r3, r2
 800466e:	b299      	uxth	r1, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	891a      	ldrh	r2, [r3, #8]
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	b29b      	uxth	r3, r3
 8004678:	4413      	add	r3, r2
 800467a:	b29a      	uxth	r2, r3
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7ff feb7 	bl	80043f2 <_ZN7SSD13069DrawPixelEtth>
 8004684:	e014      	b.n	80046b0 <_ZN7SSD13069PutSymbolERKhP6font_th+0xce>
			}
			else {
				this->DrawPixel(this->x_ + j, (this->y_ + i), (uint8_t)!color);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	88da      	ldrh	r2, [r3, #6]
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	b29b      	uxth	r3, r3
 800468e:	4413      	add	r3, r2
 8004690:	b299      	uxth	r1, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	891a      	ldrh	r2, [r3, #8]
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	b29b      	uxth	r3, r3
 800469a:	4413      	add	r3, r2
 800469c:	b29a      	uxth	r2, r3
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7ff fea1 	bl	80043f2 <_ZN7SSD13069DrawPixelEtth>
		for (j = 0; j < font->font_width; j++) {
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	3301      	adds	r3, #1
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	e7c7      	b.n	8004648 <_ZN7SSD13069PutSymbolERKhP6font_th+0x66>
	for (i = 0; i < font->font_height; i++) {
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	3301      	adds	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	e7ab      	b.n	8004618 <_ZN7SSD13069PutSymbolERKhP6font_th+0x36>
			}
		}
	}

	/* Increase pointer */
	this->x_ += font->font_width;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	88da      	ldrh	r2, [r3, #6]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	4413      	add	r3, r2
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	80da      	strh	r2, [r3, #6]

	/* Return character written */
	return symbol;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	781b      	ldrb	r3, [r3, #0]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <_ZN7SSD13069PutStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP6font_th>:
  * @brief
  * @note
  * @param
  * @retval
  */
void SSD1306::PutString(string str, font_t* font, uint8_t pix_color){
 80046de:	b580      	push	{r7, lr}
 80046e0:	b086      	sub	sp, #24
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	607a      	str	r2, [r7, #4]
 80046ea:	70fb      	strb	r3, [r7, #3]
	/* Write characters */
	uint8_t i = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	75fb      	strb	r3, [r7, #23]
	char ch = str[0];
 80046f0:	2100      	movs	r1, #0
 80046f2:	68b8      	ldr	r0, [r7, #8]
 80046f4:	f007 f8d4 	bl	800b8a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80046f8:	4603      	mov	r3, r0
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	75bb      	strb	r3, [r7, #22]
	while (ch != '\0') {
 80046fe:	7dbb      	ldrb	r3, [r7, #22]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01b      	beq.n	800473c <_ZN7SSD13069PutStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP6font_th+0x5e>
		/* Write character by character */
		if (this->PutChar(ch, font, pix_color) != ch) {
 8004704:	78fb      	ldrb	r3, [r7, #3]
 8004706:	7db9      	ldrb	r1, [r7, #22]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f7ff feea 	bl	80044e4 <_ZN7SSD13067PutCharEcP6font_th>
 8004710:	4603      	mov	r3, r0
 8004712:	461a      	mov	r2, r3
 8004714:	7dbb      	ldrb	r3, [r7, #22]
 8004716:	4293      	cmp	r3, r2
 8004718:	bf14      	ite	ne
 800471a:	2301      	movne	r3, #1
 800471c:	2300      	moveq	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10d      	bne.n	8004740 <_ZN7SSD13069PutStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP6font_th+0x62>
			/* Return error */
			return;
		}

		/* Increase string pointer */
		i++;
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	3301      	adds	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
		ch = str[i];
 800472a:	7dfb      	ldrb	r3, [r7, #23]
 800472c:	4619      	mov	r1, r3
 800472e:	68b8      	ldr	r0, [r7, #8]
 8004730:	f007 f8b6 	bl	800b8a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004734:	4603      	mov	r3, r0
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	75bb      	strb	r3, [r7, #22]
	while (ch != '\0') {
 800473a:	e7e0      	b.n	80046fe <_ZN7SSD13069PutStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP6font_th+0x20>
	}

	/* Everything OK, zero should be returned */
	return;
 800473c:	bf00      	nop
 800473e:	e000      	b.n	8004742 <_ZN7SSD13069PutStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP6font_th+0x64>
			return;
 8004740:	bf00      	nop
}
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <_ZN7SSD13067PutCombEPKhP6font_th>:
  * @brief
  * @note
  * @param
  * @retval
  */
void SSD1306::PutComb(const uint8_t* comb, font_t* font, uint8_t pix_color){
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
 8004754:	70fb      	strb	r3, [r7, #3]
	/* Write characters */
	uint8_t i = 0;
 8004756:	2300      	movs	r3, #0
 8004758:	75fb      	strb	r3, [r7, #23]
	uint8_t symbol = comb[0];
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	75bb      	strb	r3, [r7, #22]
	while (i < 4) {
 8004760:	7dfb      	ldrb	r3, [r7, #23]
 8004762:	2b03      	cmp	r3, #3
 8004764:	d819      	bhi.n	800479a <_ZN7SSD13067PutCombEPKhP6font_th+0x52>
		/* Write character by character */
		if (this->PutSymbol(symbol, font, pix_color) != symbol) {
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	f107 0116 	add.w	r1, r7, #22
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7ff ff37 	bl	80045e2 <_ZN7SSD13069PutSymbolERKhP6font_th>
 8004774:	4603      	mov	r3, r0
 8004776:	461a      	mov	r2, r3
 8004778:	7dbb      	ldrb	r3, [r7, #22]
 800477a:	429a      	cmp	r2, r3
 800477c:	bf14      	ite	ne
 800477e:	2301      	movne	r3, #1
 8004780:	2300      	moveq	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <_ZN7SSD13067PutCombEPKhP6font_th+0x56>
			/* Return error */
			return;
		}

		/* Increase string pointer */
		i++;
 8004788:	7dfb      	ldrb	r3, [r7, #23]
 800478a:	3301      	adds	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
		symbol = comb[i];
 800478e:	7dfb      	ldrb	r3, [r7, #23]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	4413      	add	r3, r2
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	75bb      	strb	r3, [r7, #22]
	while (i < 4) {
 8004798:	e7e2      	b.n	8004760 <_ZN7SSD13067PutCombEPKhP6font_th+0x18>
	}

	/* Everything OK, zero should be returned */
	return;
 800479a:	bf00      	nop
 800479c:	e000      	b.n	80047a0 <_ZN7SSD13067PutCombEPKhP6font_th+0x58>
			return;
 800479e:	bf00      	nop
}
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <_ZN7SSD13066TurnONEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void SSD1306::TurnON(void) {
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
	this->SendCommand(0x8D);
 80047ae:	218d      	movs	r1, #141	; 0x8d
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f820 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
	this->SendCommand(0x14);
 80047b6:	2114      	movs	r1, #20
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f81c 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
	this->SendCommand(0xAF);
 80047be:	21af      	movs	r1, #175	; 0xaf
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f818 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
}
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <_ZN7SSD13067TurnOFFEv>:
  * @brief
  * @note
  * @param
  * @retval
  */
void SSD1306::TurnOFF(void) {
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
	this->SendCommand(0x8D);
 80047d6:	218d      	movs	r1, #141	; 0x8d
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f80c 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
	this->SendCommand(0x10);
 80047de:	2110      	movs	r1, #16
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f808 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
	this->SendCommand(0xAE);
 80047e6:	21ae      	movs	r1, #174	; 0xae
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f804 	bl	80047f6 <_ZN7SSD130611SendCommandEh>
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <_ZN7SSD130611SendCommandEh>:
  * @brief
  * @note
  * @param
  * @retval
  */
uint8_t SSD1306::SendCommand(uint8_t command){
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b086      	sub	sp, #24
 80047fa:	af02      	add	r7, sp, #8
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	460b      	mov	r3, r1
 8004800:	70fb      	strb	r3, [r7, #3]
	uint8_t command_buff[2];
	command_buff[0] = 0x00;
 8004802:	2300      	movs	r3, #0
 8004804:	733b      	strb	r3, [r7, #12]
	command_buff[1] = command;
 8004806:	78fb      	ldrb	r3, [r7, #3]
 8004808:	737b      	strb	r3, [r7, #13]
	uint8_t command_status = 0x03;	/* If nothing responds at HAL_I2C_Master_Transmit, but it will always I assume, this will be return value. */
 800480a:	2303      	movs	r3, #3
 800480c:	73fb      	strb	r3, [r7, #15]

	command_status = HAL_I2C_Master_Transmit(this->i2ch_, this->devAddr_, command_buff, 0x0002, SSD1306_I2C_TIMEOUT);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	791b      	ldrb	r3, [r3, #4]
 8004816:	b299      	uxth	r1, r3
 8004818:	f107 020c 	add.w	r2, r7, #12
 800481c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	2302      	movs	r3, #2
 8004824:	f002 fe9c 	bl	8007560 <HAL_I2C_Master_Transmit>
 8004828:	4603      	mov	r3, r0
 800482a:	73fb      	strb	r3, [r7, #15]
	return command_status;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <_ZN7SSD13068SendDataEPht>:
  * @brief
  * @note
  * @param
  * @retval
  */
uint8_t SSD1306::SendData(uint8_t* data, uint16_t count){
 8004836:	b580      	push	{r7, lr}
 8004838:	b086      	sub	sp, #24
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	4613      	mov	r3, r2
 8004842:	80fb      	strh	r3, [r7, #6]

	uint8_t command_status = SSD1306_ERROR;
 8004844:	2302      	movs	r3, #2
 8004846:	75fb      	strb	r3, [r7, #23]

	if(count == SSD1306_WIDTH){
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	2b80      	cmp	r3, #128	; 0x80
 800484c:	d107      	bne.n	800485e <_ZN7SSD13068SendDataEPht+0x28>
		command_status = this->SendRowData(data);
 800484e:	68b9      	ldr	r1, [r7, #8]
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f809 	bl	8004868 <_ZN7SSD130611SendRowDataEPh>
 8004856:	4603      	mov	r3, r0
 8004858:	75fb      	strb	r3, [r7, #23]
		return command_status;
 800485a:	7dfb      	ldrb	r3, [r7, #23]
 800485c:	e000      	b.n	8004860 <_ZN7SSD13068SendDataEPht+0x2a>
	}
	else{
		return SSD1306_ERROR;
 800485e:	2302      	movs	r3, #2
	}
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <_ZN7SSD130611SendRowDataEPh>:
  * @brief
  * @note
  * @param
  * @retval
  */
uint8_t SSD1306::SendRowData(uint8_t* data){
 8004868:	b580      	push	{r7, lr}
 800486a:	b0a6      	sub	sp, #152	; 0x98
 800486c:	af02      	add	r7, sp, #8
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]

	uint8_t data_buff[SSD1306_WIDTH+1];
	data_buff[0] = 0x40;
 8004872:	2340      	movs	r3, #64	; 0x40
 8004874:	723b      	strb	r3, [r7, #8]
	for(int i = 0; i < SSD1306_WIDTH; i++){
 8004876:	2300      	movs	r3, #0
 8004878:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800487c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004880:	2b7f      	cmp	r3, #127	; 0x7f
 8004882:	dc11      	bgt.n	80048a8 <_ZN7SSD130611SendRowDataEPh+0x40>
		data_buff[i + 1] = *(data + i);
 8004884:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	441a      	add	r2, r3
 800488c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004890:	3301      	adds	r3, #1
 8004892:	7812      	ldrb	r2, [r2, #0]
 8004894:	3390      	adds	r3, #144	; 0x90
 8004896:	443b      	add	r3, r7
 8004898:	f803 2c88 	strb.w	r2, [r3, #-136]
	for(int i = 0; i < SSD1306_WIDTH; i++){
 800489c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048a0:	3301      	adds	r3, #1
 80048a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80048a6:	e7e9      	b.n	800487c <_ZN7SSD130611SendRowDataEPh+0x14>
	}

	uint8_t command_status = 0x03;	/* If nothing responds at HAL_I2C_Master_Transmit, but it will always I assume, this will be return value. */
 80048a8:	2303      	movs	r3, #3
 80048aa:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

	//data_buff[0] = 0xC0;
	//command_status = HAL_I2C_Master_Transmit_DMA(this->i2ch_, this->devAddr_, data_buff, SSD1306_WIDTH + 1);
	command_status = HAL_I2C_Master_Transmit(this->i2ch_, this->devAddr_, data_buff, SSD1306_WIDTH + 1, SSD1306_I2C_TIMEOUT);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	791b      	ldrb	r3, [r3, #4]
 80048b6:	b299      	uxth	r1, r3
 80048b8:	f107 0208 	add.w	r2, r7, #8
 80048bc:	f644 6320 	movw	r3, #20000	; 0x4e20
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	2381      	movs	r3, #129	; 0x81
 80048c4:	f002 fe4c 	bl	8007560 <HAL_I2C_Master_Transmit>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

	//for(int j = 0; j < 1000; j++);

	return command_status;
 80048ce:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3790      	adds	r7, #144	; 0x90
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048e2:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <HAL_MspInit+0x44>)
 80048e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e6:	4a0e      	ldr	r2, [pc, #56]	; (8004920 <HAL_MspInit+0x44>)
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	6613      	str	r3, [r2, #96]	; 0x60
 80048ee:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <HAL_MspInit+0x44>)
 80048f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	607b      	str	r3, [r7, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048fa:	4b09      	ldr	r3, [pc, #36]	; (8004920 <HAL_MspInit+0x44>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	4a08      	ldr	r2, [pc, #32]	; (8004920 <HAL_MspInit+0x44>)
 8004900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004904:	6593      	str	r3, [r2, #88]	; 0x58
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_MspInit+0x44>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40021000 	.word	0x40021000

08004924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004928:	e7fe      	b.n	8004928 <NMI_Handler+0x4>

0800492a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800492a:	b480      	push	{r7}
 800492c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800492e:	e7fe      	b.n	800492e <HardFault_Handler+0x4>

08004930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004934:	e7fe      	b.n	8004934 <MemManage_Handler+0x4>

08004936 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004936:	b480      	push	{r7}
 8004938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800493a:	e7fe      	b.n	800493a <BusFault_Handler+0x4>

0800493c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004940:	e7fe      	b.n	8004940 <UsageFault_Handler+0x4>

08004942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004942:	b480      	push	{r7}
 8004944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004946:	bf00      	nop
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800495e:	b480      	push	{r7}
 8004960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004970:	f000 fc24 	bl	80051bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004974:	bf00      	nop
 8004976:	bd80      	pop	{r7, pc}

08004978 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800497c:	4802      	ldr	r0, [pc, #8]	; (8004988 <DMA1_Channel4_IRQHandler+0x10>)
 800497e:	f002 fabe 	bl	8006efe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004982:	bf00      	nop
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	200001cc 	.word	0x200001cc

0800498c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004990:	4803      	ldr	r0, [pc, #12]	; (80049a0 <ADC1_2_IRQHandler+0x14>)
 8004992:	f001 f8bf 	bl	8005b14 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004996:	4803      	ldr	r0, [pc, #12]	; (80049a4 <ADC1_2_IRQHandler+0x18>)
 8004998:	f001 f8bc 	bl	8005b14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800499c:	bf00      	nop
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	200000a8 	.word	0x200000a8
 80049a4:	2000010c 	.word	0x2000010c

080049a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80049ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80049b0:	f002 fd2e 	bl	8007410 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80049b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80049b8:	f002 fd2a 	bl	8007410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80049bc:	bf00      	nop
 80049be:	bd80      	pop	{r7, pc}

080049c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80049c4:	4802      	ldr	r0, [pc, #8]	; (80049d0 <TIM2_IRQHandler+0x10>)
 80049c6:	f004 ff1e 	bl	8009806 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80049ca:	bf00      	nop
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20000228 	.word	0x20000228

080049d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80049d8:	4802      	ldr	r0, [pc, #8]	; (80049e4 <TIM3_IRQHandler+0x10>)
 80049da:	f004 ff14 	bl	8009806 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80049de:	bf00      	nop
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000274 	.word	0x20000274

080049e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80049ec:	4802      	ldr	r0, [pc, #8]	; (80049f8 <TIM4_IRQHandler+0x10>)
 80049ee:	f004 ff0a 	bl	8009806 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80049f2:	bf00      	nop
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	200002c0 	.word	0x200002c0

080049fc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004a00:	4802      	ldr	r0, [pc, #8]	; (8004a0c <I2C2_EV_IRQHandler+0x10>)
 8004a02:	f002 ffa8 	bl	8007956 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004a06:	bf00      	nop
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000178 	.word	0x20000178

08004a10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a14:	4802      	ldr	r0, [pc, #8]	; (8004a20 <USART2_IRQHandler+0x10>)
 8004a16:	f005 fc19 	bl	800a24c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a1a:	bf00      	nop
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000358 	.word	0x20000358

08004a24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004a28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004a2c:	f002 fcf0 	bl	8007410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a30:	bf00      	nop
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004a38:	4802      	ldr	r0, [pc, #8]	; (8004a44 <TIM5_IRQHandler+0x10>)
 8004a3a:	f004 fee4 	bl	8009806 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004a3e:	bf00      	nop
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	2000030c 	.word	0x2000030c

08004a48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
	return 1;
 8004a4c:	2301      	movs	r3, #1
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <_kill>:

int _kill(int pid, int sig)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004a62:	f007 f801 	bl	800ba68 <__errno>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2216      	movs	r2, #22
 8004a6a:	601a      	str	r2, [r3, #0]
	return -1;
 8004a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <_exit>:

void _exit (int status)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004a80:	f04f 31ff 	mov.w	r1, #4294967295
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff ffe7 	bl	8004a58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004a8a:	e7fe      	b.n	8004a8a <_exit+0x12>

08004a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a94:	4a14      	ldr	r2, [pc, #80]	; (8004ae8 <_sbrk+0x5c>)
 8004a96:	4b15      	ldr	r3, [pc, #84]	; (8004aec <_sbrk+0x60>)
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004aa0:	4b13      	ldr	r3, [pc, #76]	; (8004af0 <_sbrk+0x64>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d102      	bne.n	8004aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004aa8:	4b11      	ldr	r3, [pc, #68]	; (8004af0 <_sbrk+0x64>)
 8004aaa:	4a12      	ldr	r2, [pc, #72]	; (8004af4 <_sbrk+0x68>)
 8004aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004aae:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <_sbrk+0x64>)
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d207      	bcs.n	8004acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004abc:	f006 ffd4 	bl	800ba68 <__errno>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	220c      	movs	r2, #12
 8004ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aca:	e009      	b.n	8004ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004acc:	4b08      	ldr	r3, [pc, #32]	; (8004af0 <_sbrk+0x64>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ad2:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <_sbrk+0x64>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4413      	add	r3, r2
 8004ada:	4a05      	ldr	r2, [pc, #20]	; (8004af0 <_sbrk+0x64>)
 8004adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ade:	68fb      	ldr	r3, [r7, #12]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20018000 	.word	0x20018000
 8004aec:	00000400 	.word	0x00000400
 8004af0:	20000224 	.word	0x20000224
 8004af4:	200003f8 	.word	0x200003f8

08004af8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <SystemInit+0x20>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b02:	4a05      	ldr	r2, [pc, #20]	; (8004b18 <SystemInit+0x20>)
 8004b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004b0c:	bf00      	nop
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	e000ed00 	.word	0xe000ed00

08004b1c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b22:	f107 0310 	add.w	r3, r7, #16
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	605a      	str	r2, [r3, #4]
 8004b2c:	609a      	str	r2, [r3, #8]
 8004b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b30:	1d3b      	adds	r3, r7, #4
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	605a      	str	r2, [r3, #4]
 8004b38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b3a:	4b1e      	ldr	r3, [pc, #120]	; (8004bb4 <MX_TIM2_Init+0x98>)
 8004b3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8004b42:	4b1c      	ldr	r3, [pc, #112]	; (8004bb4 <MX_TIM2_Init+0x98>)
 8004b44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b4a:	4b1a      	ldr	r3, [pc, #104]	; (8004bb4 <MX_TIM2_Init+0x98>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400;
 8004b50:	4b18      	ldr	r3, [pc, #96]	; (8004bb4 <MX_TIM2_Init+0x98>)
 8004b52:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004b56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b58:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <MX_TIM2_Init+0x98>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b5e:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <MX_TIM2_Init+0x98>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004b64:	4813      	ldr	r0, [pc, #76]	; (8004bb4 <MX_TIM2_Init+0x98>)
 8004b66:	f004 fcc7 	bl	80094f8 <HAL_TIM_Base_Init>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8004b70:	f7fc fadc 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004b7a:	f107 0310 	add.w	r3, r7, #16
 8004b7e:	4619      	mov	r1, r3
 8004b80:	480c      	ldr	r0, [pc, #48]	; (8004bb4 <MX_TIM2_Init+0x98>)
 8004b82:	f004 ff5f 	bl	8009a44 <HAL_TIM_ConfigClockSource>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8004b8c:	f7fc face 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b90:	2300      	movs	r3, #0
 8004b92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004b98:	1d3b      	adds	r3, r7, #4
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4805      	ldr	r0, [pc, #20]	; (8004bb4 <MX_TIM2_Init+0x98>)
 8004b9e:	f005 f977 	bl	8009e90 <HAL_TIMEx_MasterConfigSynchronization>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8004ba8:	f7fc fac0 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004bac:	bf00      	nop
 8004bae:	3720      	adds	r7, #32
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000228 	.word	0x20000228

08004bb8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bbe:	f107 0310 	add.w	r3, r7, #16
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
 8004bc8:	609a      	str	r2, [r3, #8]
 8004bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bcc:	1d3b      	adds	r3, r7, #4
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	605a      	str	r2, [r3, #4]
 8004bd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004bd6:	4b1e      	ldr	r3, [pc, #120]	; (8004c50 <MX_TIM3_Init+0x98>)
 8004bd8:	4a1e      	ldr	r2, [pc, #120]	; (8004c54 <MX_TIM3_Init+0x9c>)
 8004bda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000;
 8004bdc:	4b1c      	ldr	r3, [pc, #112]	; (8004c50 <MX_TIM3_Init+0x98>)
 8004bde:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004be2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004be4:	4b1a      	ldr	r3, [pc, #104]	; (8004c50 <MX_TIM3_Init+0x98>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8004bea:	4b19      	ldr	r3, [pc, #100]	; (8004c50 <MX_TIM3_Init+0x98>)
 8004bec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004bf0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bf2:	4b17      	ldr	r3, [pc, #92]	; (8004c50 <MX_TIM3_Init+0x98>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bf8:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <MX_TIM3_Init+0x98>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004bfe:	4814      	ldr	r0, [pc, #80]	; (8004c50 <MX_TIM3_Init+0x98>)
 8004c00:	f004 fc7a 	bl	80094f8 <HAL_TIM_Base_Init>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8004c0a:	f7fc fa8f 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004c14:	f107 0310 	add.w	r3, r7, #16
 8004c18:	4619      	mov	r1, r3
 8004c1a:	480d      	ldr	r0, [pc, #52]	; (8004c50 <MX_TIM3_Init+0x98>)
 8004c1c:	f004 ff12 	bl	8009a44 <HAL_TIM_ConfigClockSource>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8004c26:	f7fc fa81 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c32:	1d3b      	adds	r3, r7, #4
 8004c34:	4619      	mov	r1, r3
 8004c36:	4806      	ldr	r0, [pc, #24]	; (8004c50 <MX_TIM3_Init+0x98>)
 8004c38:	f005 f92a 	bl	8009e90 <HAL_TIMEx_MasterConfigSynchronization>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8004c42:	f7fc fa73 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004c46:	bf00      	nop
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000274 	.word	0x20000274
 8004c54:	40000400 	.word	0x40000400

08004c58 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c5e:	f107 0310 	add.w	r3, r7, #16
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c6c:	1d3b      	adds	r3, r7, #4
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004c76:	4b1d      	ldr	r3, [pc, #116]	; (8004cec <MX_TIM4_Init+0x94>)
 8004c78:	4a1d      	ldr	r2, [pc, #116]	; (8004cf0 <MX_TIM4_Init+0x98>)
 8004c7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 8004c7c:	4b1b      	ldr	r3, [pc, #108]	; (8004cec <MX_TIM4_Init+0x94>)
 8004c7e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004c82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c84:	4b19      	ldr	r3, [pc, #100]	; (8004cec <MX_TIM4_Init+0x94>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60;
 8004c8a:	4b18      	ldr	r3, [pc, #96]	; (8004cec <MX_TIM4_Init+0x94>)
 8004c8c:	223c      	movs	r2, #60	; 0x3c
 8004c8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c90:	4b16      	ldr	r3, [pc, #88]	; (8004cec <MX_TIM4_Init+0x94>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c96:	4b15      	ldr	r3, [pc, #84]	; (8004cec <MX_TIM4_Init+0x94>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004c9c:	4813      	ldr	r0, [pc, #76]	; (8004cec <MX_TIM4_Init+0x94>)
 8004c9e:	f004 fc2b 	bl	80094f8 <HAL_TIM_Base_Init>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004ca8:	f7fc fa40 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004cb2:	f107 0310 	add.w	r3, r7, #16
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	480c      	ldr	r0, [pc, #48]	; (8004cec <MX_TIM4_Init+0x94>)
 8004cba:	f004 fec3 	bl	8009a44 <HAL_TIM_ConfigClockSource>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004cc4:	f7fc fa32 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004cd0:	1d3b      	adds	r3, r7, #4
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4805      	ldr	r0, [pc, #20]	; (8004cec <MX_TIM4_Init+0x94>)
 8004cd6:	f005 f8db 	bl	8009e90 <HAL_TIMEx_MasterConfigSynchronization>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004ce0:	f7fc fa24 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004ce4:	bf00      	nop
 8004ce6:	3720      	adds	r7, #32
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	200002c0 	.word	0x200002c0
 8004cf0:	40000800 	.word	0x40000800

08004cf4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cfa:	f107 0310 	add.w	r3, r7, #16
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	605a      	str	r2, [r3, #4]
 8004d04:	609a      	str	r2, [r3, #8]
 8004d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d08:	1d3b      	adds	r3, r7, #4
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	605a      	str	r2, [r3, #4]
 8004d10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004d12:	4b1e      	ldr	r3, [pc, #120]	; (8004d8c <MX_TIM5_Init+0x98>)
 8004d14:	4a1e      	ldr	r2, [pc, #120]	; (8004d90 <MX_TIM5_Init+0x9c>)
 8004d16:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1000;
 8004d18:	4b1c      	ldr	r3, [pc, #112]	; (8004d8c <MX_TIM5_Init+0x98>)
 8004d1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d20:	4b1a      	ldr	r3, [pc, #104]	; (8004d8c <MX_TIM5_Init+0x98>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 331;
 8004d26:	4b19      	ldr	r3, [pc, #100]	; (8004d8c <MX_TIM5_Init+0x98>)
 8004d28:	f240 124b 	movw	r2, #331	; 0x14b
 8004d2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d2e:	4b17      	ldr	r3, [pc, #92]	; (8004d8c <MX_TIM5_Init+0x98>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d34:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <MX_TIM5_Init+0x98>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004d3a:	4814      	ldr	r0, [pc, #80]	; (8004d8c <MX_TIM5_Init+0x98>)
 8004d3c:	f004 fbdc 	bl	80094f8 <HAL_TIM_Base_Init>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8004d46:	f7fc f9f1 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004d50:	f107 0310 	add.w	r3, r7, #16
 8004d54:	4619      	mov	r1, r3
 8004d56:	480d      	ldr	r0, [pc, #52]	; (8004d8c <MX_TIM5_Init+0x98>)
 8004d58:	f004 fe74 	bl	8009a44 <HAL_TIM_ConfigClockSource>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8004d62:	f7fc f9e3 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d66:	2300      	movs	r3, #0
 8004d68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004d6e:	1d3b      	adds	r3, r7, #4
 8004d70:	4619      	mov	r1, r3
 8004d72:	4806      	ldr	r0, [pc, #24]	; (8004d8c <MX_TIM5_Init+0x98>)
 8004d74:	f005 f88c 	bl	8009e90 <HAL_TIMEx_MasterConfigSynchronization>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8004d7e:	f7fc f9d5 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004d82:	bf00      	nop
 8004d84:	3720      	adds	r7, #32
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	2000030c 	.word	0x2000030c
 8004d90:	40000c00 	.word	0x40000c00

08004d94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da4:	d114      	bne.n	8004dd0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004da6:	4b33      	ldr	r3, [pc, #204]	; (8004e74 <HAL_TIM_Base_MspInit+0xe0>)
 8004da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004daa:	4a32      	ldr	r2, [pc, #200]	; (8004e74 <HAL_TIM_Base_MspInit+0xe0>)
 8004dac:	f043 0301 	orr.w	r3, r3, #1
 8004db0:	6593      	str	r3, [r2, #88]	; 0x58
 8004db2:	4b30      	ldr	r3, [pc, #192]	; (8004e74 <HAL_TIM_Base_MspInit+0xe0>)
 8004db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	201c      	movs	r0, #28
 8004dc4:	f001 ff2d 	bl	8006c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004dc8:	201c      	movs	r0, #28
 8004dca:	f001 ff46 	bl	8006c5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004dce:	e04c      	b.n	8004e6a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a28      	ldr	r2, [pc, #160]	; (8004e78 <HAL_TIM_Base_MspInit+0xe4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d114      	bne.n	8004e04 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004dda:	4b26      	ldr	r3, [pc, #152]	; (8004e74 <HAL_TIM_Base_MspInit+0xe0>)
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dde:	4a25      	ldr	r2, [pc, #148]	; (8004e74 <HAL_TIM_Base_MspInit+0xe0>)
 8004de0:	f043 0302 	orr.w	r3, r3, #2
 8004de4:	6593      	str	r3, [r2, #88]	; 0x58
 8004de6:	4b23      	ldr	r3, [pc, #140]	; (8004e74 <HAL_TIM_Base_MspInit+0xe0>)
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004df2:	2200      	movs	r2, #0
 8004df4:	2100      	movs	r1, #0
 8004df6:	201d      	movs	r0, #29
 8004df8:	f001 ff13 	bl	8006c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004dfc:	201d      	movs	r0, #29
 8004dfe:	f001 ff2c 	bl	8006c5a <HAL_NVIC_EnableIRQ>
}
 8004e02:	e032      	b.n	8004e6a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1c      	ldr	r2, [pc, #112]	; (8004e7c <HAL_TIM_Base_MspInit+0xe8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d114      	bne.n	8004e38 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e0e:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <HAL_TIM_Base_MspInit+0xe0>)
 8004e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e12:	4a18      	ldr	r2, [pc, #96]	; (8004e74 <HAL_TIM_Base_MspInit+0xe0>)
 8004e14:	f043 0304 	orr.w	r3, r3, #4
 8004e18:	6593      	str	r3, [r2, #88]	; 0x58
 8004e1a:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <HAL_TIM_Base_MspInit+0xe0>)
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004e26:	2200      	movs	r2, #0
 8004e28:	2100      	movs	r1, #0
 8004e2a:	201e      	movs	r0, #30
 8004e2c:	f001 fef9 	bl	8006c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004e30:	201e      	movs	r0, #30
 8004e32:	f001 ff12 	bl	8006c5a <HAL_NVIC_EnableIRQ>
}
 8004e36:	e018      	b.n	8004e6a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a10      	ldr	r2, [pc, #64]	; (8004e80 <HAL_TIM_Base_MspInit+0xec>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d113      	bne.n	8004e6a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004e42:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <HAL_TIM_Base_MspInit+0xe0>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e46:	4a0b      	ldr	r2, [pc, #44]	; (8004e74 <HAL_TIM_Base_MspInit+0xe0>)
 8004e48:	f043 0308 	orr.w	r3, r3, #8
 8004e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e4e:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <HAL_TIM_Base_MspInit+0xe0>)
 8004e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	60bb      	str	r3, [r7, #8]
 8004e58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	2032      	movs	r0, #50	; 0x32
 8004e60:	f001 fedf 	bl	8006c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004e64:	2032      	movs	r0, #50	; 0x32
 8004e66:	f001 fef8 	bl	8006c5a <HAL_NVIC_EnableIRQ>
}
 8004e6a:	bf00      	nop
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40021000 	.word	0x40021000
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40000c00 	.word	0x40000c00

08004e84 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END TIM5_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a33      	ldr	r2, [pc, #204]	; (8004f5c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d05f      	beq.n	8004f54 <HAL_TIM_PeriodElapsedCallback+0xd0>
		//TODO
		/* Multiplexing timer */
		//MultiplexSevenSegDisplay();
	}
	else if(htim == &htim3){
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a32      	ldr	r2, [pc, #200]	; (8004f60 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d102      	bne.n	8004ea2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		//TODO
		Timer3Callback();
 8004e9c:	f7fc f810 	bl	8000ec0 <Timer3Callback>
			break;
		default:
			break;
		}
	}
}
 8004ea0:	e058      	b.n	8004f54 <HAL_TIM_PeriodElapsedCallback+0xd0>
	else if(htim == &htim4){
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2f      	ldr	r2, [pc, #188]	; (8004f64 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d14b      	bne.n	8004f42 <HAL_TIM_PeriodElapsedCallback+0xbe>
		HAL_TIM_Base_Stop(&htim4);
 8004eaa:	482e      	ldr	r0, [pc, #184]	; (8004f64 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004eac:	f004 fbe4 	bl	8009678 <HAL_TIM_Base_Stop>
		switch(ButtonEvent){
 8004eb0:	4b2d      	ldr	r3, [pc, #180]	; (8004f68 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d01a      	beq.n	8004eee <HAL_TIM_PeriodElapsedCallback+0x6a>
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	dc44      	bgt.n	8004f46 <HAL_TIM_PeriodElapsedCallback+0xc2>
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d02b      	beq.n	8004f18 <HAL_TIM_PeriodElapsedCallback+0x94>
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d140      	bne.n	8004f46 <HAL_TIM_PeriodElapsedCallback+0xc2>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == (GPIO_PinState) BUTTON_PRESSED){
 8004ec4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ec8:	4828      	ldr	r0, [pc, #160]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004eca:	f002 fa71 	bl	80073b0 <HAL_GPIO_ReadPin>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d13a      	bne.n	8004f4a <HAL_TIM_PeriodElapsedCallback+0xc6>
				ButtonEvent		= BUTTON_NONE;
 8004ed4:	4b24      	ldr	r3, [pc, #144]	; (8004f68 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	701a      	strb	r2, [r3, #0]
				ButtonPressed	|= BUTTON_1;
 8004eda:	4b25      	ldr	r3, [pc, #148]	; (8004f70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	f043 0302 	orr.w	r3, r3, #2
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	4b22      	ldr	r3, [pc, #136]	; (8004f70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004ee6:	701a      	strb	r2, [r3, #0]
				ButtonPressedEventCallback();
 8004ee8:	f7fc f81a 	bl	8000f20 <ButtonPressedEventCallback>
			break;
 8004eec:	e02d      	b.n	8004f4a <HAL_TIM_PeriodElapsedCallback+0xc6>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == (GPIO_PinState) BUTTON_PRESSED){
 8004eee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ef2:	481e      	ldr	r0, [pc, #120]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004ef4:	f002 fa5c 	bl	80073b0 <HAL_GPIO_ReadPin>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d127      	bne.n	8004f4e <HAL_TIM_PeriodElapsedCallback+0xca>
				ButtonEvent		= BUTTON_NONE;
 8004efe:	4b1a      	ldr	r3, [pc, #104]	; (8004f68 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
				ButtonPressed	|= BUTTON_2;
 8004f04:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	f043 0304 	orr.w	r3, r3, #4
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004f10:	701a      	strb	r2, [r3, #0]
				ButtonPressedEventCallback();
 8004f12:	f7fc f805 	bl	8000f20 <ButtonPressedEventCallback>
			break;
 8004f16:	e01a      	b.n	8004f4e <HAL_TIM_PeriodElapsedCallback+0xca>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == (GPIO_PinState) BUTTON_PRESSED){
 8004f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f1c:	4813      	ldr	r0, [pc, #76]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004f1e:	f002 fa47 	bl	80073b0 <HAL_GPIO_ReadPin>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d114      	bne.n	8004f52 <HAL_TIM_PeriodElapsedCallback+0xce>
				ButtonEvent		= BUTTON_NONE;
 8004f28:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	701a      	strb	r2, [r3, #0]
				ButtonPressed	|= BLUE_BUTTON;
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	f043 0301 	orr.w	r3, r3, #1
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	4b0d      	ldr	r3, [pc, #52]	; (8004f70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004f3a:	701a      	strb	r2, [r3, #0]
				ButtonPressedEventCallback();
 8004f3c:	f7fb fff0 	bl	8000f20 <ButtonPressedEventCallback>
			break;
 8004f40:	e007      	b.n	8004f52 <HAL_TIM_PeriodElapsedCallback+0xce>
	}
 8004f42:	bf00      	nop
 8004f44:	e006      	b.n	8004f54 <HAL_TIM_PeriodElapsedCallback+0xd0>
			break;
 8004f46:	bf00      	nop
 8004f48:	e004      	b.n	8004f54 <HAL_TIM_PeriodElapsedCallback+0xd0>
			break;
 8004f4a:	bf00      	nop
 8004f4c:	e002      	b.n	8004f54 <HAL_TIM_PeriodElapsedCallback+0xd0>
			break;
 8004f4e:	bf00      	nop
 8004f50:	e000      	b.n	8004f54 <HAL_TIM_PeriodElapsedCallback+0xd0>
			break;
 8004f52:	bf00      	nop
}
 8004f54:	bf00      	nop
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	20000228 	.word	0x20000228
 8004f60:	20000274 	.word	0x20000274
 8004f64:	200002c0 	.word	0x200002c0
 8004f68:	20000174 	.word	0x20000174
 8004f6c:	48000800 	.word	0x48000800
 8004f70:	20000175 	.word	0x20000175

08004f74 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004f78:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <MX_USART2_UART_Init+0x58>)
 8004f7a:	4a15      	ldr	r2, [pc, #84]	; (8004fd0 <MX_USART2_UART_Init+0x5c>)
 8004f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004f7e:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <MX_USART2_UART_Init+0x58>)
 8004f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f86:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <MX_USART2_UART_Init+0x58>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f8c:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <MX_USART2_UART_Init+0x58>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f92:	4b0e      	ldr	r3, [pc, #56]	; (8004fcc <MX_USART2_UART_Init+0x58>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f98:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <MX_USART2_UART_Init+0x58>)
 8004f9a:	220c      	movs	r2, #12
 8004f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f9e:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <MX_USART2_UART_Init+0x58>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fa4:	4b09      	ldr	r3, [pc, #36]	; (8004fcc <MX_USART2_UART_Init+0x58>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004faa:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <MX_USART2_UART_Init+0x58>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <MX_USART2_UART_Init+0x58>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004fb6:	4805      	ldr	r0, [pc, #20]	; (8004fcc <MX_USART2_UART_Init+0x58>)
 8004fb8:	f005 f810 	bl	8009fdc <HAL_UART_Init>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004fc2:	f7fc f8b3 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004fc6:	bf00      	nop
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000358 	.word	0x20000358
 8004fd0:	40004400 	.word	0x40004400

08004fd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b0ac      	sub	sp, #176	; 0xb0
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fdc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	609a      	str	r2, [r3, #8]
 8004fe8:	60da      	str	r2, [r3, #12]
 8004fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fec:	f107 0314 	add.w	r3, r7, #20
 8004ff0:	2288      	movs	r2, #136	; 0x88
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f006 fd7f 	bl	800baf8 <memset>
  if(uartHandle->Instance==USART2)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a25      	ldr	r2, [pc, #148]	; (8005094 <HAL_UART_MspInit+0xc0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d143      	bne.n	800508c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005004:	2302      	movs	r3, #2
 8005006:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005008:	2300      	movs	r3, #0
 800500a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800500c:	f107 0314 	add.w	r3, r7, #20
 8005010:	4618      	mov	r0, r3
 8005012:	f003 fdb5 	bl	8008b80 <HAL_RCCEx_PeriphCLKConfig>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800501c:	f7fc f886 	bl	800112c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005020:	4b1d      	ldr	r3, [pc, #116]	; (8005098 <HAL_UART_MspInit+0xc4>)
 8005022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005024:	4a1c      	ldr	r2, [pc, #112]	; (8005098 <HAL_UART_MspInit+0xc4>)
 8005026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800502a:	6593      	str	r3, [r2, #88]	; 0x58
 800502c:	4b1a      	ldr	r3, [pc, #104]	; (8005098 <HAL_UART_MspInit+0xc4>)
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005038:	4b17      	ldr	r3, [pc, #92]	; (8005098 <HAL_UART_MspInit+0xc4>)
 800503a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503c:	4a16      	ldr	r2, [pc, #88]	; (8005098 <HAL_UART_MspInit+0xc4>)
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005044:	4b14      	ldr	r3, [pc, #80]	; (8005098 <HAL_UART_MspInit+0xc4>)
 8005046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005050:	230c      	movs	r3, #12
 8005052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005056:	2302      	movs	r3, #2
 8005058:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505c:	2300      	movs	r3, #0
 800505e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005062:	2303      	movs	r3, #3
 8005064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005068:	2307      	movs	r3, #7
 800506a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800506e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005072:	4619      	mov	r1, r3
 8005074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005078:	f001 fff0 	bl	800705c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800507c:	2200      	movs	r2, #0
 800507e:	2100      	movs	r1, #0
 8005080:	2026      	movs	r0, #38	; 0x26
 8005082:	f001 fdce 	bl	8006c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005086:	2026      	movs	r0, #38	; 0x26
 8005088:	f001 fde7 	bl	8006c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800508c:	bf00      	nop
 800508e:	37b0      	adds	r7, #176	; 0xb0
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40004400 	.word	0x40004400
 8005098:	40021000 	.word	0x40021000

0800509c <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
		//TODO
	}
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80050b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80050b4:	f7ff fd20 	bl	8004af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050b8:	480c      	ldr	r0, [pc, #48]	; (80050ec <LoopForever+0x6>)
  ldr r1, =_edata
 80050ba:	490d      	ldr	r1, [pc, #52]	; (80050f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80050bc:	4a0d      	ldr	r2, [pc, #52]	; (80050f4 <LoopForever+0xe>)
  movs r3, #0
 80050be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050c0:	e002      	b.n	80050c8 <LoopCopyDataInit>

080050c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050c6:	3304      	adds	r3, #4

080050c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050cc:	d3f9      	bcc.n	80050c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050ce:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80050d0:	4c0a      	ldr	r4, [pc, #40]	; (80050fc <LoopForever+0x16>)
  movs r3, #0
 80050d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050d4:	e001      	b.n	80050da <LoopFillZerobss>

080050d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050d8:	3204      	adds	r2, #4

080050da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050dc:	d3fb      	bcc.n	80050d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050de:	f006 fcc9 	bl	800ba74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80050e2:	f7fb fd41 	bl	8000b68 <main>

080050e6 <LoopForever>:

LoopForever:
    b LoopForever
 80050e6:	e7fe      	b.n	80050e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80050e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80050ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050f0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80050f4:	0800d1a4 	.word	0x0800d1a4
  ldr r2, =_sbss
 80050f8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80050fc:	200003f4 	.word	0x200003f4

08005100 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005100:	e7fe      	b.n	8005100 <ADC3_IRQHandler>
	...

08005104 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800510e:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <HAL_Init+0x3c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a0b      	ldr	r2, [pc, #44]	; (8005140 <HAL_Init+0x3c>)
 8005114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005118:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800511a:	2003      	movs	r0, #3
 800511c:	f001 fd76 	bl	8006c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005120:	2000      	movs	r0, #0
 8005122:	f000 f80f 	bl	8005144 <HAL_InitTick>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	71fb      	strb	r3, [r7, #7]
 8005130:	e001      	b.n	8005136 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005132:	f7ff fbd3 	bl	80048dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005136:	79fb      	ldrb	r3, [r7, #7]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40022000 	.word	0x40022000

08005144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005150:	4b17      	ldr	r3, [pc, #92]	; (80051b0 <HAL_InitTick+0x6c>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d023      	beq.n	80051a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005158:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <HAL_InitTick+0x70>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	4b14      	ldr	r3, [pc, #80]	; (80051b0 <HAL_InitTick+0x6c>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	4619      	mov	r1, r3
 8005162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005166:	fbb3 f3f1 	udiv	r3, r3, r1
 800516a:	fbb2 f3f3 	udiv	r3, r2, r3
 800516e:	4618      	mov	r0, r3
 8005170:	f001 fd81 	bl	8006c76 <HAL_SYSTICK_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10f      	bne.n	800519a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b0f      	cmp	r3, #15
 800517e:	d809      	bhi.n	8005194 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005180:	2200      	movs	r2, #0
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	f04f 30ff 	mov.w	r0, #4294967295
 8005188:	f001 fd4b 	bl	8006c22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800518c:	4a0a      	ldr	r2, [pc, #40]	; (80051b8 <HAL_InitTick+0x74>)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	e007      	b.n	80051a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]
 8005198:	e004      	b.n	80051a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	73fb      	strb	r3, [r7, #15]
 800519e:	e001      	b.n	80051a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000018 	.word	0x20000018
 80051b4:	20000010 	.word	0x20000010
 80051b8:	20000014 	.word	0x20000014

080051bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80051c0:	4b06      	ldr	r3, [pc, #24]	; (80051dc <HAL_IncTick+0x20>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <HAL_IncTick+0x24>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4413      	add	r3, r2
 80051cc:	4a04      	ldr	r2, [pc, #16]	; (80051e0 <HAL_IncTick+0x24>)
 80051ce:	6013      	str	r3, [r2, #0]
}
 80051d0:	bf00      	nop
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20000018 	.word	0x20000018
 80051e0:	200003dc 	.word	0x200003dc

080051e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  return uwTick;
 80051e8:	4b03      	ldr	r3, [pc, #12]	; (80051f8 <HAL_GetTick+0x14>)
 80051ea:	681b      	ldr	r3, [r3, #0]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	200003dc 	.word	0x200003dc

080051fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	609a      	str	r2, [r3, #8]
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	609a      	str	r2, [r3, #8]
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005258:	4618      	mov	r0, r3
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3360      	adds	r3, #96	; 0x60
 8005276:	461a      	mov	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <LL_ADC_SetOffset+0x44>)
 8005286:	4013      	ands	r3, r2
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	4313      	orrs	r3, r2
 8005294:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800529c:	bf00      	nop
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	03fff000 	.word	0x03fff000

080052ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3360      	adds	r3, #96	; 0x60
 80052ba:	461a      	mov	r2, r3
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3360      	adds	r3, #96	; 0x60
 80052e8:	461a      	mov	r2, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	431a      	orrs	r2, r3
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3330      	adds	r3, #48	; 0x30
 8005344:	461a      	mov	r2, r3
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	0a1b      	lsrs	r3, r3, #8
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	f003 030c 	and.w	r3, r3, #12
 8005350:	4413      	add	r3, r2
 8005352:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 031f 	and.w	r3, r3, #31
 800535e:	211f      	movs	r1, #31
 8005360:	fa01 f303 	lsl.w	r3, r1, r3
 8005364:	43db      	mvns	r3, r3
 8005366:	401a      	ands	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	0e9b      	lsrs	r3, r3, #26
 800536c:	f003 011f 	and.w	r1, r3, #31
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f003 031f 	and.w	r3, r3, #31
 8005376:	fa01 f303 	lsl.w	r3, r1, r3
 800537a:	431a      	orrs	r2, r3
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005380:	bf00      	nop
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005398:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b087      	sub	sp, #28
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3314      	adds	r3, #20
 80053c2:	461a      	mov	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	0e5b      	lsrs	r3, r3, #25
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	4413      	add	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	0d1b      	lsrs	r3, r3, #20
 80053da:	f003 031f 	and.w	r3, r3, #31
 80053de:	2107      	movs	r1, #7
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	43db      	mvns	r3, r3
 80053e6:	401a      	ands	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	0d1b      	lsrs	r3, r3, #20
 80053ec:	f003 031f 	and.w	r3, r3, #31
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	fa01 f303 	lsl.w	r3, r1, r3
 80053f6:	431a      	orrs	r2, r3
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80053fc:	bf00      	nop
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005420:	43db      	mvns	r3, r3
 8005422:	401a      	ands	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f003 0318 	and.w	r3, r3, #24
 800542a:	4908      	ldr	r1, [pc, #32]	; (800544c <LL_ADC_SetChannelSingleDiff+0x44>)
 800542c:	40d9      	lsrs	r1, r3
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	400b      	ands	r3, r1
 8005432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005436:	431a      	orrs	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	0007ffff 	.word	0x0007ffff

08005450 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 031f 	and.w	r3, r3, #31
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005498:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6093      	str	r3, [r2, #8]
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c0:	d101      	bne.n	80054c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80054e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005510:	d101      	bne.n	8005516 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005534:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005538:	f043 0201 	orr.w	r2, r3, #1
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <LL_ADC_IsEnabled+0x18>
 8005560:	2301      	movs	r3, #1
 8005562:	e000      	b.n	8005566 <LL_ADC_IsEnabled+0x1a>
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005582:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005586:	f043 0204 	orr.w	r2, r3, #4
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d101      	bne.n	80055b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d101      	bne.n	80055d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e000      	b.n	80055da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80055e8:	b590      	push	{r4, r7, lr}
 80055ea:	b089      	sub	sp, #36	; 0x24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e136      	b.n	8005870 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560c:	2b00      	cmp	r3, #0
 800560e:	d109      	bne.n	8005624 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7fb f83d 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff ff3f 	bl	80054ac <LL_ADC_IsDeepPowerDownEnabled>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d004      	beq.n	800563e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff ff25 	bl	8005488 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff ff5a 	bl	80054fc <LL_ADC_IsInternalRegulatorEnabled>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d115      	bne.n	800567a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff ff3e 	bl	80054d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005658:	4b87      	ldr	r3, [pc, #540]	; (8005878 <HAL_ADC_Init+0x290>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	099b      	lsrs	r3, r3, #6
 800565e:	4a87      	ldr	r2, [pc, #540]	; (800587c <HAL_ADC_Init+0x294>)
 8005660:	fba2 2303 	umull	r2, r3, r2, r3
 8005664:	099b      	lsrs	r3, r3, #6
 8005666:	3301      	adds	r3, #1
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800566c:	e002      	b.n	8005674 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	3b01      	subs	r3, #1
 8005672:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f9      	bne.n	800566e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff ff3c 	bl	80054fc <LL_ADC_IsInternalRegulatorEnabled>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10d      	bne.n	80056a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568e:	f043 0210 	orr.w	r2, r3, #16
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569a:	f043 0201 	orr.w	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff ff75 	bl	800559a <LL_ADC_REG_IsConversionOngoing>
 80056b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f040 80cf 	bne.w	800585e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f040 80cb 	bne.w	800585e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80056d0:	f043 0202 	orr.w	r2, r3, #2
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff ff35 	bl	800554c <LL_ADC_IsEnabled>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d115      	bne.n	8005714 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056e8:	4865      	ldr	r0, [pc, #404]	; (8005880 <HAL_ADC_Init+0x298>)
 80056ea:	f7ff ff2f 	bl	800554c <LL_ADC_IsEnabled>
 80056ee:	4604      	mov	r4, r0
 80056f0:	4864      	ldr	r0, [pc, #400]	; (8005884 <HAL_ADC_Init+0x29c>)
 80056f2:	f7ff ff2b 	bl	800554c <LL_ADC_IsEnabled>
 80056f6:	4603      	mov	r3, r0
 80056f8:	431c      	orrs	r4, r3
 80056fa:	4863      	ldr	r0, [pc, #396]	; (8005888 <HAL_ADC_Init+0x2a0>)
 80056fc:	f7ff ff26 	bl	800554c <LL_ADC_IsEnabled>
 8005700:	4603      	mov	r3, r0
 8005702:	4323      	orrs	r3, r4
 8005704:	2b00      	cmp	r3, #0
 8005706:	d105      	bne.n	8005714 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	4619      	mov	r1, r3
 800570e:	485f      	ldr	r0, [pc, #380]	; (800588c <HAL_ADC_Init+0x2a4>)
 8005710:	f7ff fd74 	bl	80051fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	7e5b      	ldrb	r3, [r3, #25]
 8005718:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800571e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005724:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800572a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005732:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005734:	4313      	orrs	r3, r2
 8005736:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d106      	bne.n	8005750 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	3b01      	subs	r3, #1
 8005748:	045b      	lsls	r3, r3, #17
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4313      	orrs	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005754:	2b00      	cmp	r3, #0
 8005756:	d009      	beq.n	800576c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005764:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	4313      	orrs	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	4b47      	ldr	r3, [pc, #284]	; (8005890 <HAL_ADC_Init+0x2a8>)
 8005774:	4013      	ands	r3, r2
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6812      	ldr	r2, [r2, #0]
 800577a:	69b9      	ldr	r1, [r7, #24]
 800577c:	430b      	orrs	r3, r1
 800577e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff ff08 	bl	800559a <LL_ADC_REG_IsConversionOngoing>
 800578a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff ff15 	bl	80055c0 <LL_ADC_INJ_IsConversionOngoing>
 8005796:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d13d      	bne.n	800581a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d13a      	bne.n	800581a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80057a8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057b0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80057b2:	4313      	orrs	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057c0:	f023 0302 	bic.w	r3, r3, #2
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	69b9      	ldr	r1, [r7, #24]
 80057ca:	430b      	orrs	r3, r1
 80057cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d118      	bne.n	800580a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057e2:	f023 0304 	bic.w	r3, r3, #4
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80057ee:	4311      	orrs	r1, r2
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057f4:	4311      	orrs	r1, r2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057fa:	430a      	orrs	r2, r1
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	611a      	str	r2, [r3, #16]
 8005808:	e007      	b.n	800581a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0201 	bic.w	r2, r2, #1
 8005818:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d10c      	bne.n	800583c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005828:	f023 010f 	bic.w	r1, r3, #15
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	1e5a      	subs	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
 800583a:	e007      	b.n	800584c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 020f 	bic.w	r2, r2, #15
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005850:	f023 0303 	bic.w	r3, r3, #3
 8005854:	f043 0201 	orr.w	r2, r3, #1
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	655a      	str	r2, [r3, #84]	; 0x54
 800585c:	e007      	b.n	800586e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005862:	f043 0210 	orr.w	r2, r3, #16
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800586e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3724      	adds	r7, #36	; 0x24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd90      	pop	{r4, r7, pc}
 8005878:	20000010 	.word	0x20000010
 800587c:	053e2d63 	.word	0x053e2d63
 8005880:	50040000 	.word	0x50040000
 8005884:	50040100 	.word	0x50040100
 8005888:	50040200 	.word	0x50040200
 800588c:	50040300 	.word	0x50040300
 8005890:	fff0c007 	.word	0xfff0c007

08005894 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800589c:	4893      	ldr	r0, [pc, #588]	; (8005aec <HAL_ADC_Start_IT+0x258>)
 800589e:	f7ff fdd7 	bl	8005450 <LL_ADC_GetMultimode>
 80058a2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff fe76 	bl	800559a <LL_ADC_REG_IsConversionOngoing>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f040 8111 	bne.w	8005ad8 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_ADC_Start_IT+0x30>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e10e      	b.n	8005ae2 <HAL_ADC_Start_IT+0x24e>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 ff3f 	bl	8006750 <ADC_Enable>
 80058d2:	4603      	mov	r3, r0
 80058d4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f040 80f8 	bne.w	8005ace <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058e6:	f023 0301 	bic.w	r3, r3, #1
 80058ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a7e      	ldr	r2, [pc, #504]	; (8005af0 <HAL_ADC_Start_IT+0x25c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d002      	beq.n	8005902 <HAL_ADC_Start_IT+0x6e>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	e000      	b.n	8005904 <HAL_ADC_Start_IT+0x70>
 8005902:	4b7c      	ldr	r3, [pc, #496]	; (8005af4 <HAL_ADC_Start_IT+0x260>)
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6812      	ldr	r2, [r2, #0]
 8005908:	4293      	cmp	r3, r2
 800590a:	d002      	beq.n	8005912 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d105      	bne.n	800591e <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005916:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d006      	beq.n	8005938 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592e:	f023 0206 	bic.w	r2, r3, #6
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	659a      	str	r2, [r3, #88]	; 0x58
 8005936:	e002      	b.n	800593e <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	221c      	movs	r2, #28
 8005944:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 021c 	bic.w	r2, r2, #28
 800595c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	2b08      	cmp	r3, #8
 8005964:	d108      	bne.n	8005978 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0208 	orr.w	r2, r2, #8
 8005974:	605a      	str	r2, [r3, #4]
          break;
 8005976:	e008      	b.n	800598a <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0204 	orr.w	r2, r2, #4
 8005986:	605a      	str	r2, [r3, #4]
          break;
 8005988:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	2b00      	cmp	r3, #0
 8005990:	d107      	bne.n	80059a2 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0210 	orr.w	r2, r2, #16
 80059a0:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a52      	ldr	r2, [pc, #328]	; (8005af0 <HAL_ADC_Start_IT+0x25c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d002      	beq.n	80059b2 <HAL_ADC_Start_IT+0x11e>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	e000      	b.n	80059b4 <HAL_ADC_Start_IT+0x120>
 80059b2:	4b50      	ldr	r3, [pc, #320]	; (8005af4 <HAL_ADC_Start_IT+0x260>)
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6812      	ldr	r2, [r2, #0]
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d008      	beq.n	80059ce <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d005      	beq.n	80059ce <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b05      	cmp	r3, #5
 80059c6:	d002      	beq.n	80059ce <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	2b09      	cmp	r3, #9
 80059cc:	d13b      	bne.n	8005a46 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d02d      	beq.n	8005a38 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80059e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d110      	bne.n	8005a16 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0220 	bic.w	r2, r2, #32
 8005a02:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a12:	605a      	str	r2, [r3, #4]
              break;
 8005a14:	e011      	b.n	8005a3a <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a24:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0220 	orr.w	r2, r2, #32
 8005a34:	605a      	str	r2, [r3, #4]
              break;
 8005a36:	e000      	b.n	8005a3a <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8005a38:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff fd97 	bl	8005572 <LL_ADC_REG_StartConversion>
 8005a44:	e04c      	b.n	8005ae0 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a26      	ldr	r2, [pc, #152]	; (8005af0 <HAL_ADC_Start_IT+0x25c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d002      	beq.n	8005a62 <HAL_ADC_Start_IT+0x1ce>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	e000      	b.n	8005a64 <HAL_ADC_Start_IT+0x1d0>
 8005a62:	4b24      	ldr	r3, [pc, #144]	; (8005af4 <HAL_ADC_Start_IT+0x260>)
 8005a64:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d035      	beq.n	8005ade <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	2b08      	cmp	r3, #8
 8005a88:	d110      	bne.n	8005aac <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0220 	bic.w	r2, r2, #32
 8005a98:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aa8:	605a      	str	r2, [r3, #4]
              break;
 8005aaa:	e019      	b.n	8005ae0 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aba:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0220 	orr.w	r2, r2, #32
 8005aca:	605a      	str	r2, [r3, #4]
              break;
 8005acc:	e008      	b.n	8005ae0 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005ad6:	e003      	b.n	8005ae0 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005ad8:	2302      	movs	r3, #2
 8005ada:	75fb      	strb	r3, [r7, #23]
 8005adc:	e000      	b.n	8005ae0 <HAL_ADC_Start_IT+0x24c>
        }
 8005ade:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	50040300 	.word	0x50040300
 8005af0:	50040100 	.word	0x50040100
 8005af4:	50040000 	.word	0x50040000

08005af8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08a      	sub	sp, #40	; 0x28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b30:	4882      	ldr	r0, [pc, #520]	; (8005d3c <HAL_ADC_IRQHandler+0x228>)
 8005b32:	f7ff fc8d 	bl	8005450 <LL_ADC_GetMultimode>
 8005b36:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d017      	beq.n	8005b72 <HAL_ADC_IRQHandler+0x5e>
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d012      	beq.n	8005b72 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d105      	bne.n	8005b64 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fec7 	bl	80068f8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d004      	beq.n	8005b86 <HAL_ADC_IRQHandler+0x72>
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10a      	bne.n	8005b9c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8083 	beq.w	8005c98 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d07d      	beq.n	8005c98 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d105      	bne.n	8005bb4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7ff fba8 	bl	800530e <LL_ADC_REG_IsTriggerSourceSWStart>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d062      	beq.n	8005c8a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a5d      	ldr	r2, [pc, #372]	; (8005d40 <HAL_ADC_IRQHandler+0x22c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d002      	beq.n	8005bd4 <HAL_ADC_IRQHandler+0xc0>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	e000      	b.n	8005bd6 <HAL_ADC_IRQHandler+0xc2>
 8005bd4:	4b5b      	ldr	r3, [pc, #364]	; (8005d44 <HAL_ADC_IRQHandler+0x230>)
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d008      	beq.n	8005bf0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2b05      	cmp	r3, #5
 8005be8:	d002      	beq.n	8005bf0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2b09      	cmp	r3, #9
 8005bee:	d104      	bne.n	8005bfa <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	623b      	str	r3, [r7, #32]
 8005bf8:	e00c      	b.n	8005c14 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a50      	ldr	r2, [pc, #320]	; (8005d40 <HAL_ADC_IRQHandler+0x22c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d002      	beq.n	8005c0a <HAL_ADC_IRQHandler+0xf6>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	e000      	b.n	8005c0c <HAL_ADC_IRQHandler+0xf8>
 8005c0a:	4b4e      	ldr	r3, [pc, #312]	; (8005d44 <HAL_ADC_IRQHandler+0x230>)
 8005c0c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d135      	bne.n	8005c8a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d12e      	bne.n	8005c8a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff fcb2 	bl	800559a <LL_ADC_REG_IsConversionOngoing>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d11a      	bne.n	8005c72 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 020c 	bic.w	r2, r2, #12
 8005c4a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d112      	bne.n	8005c8a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c68:	f043 0201 	orr.w	r2, r3, #1
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	655a      	str	r2, [r3, #84]	; 0x54
 8005c70:	e00b      	b.n	8005c8a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c76:	f043 0210 	orr.w	r2, r3, #16
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c82:	f043 0201 	orr.w	r2, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fa fd90 	bl	80007b0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	220c      	movs	r2, #12
 8005c96:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d004      	beq.n	8005cac <HAL_ADC_IRQHandler+0x198>
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	f003 0320 	and.w	r3, r3, #32
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10b      	bne.n	8005cc4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 809f 	beq.w	8005df6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 8099 	beq.w	8005df6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d105      	bne.n	8005cdc <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff fb53 	bl	800538c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005ce6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff fb0e 	bl	800530e <LL_ADC_REG_IsTriggerSourceSWStart>
 8005cf2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a11      	ldr	r2, [pc, #68]	; (8005d40 <HAL_ADC_IRQHandler+0x22c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d002      	beq.n	8005d04 <HAL_ADC_IRQHandler+0x1f0>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	e000      	b.n	8005d06 <HAL_ADC_IRQHandler+0x1f2>
 8005d04:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <HAL_ADC_IRQHandler+0x230>)
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6812      	ldr	r2, [r2, #0]
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d008      	beq.n	8005d20 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d005      	beq.n	8005d20 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2b06      	cmp	r3, #6
 8005d18:	d002      	beq.n	8005d20 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b07      	cmp	r3, #7
 8005d1e:	d104      	bne.n	8005d2a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	623b      	str	r3, [r7, #32]
 8005d28:	e013      	b.n	8005d52 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a04      	ldr	r2, [pc, #16]	; (8005d40 <HAL_ADC_IRQHandler+0x22c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d009      	beq.n	8005d48 <HAL_ADC_IRQHandler+0x234>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	e007      	b.n	8005d4a <HAL_ADC_IRQHandler+0x236>
 8005d3a:	bf00      	nop
 8005d3c:	50040300 	.word	0x50040300
 8005d40:	50040100 	.word	0x50040100
 8005d44:	50040000 	.word	0x50040000
 8005d48:	4b7d      	ldr	r3, [pc, #500]	; (8005f40 <HAL_ADC_IRQHandler+0x42c>)
 8005d4a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d047      	beq.n	8005de8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <HAL_ADC_IRQHandler+0x25e>
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d03f      	beq.n	8005de8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d13a      	bne.n	8005de8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7c:	2b40      	cmp	r3, #64	; 0x40
 8005d7e:	d133      	bne.n	8005de8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d12e      	bne.n	8005de8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fc16 	bl	80055c0 <LL_ADC_INJ_IsConversionOngoing>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d11a      	bne.n	8005dd0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005da8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d112      	bne.n	8005de8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc6:	f043 0201 	orr.w	r2, r3, #1
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	655a      	str	r2, [r3, #84]	; 0x54
 8005dce:	e00b      	b.n	8005de8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd4:	f043 0210 	orr.w	r2, r3, #16
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de0:	f043 0201 	orr.w	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fd5d 	bl	80068a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2260      	movs	r2, #96	; 0x60
 8005df4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d011      	beq.n	8005e24 <HAL_ADC_IRQHandler+0x310>
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00c      	beq.n	8005e24 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f896 	bl	8005f48 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2280      	movs	r2, #128	; 0x80
 8005e22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d012      	beq.n	8005e54 <HAL_ADC_IRQHandler+0x340>
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00d      	beq.n	8005e54 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fd43 	bl	80068d0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d012      	beq.n	8005e84 <HAL_ADC_IRQHandler+0x370>
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00d      	beq.n	8005e84 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fd35 	bl	80068e4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e82:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f003 0310 	and.w	r3, r3, #16
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d036      	beq.n	8005efc <HAL_ADC_IRQHandler+0x3e8>
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	f003 0310 	and.w	r3, r3, #16
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d031      	beq.n	8005efc <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d102      	bne.n	8005ea6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea4:	e014      	b.n	8005ed0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d008      	beq.n	8005ebe <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005eac:	4825      	ldr	r0, [pc, #148]	; (8005f44 <HAL_ADC_IRQHandler+0x430>)
 8005eae:	f7ff fadd 	bl	800546c <LL_ADC_GetMultiDMATransfer>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
 8005ebc:	e008      	b.n	8005ed0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d10e      	bne.n	8005ef4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eda:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee6:	f043 0202 	orr.w	r2, r3, #2
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f834 	bl	8005f5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2210      	movs	r2, #16
 8005efa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d018      	beq.n	8005f38 <HAL_ADC_IRQHandler+0x424>
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d013      	beq.n	8005f38 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f14:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f20:	f043 0208 	orr.w	r2, r3, #8
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f30:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fcc2 	bl	80068bc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005f38:	bf00      	nop
 8005f3a:	3728      	adds	r7, #40	; 0x28
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	50040000 	.word	0x50040000
 8005f44:	50040300 	.word	0x50040300

08005f48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b0b6      	sub	sp, #216	; 0xd8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d101      	bne.n	8005f92 <HAL_ADC_ConfigChannel+0x22>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e3c7      	b.n	8006722 <HAL_ADC_ConfigChannel+0x7b2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fafb 	bl	800559a <LL_ADC_REG_IsConversionOngoing>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f040 83a8 	bne.w	80066fc <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b05      	cmp	r3, #5
 8005fb2:	d824      	bhi.n	8005ffe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	3b02      	subs	r3, #2
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d81b      	bhi.n	8005ff6 <HAL_ADC_ConfigChannel+0x86>
 8005fbe:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <HAL_ADC_ConfigChannel+0x54>)
 8005fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	08005fdd 	.word	0x08005fdd
 8005fcc:	08005fe5 	.word	0x08005fe5
 8005fd0:	08005fed 	.word	0x08005fed
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	220c      	movs	r2, #12
 8005fd8:	605a      	str	r2, [r3, #4]
          break;
 8005fda:	e011      	b.n	8006000 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	2212      	movs	r2, #18
 8005fe0:	605a      	str	r2, [r3, #4]
          break;
 8005fe2:	e00d      	b.n	8006000 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2218      	movs	r2, #24
 8005fe8:	605a      	str	r2, [r3, #4]
          break;
 8005fea:	e009      	b.n	8006000 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ff2:	605a      	str	r2, [r3, #4]
          break;
 8005ff4:	e004      	b.n	8006000 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2206      	movs	r2, #6
 8005ffa:	605a      	str	r2, [r3, #4]
          break;
 8005ffc:	e000      	b.n	8006000 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005ffe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	6859      	ldr	r1, [r3, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	461a      	mov	r2, r3
 800600e:	f7ff f991 	bl	8005334 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fabf 	bl	800559a <LL_ADC_REG_IsConversionOngoing>
 800601c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff facb 	bl	80055c0 <LL_ADC_INJ_IsConversionOngoing>
 800602a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800602e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006032:	2b00      	cmp	r3, #0
 8006034:	f040 81a6 	bne.w	8006384 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800603c:	2b00      	cmp	r3, #0
 800603e:	f040 81a1 	bne.w	8006384 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6818      	ldr	r0, [r3, #0]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	6819      	ldr	r1, [r3, #0]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	461a      	mov	r2, r3
 8006050:	f7ff f9af 	bl	80053b2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	695a      	ldr	r2, [r3, #20]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	08db      	lsrs	r3, r3, #3
 8006060:	f003 0303 	and.w	r3, r3, #3
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b04      	cmp	r3, #4
 8006074:	d00a      	beq.n	800608c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6919      	ldr	r1, [r3, #16]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006086:	f7ff f8ed 	bl	8005264 <LL_ADC_SetOffset>
 800608a:	e17b      	b.n	8006384 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2100      	movs	r1, #0
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff f90a 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8006098:	4603      	mov	r3, r0
 800609a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <HAL_ADC_ConfigChannel+0x148>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2100      	movs	r1, #0
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff f8ff 	bl	80052ac <LL_ADC_GetOffsetChannel>
 80060ae:	4603      	mov	r3, r0
 80060b0:	0e9b      	lsrs	r3, r3, #26
 80060b2:	f003 021f 	and.w	r2, r3, #31
 80060b6:	e01e      	b.n	80060f6 <HAL_ADC_ConfigChannel+0x186>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2100      	movs	r1, #0
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff f8f4 	bl	80052ac <LL_ADC_GetOffsetChannel>
 80060c4:	4603      	mov	r3, r0
 80060c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060ce:	fa93 f3a3 	rbit	r3, r3
 80060d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80060d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80060de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80060e6:	2320      	movs	r3, #32
 80060e8:	e004      	b.n	80060f4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80060ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060ee:	fab3 f383 	clz	r3, r3
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d105      	bne.n	800610e <HAL_ADC_ConfigChannel+0x19e>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	0e9b      	lsrs	r3, r3, #26
 8006108:	f003 031f 	and.w	r3, r3, #31
 800610c:	e018      	b.n	8006140 <HAL_ADC_ConfigChannel+0x1d0>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006116:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800611a:	fa93 f3a3 	rbit	r3, r3
 800611e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006126:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800612a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8006132:	2320      	movs	r3, #32
 8006134:	e004      	b.n	8006140 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8006136:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800613a:	fab3 f383 	clz	r3, r3
 800613e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006140:	429a      	cmp	r2, r3
 8006142:	d106      	bne.n	8006152 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2200      	movs	r2, #0
 800614a:	2100      	movs	r1, #0
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff f8c3 	bl	80052d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2101      	movs	r1, #1
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff f8a7 	bl	80052ac <LL_ADC_GetOffsetChannel>
 800615e:	4603      	mov	r3, r0
 8006160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <HAL_ADC_ConfigChannel+0x20e>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2101      	movs	r1, #1
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff f89c 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8006174:	4603      	mov	r3, r0
 8006176:	0e9b      	lsrs	r3, r3, #26
 8006178:	f003 021f 	and.w	r2, r3, #31
 800617c:	e01e      	b.n	80061bc <HAL_ADC_ConfigChannel+0x24c>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2101      	movs	r1, #1
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff f891 	bl	80052ac <LL_ADC_GetOffsetChannel>
 800618a:	4603      	mov	r3, r0
 800618c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006190:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006194:	fa93 f3a3 	rbit	r3, r3
 8006198:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800619c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80061a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80061ac:	2320      	movs	r3, #32
 80061ae:	e004      	b.n	80061ba <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80061b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061b4:	fab3 f383 	clz	r3, r3
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d105      	bne.n	80061d4 <HAL_ADC_ConfigChannel+0x264>
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	0e9b      	lsrs	r3, r3, #26
 80061ce:	f003 031f 	and.w	r3, r3, #31
 80061d2:	e018      	b.n	8006206 <HAL_ADC_ConfigChannel+0x296>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061e0:	fa93 f3a3 	rbit	r3, r3
 80061e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80061e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80061f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80061f8:	2320      	movs	r3, #32
 80061fa:	e004      	b.n	8006206 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80061fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006200:	fab3 f383 	clz	r3, r3
 8006204:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006206:	429a      	cmp	r2, r3
 8006208:	d106      	bne.n	8006218 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2200      	movs	r2, #0
 8006210:	2101      	movs	r1, #1
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff f860 	bl	80052d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2102      	movs	r1, #2
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff f844 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8006224:	4603      	mov	r3, r0
 8006226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <HAL_ADC_ConfigChannel+0x2d4>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2102      	movs	r1, #2
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff f839 	bl	80052ac <LL_ADC_GetOffsetChannel>
 800623a:	4603      	mov	r3, r0
 800623c:	0e9b      	lsrs	r3, r3, #26
 800623e:	f003 021f 	and.w	r2, r3, #31
 8006242:	e01e      	b.n	8006282 <HAL_ADC_ConfigChannel+0x312>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2102      	movs	r1, #2
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff f82e 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8006250:	4603      	mov	r3, r0
 8006252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800625a:	fa93 f3a3 	rbit	r3, r3
 800625e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006262:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800626a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8006272:	2320      	movs	r3, #32
 8006274:	e004      	b.n	8006280 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006276:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800627a:	fab3 f383 	clz	r3, r3
 800627e:	b2db      	uxtb	r3, r3
 8006280:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800628a:	2b00      	cmp	r3, #0
 800628c:	d105      	bne.n	800629a <HAL_ADC_ConfigChannel+0x32a>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	0e9b      	lsrs	r3, r3, #26
 8006294:	f003 031f 	and.w	r3, r3, #31
 8006298:	e016      	b.n	80062c8 <HAL_ADC_ConfigChannel+0x358>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062a6:	fa93 f3a3 	rbit	r3, r3
 80062aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80062ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80062b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80062ba:	2320      	movs	r3, #32
 80062bc:	e004      	b.n	80062c8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80062be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062c2:	fab3 f383 	clz	r3, r3
 80062c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d106      	bne.n	80062da <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2200      	movs	r2, #0
 80062d2:	2102      	movs	r1, #2
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fe ffff 	bl	80052d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2103      	movs	r1, #3
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe ffe3 	bl	80052ac <LL_ADC_GetOffsetChannel>
 80062e6:	4603      	mov	r3, r0
 80062e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <HAL_ADC_ConfigChannel+0x396>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2103      	movs	r1, #3
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe ffd8 	bl	80052ac <LL_ADC_GetOffsetChannel>
 80062fc:	4603      	mov	r3, r0
 80062fe:	0e9b      	lsrs	r3, r3, #26
 8006300:	f003 021f 	and.w	r2, r3, #31
 8006304:	e017      	b.n	8006336 <HAL_ADC_ConfigChannel+0x3c6>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2103      	movs	r1, #3
 800630c:	4618      	mov	r0, r3
 800630e:	f7fe ffcd 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8006312:	4603      	mov	r3, r0
 8006314:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006318:	fa93 f3a3 	rbit	r3, r3
 800631c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800631e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006320:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8006328:	2320      	movs	r3, #32
 800632a:	e003      	b.n	8006334 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800632c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800632e:	fab3 f383 	clz	r3, r3
 8006332:	b2db      	uxtb	r3, r3
 8006334:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800633e:	2b00      	cmp	r3, #0
 8006340:	d105      	bne.n	800634e <HAL_ADC_ConfigChannel+0x3de>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	0e9b      	lsrs	r3, r3, #26
 8006348:	f003 031f 	and.w	r3, r3, #31
 800634c:	e011      	b.n	8006372 <HAL_ADC_ConfigChannel+0x402>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006354:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006356:	fa93 f3a3 	rbit	r3, r3
 800635a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800635c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8006366:	2320      	movs	r3, #32
 8006368:	e003      	b.n	8006372 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800636a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636c:	fab3 f383 	clz	r3, r3
 8006370:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006372:	429a      	cmp	r2, r3
 8006374:	d106      	bne.n	8006384 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2200      	movs	r2, #0
 800637c:	2103      	movs	r1, #3
 800637e:	4618      	mov	r0, r3
 8006380:	f7fe ffaa 	bl	80052d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff f8df 	bl	800554c <LL_ADC_IsEnabled>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	f040 813f 	bne.w	8006614 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6818      	ldr	r0, [r3, #0]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	6819      	ldr	r1, [r3, #0]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	461a      	mov	r2, r3
 80063a4:	f7ff f830 	bl	8005408 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	4a8e      	ldr	r2, [pc, #568]	; (80065e8 <HAL_ADC_ConfigChannel+0x678>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	f040 8130 	bne.w	8006614 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10b      	bne.n	80063dc <HAL_ADC_ConfigChannel+0x46c>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	0e9b      	lsrs	r3, r3, #26
 80063ca:	3301      	adds	r3, #1
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	2b09      	cmp	r3, #9
 80063d2:	bf94      	ite	ls
 80063d4:	2301      	movls	r3, #1
 80063d6:	2300      	movhi	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	e019      	b.n	8006410 <HAL_ADC_ConfigChannel+0x4a0>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063e4:	fa93 f3a3 	rbit	r3, r3
 80063e8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80063ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063ec:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80063ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80063f4:	2320      	movs	r3, #32
 80063f6:	e003      	b.n	8006400 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80063f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063fa:	fab3 f383 	clz	r3, r3
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	3301      	adds	r3, #1
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	2b09      	cmp	r3, #9
 8006408:	bf94      	ite	ls
 800640a:	2301      	movls	r3, #1
 800640c:	2300      	movhi	r3, #0
 800640e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006410:	2b00      	cmp	r3, #0
 8006412:	d079      	beq.n	8006508 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800641c:	2b00      	cmp	r3, #0
 800641e:	d107      	bne.n	8006430 <HAL_ADC_ConfigChannel+0x4c0>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	0e9b      	lsrs	r3, r3, #26
 8006426:	3301      	adds	r3, #1
 8006428:	069b      	lsls	r3, r3, #26
 800642a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800642e:	e015      	b.n	800645c <HAL_ADC_ConfigChannel+0x4ec>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006438:	fa93 f3a3 	rbit	r3, r3
 800643c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800643e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006440:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8006448:	2320      	movs	r3, #32
 800644a:	e003      	b.n	8006454 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800644c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800644e:	fab3 f383 	clz	r3, r3
 8006452:	b2db      	uxtb	r3, r3
 8006454:	3301      	adds	r3, #1
 8006456:	069b      	lsls	r3, r3, #26
 8006458:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006464:	2b00      	cmp	r3, #0
 8006466:	d109      	bne.n	800647c <HAL_ADC_ConfigChannel+0x50c>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	0e9b      	lsrs	r3, r3, #26
 800646e:	3301      	adds	r3, #1
 8006470:	f003 031f 	and.w	r3, r3, #31
 8006474:	2101      	movs	r1, #1
 8006476:	fa01 f303 	lsl.w	r3, r1, r3
 800647a:	e017      	b.n	80064ac <HAL_ADC_ConfigChannel+0x53c>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006484:	fa93 f3a3 	rbit	r3, r3
 8006488:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800648a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800648c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800648e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8006494:	2320      	movs	r3, #32
 8006496:	e003      	b.n	80064a0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8006498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800649a:	fab3 f383 	clz	r3, r3
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	3301      	adds	r3, #1
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	2101      	movs	r1, #1
 80064a8:	fa01 f303 	lsl.w	r3, r1, r3
 80064ac:	ea42 0103 	orr.w	r1, r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <HAL_ADC_ConfigChannel+0x562>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	0e9b      	lsrs	r3, r3, #26
 80064c2:	3301      	adds	r3, #1
 80064c4:	f003 021f 	and.w	r2, r3, #31
 80064c8:	4613      	mov	r3, r2
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	4413      	add	r3, r2
 80064ce:	051b      	lsls	r3, r3, #20
 80064d0:	e018      	b.n	8006504 <HAL_ADC_ConfigChannel+0x594>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064da:	fa93 f3a3 	rbit	r3, r3
 80064de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80064e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80064e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80064ea:	2320      	movs	r3, #32
 80064ec:	e003      	b.n	80064f6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80064ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f0:	fab3 f383 	clz	r3, r3
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	3301      	adds	r3, #1
 80064f8:	f003 021f 	and.w	r2, r3, #31
 80064fc:	4613      	mov	r3, r2
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	4413      	add	r3, r2
 8006502:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006504:	430b      	orrs	r3, r1
 8006506:	e080      	b.n	800660a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006510:	2b00      	cmp	r3, #0
 8006512:	d107      	bne.n	8006524 <HAL_ADC_ConfigChannel+0x5b4>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	0e9b      	lsrs	r3, r3, #26
 800651a:	3301      	adds	r3, #1
 800651c:	069b      	lsls	r3, r3, #26
 800651e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006522:	e015      	b.n	8006550 <HAL_ADC_ConfigChannel+0x5e0>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	fa93 f3a3 	rbit	r3, r3
 8006530:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800653c:	2320      	movs	r3, #32
 800653e:	e003      	b.n	8006548 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	fab3 f383 	clz	r3, r3
 8006546:	b2db      	uxtb	r3, r3
 8006548:	3301      	adds	r3, #1
 800654a:	069b      	lsls	r3, r3, #26
 800654c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006558:	2b00      	cmp	r3, #0
 800655a:	d109      	bne.n	8006570 <HAL_ADC_ConfigChannel+0x600>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	0e9b      	lsrs	r3, r3, #26
 8006562:	3301      	adds	r3, #1
 8006564:	f003 031f 	and.w	r3, r3, #31
 8006568:	2101      	movs	r1, #1
 800656a:	fa01 f303 	lsl.w	r3, r1, r3
 800656e:	e017      	b.n	80065a0 <HAL_ADC_ConfigChannel+0x630>
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	fa93 f3a3 	rbit	r3, r3
 800657c:	61fb      	str	r3, [r7, #28]
  return result;
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8006588:	2320      	movs	r3, #32
 800658a:	e003      	b.n	8006594 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	fab3 f383 	clz	r3, r3
 8006592:	b2db      	uxtb	r3, r3
 8006594:	3301      	adds	r3, #1
 8006596:	f003 031f 	and.w	r3, r3, #31
 800659a:	2101      	movs	r1, #1
 800659c:	fa01 f303 	lsl.w	r3, r1, r3
 80065a0:	ea42 0103 	orr.w	r1, r2, r3
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10d      	bne.n	80065cc <HAL_ADC_ConfigChannel+0x65c>
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	0e9b      	lsrs	r3, r3, #26
 80065b6:	3301      	adds	r3, #1
 80065b8:	f003 021f 	and.w	r2, r3, #31
 80065bc:	4613      	mov	r3, r2
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	4413      	add	r3, r2
 80065c2:	3b1e      	subs	r3, #30
 80065c4:	051b      	lsls	r3, r3, #20
 80065c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80065ca:	e01d      	b.n	8006608 <HAL_ADC_ConfigChannel+0x698>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	fa93 f3a3 	rbit	r3, r3
 80065d8:	613b      	str	r3, [r7, #16]
  return result;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d103      	bne.n	80065ec <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80065e4:	2320      	movs	r3, #32
 80065e6:	e005      	b.n	80065f4 <HAL_ADC_ConfigChannel+0x684>
 80065e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	fab3 f383 	clz	r3, r3
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	3301      	adds	r3, #1
 80065f6:	f003 021f 	and.w	r2, r3, #31
 80065fa:	4613      	mov	r3, r2
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	4413      	add	r3, r2
 8006600:	3b1e      	subs	r3, #30
 8006602:	051b      	lsls	r3, r3, #20
 8006604:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006608:	430b      	orrs	r3, r1
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	6892      	ldr	r2, [r2, #8]
 800660e:	4619      	mov	r1, r3
 8006610:	f7fe fecf 	bl	80053b2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	4b44      	ldr	r3, [pc, #272]	; (800672c <HAL_ADC_ConfigChannel+0x7bc>)
 800661a:	4013      	ands	r3, r2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d07a      	beq.n	8006716 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006620:	4843      	ldr	r0, [pc, #268]	; (8006730 <HAL_ADC_ConfigChannel+0x7c0>)
 8006622:	f7fe fe11 	bl	8005248 <LL_ADC_GetCommonPathInternalCh>
 8006626:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a41      	ldr	r2, [pc, #260]	; (8006734 <HAL_ADC_ConfigChannel+0x7c4>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d12c      	bne.n	800668e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006634:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d126      	bne.n	800668e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a3c      	ldr	r2, [pc, #240]	; (8006738 <HAL_ADC_ConfigChannel+0x7c8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d004      	beq.n	8006654 <HAL_ADC_ConfigChannel+0x6e4>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a3b      	ldr	r2, [pc, #236]	; (800673c <HAL_ADC_ConfigChannel+0x7cc>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d15d      	bne.n	8006710 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006654:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006658:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800665c:	4619      	mov	r1, r3
 800665e:	4834      	ldr	r0, [pc, #208]	; (8006730 <HAL_ADC_ConfigChannel+0x7c0>)
 8006660:	f7fe fddf 	bl	8005222 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006664:	4b36      	ldr	r3, [pc, #216]	; (8006740 <HAL_ADC_ConfigChannel+0x7d0>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	099b      	lsrs	r3, r3, #6
 800666a:	4a36      	ldr	r2, [pc, #216]	; (8006744 <HAL_ADC_ConfigChannel+0x7d4>)
 800666c:	fba2 2303 	umull	r2, r3, r2, r3
 8006670:	099b      	lsrs	r3, r3, #6
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	4613      	mov	r3, r2
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	4413      	add	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800667e:	e002      	b.n	8006686 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	3b01      	subs	r3, #1
 8006684:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1f9      	bne.n	8006680 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800668c:	e040      	b.n	8006710 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a2d      	ldr	r2, [pc, #180]	; (8006748 <HAL_ADC_ConfigChannel+0x7d8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d118      	bne.n	80066ca <HAL_ADC_ConfigChannel+0x75a>
 8006698:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800669c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d112      	bne.n	80066ca <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a23      	ldr	r2, [pc, #140]	; (8006738 <HAL_ADC_ConfigChannel+0x7c8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d004      	beq.n	80066b8 <HAL_ADC_ConfigChannel+0x748>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a22      	ldr	r2, [pc, #136]	; (800673c <HAL_ADC_ConfigChannel+0x7cc>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d12d      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066c0:	4619      	mov	r1, r3
 80066c2:	481b      	ldr	r0, [pc, #108]	; (8006730 <HAL_ADC_ConfigChannel+0x7c0>)
 80066c4:	f7fe fdad 	bl	8005222 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066c8:	e024      	b.n	8006714 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1f      	ldr	r2, [pc, #124]	; (800674c <HAL_ADC_ConfigChannel+0x7dc>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d120      	bne.n	8006716 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80066d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d11a      	bne.n	8006716 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a14      	ldr	r2, [pc, #80]	; (8006738 <HAL_ADC_ConfigChannel+0x7c8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d115      	bne.n	8006716 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066f2:	4619      	mov	r1, r3
 80066f4:	480e      	ldr	r0, [pc, #56]	; (8006730 <HAL_ADC_ConfigChannel+0x7c0>)
 80066f6:	f7fe fd94 	bl	8005222 <LL_ADC_SetCommonPathInternalCh>
 80066fa:	e00c      	b.n	8006716 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006700:	f043 0220 	orr.w	r2, r3, #32
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800670e:	e002      	b.n	8006716 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006710:	bf00      	nop
 8006712:	e000      	b.n	8006716 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006714:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800671e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006722:	4618      	mov	r0, r3
 8006724:	37d8      	adds	r7, #216	; 0xd8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	80080000 	.word	0x80080000
 8006730:	50040300 	.word	0x50040300
 8006734:	c7520000 	.word	0xc7520000
 8006738:	50040000 	.word	0x50040000
 800673c:	50040200 	.word	0x50040200
 8006740:	20000010 	.word	0x20000010
 8006744:	053e2d63 	.word	0x053e2d63
 8006748:	cb840000 	.word	0xcb840000
 800674c:	80000001 	.word	0x80000001

08006750 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006758:	2300      	movs	r3, #0
 800675a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe fef3 	bl	800554c <LL_ADC_IsEnabled>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d169      	bne.n	8006840 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	4b36      	ldr	r3, [pc, #216]	; (800684c <ADC_Enable+0xfc>)
 8006774:	4013      	ands	r3, r2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00d      	beq.n	8006796 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677e:	f043 0210 	orr.w	r2, r3, #16
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678a:	f043 0201 	orr.w	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e055      	b.n	8006842 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe fec2 	bl	8005524 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80067a0:	482b      	ldr	r0, [pc, #172]	; (8006850 <ADC_Enable+0x100>)
 80067a2:	f7fe fd51 	bl	8005248 <LL_ADC_GetCommonPathInternalCh>
 80067a6:	4603      	mov	r3, r0
 80067a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d013      	beq.n	80067d8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80067b0:	4b28      	ldr	r3, [pc, #160]	; (8006854 <ADC_Enable+0x104>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	099b      	lsrs	r3, r3, #6
 80067b6:	4a28      	ldr	r2, [pc, #160]	; (8006858 <ADC_Enable+0x108>)
 80067b8:	fba2 2303 	umull	r2, r3, r2, r3
 80067bc:	099b      	lsrs	r3, r3, #6
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	4613      	mov	r3, r2
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	4413      	add	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80067ca:	e002      	b.n	80067d2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1f9      	bne.n	80067cc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80067d8:	f7fe fd04 	bl	80051e4 <HAL_GetTick>
 80067dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067de:	e028      	b.n	8006832 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fe feb1 	bl	800554c <LL_ADC_IsEnabled>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d104      	bne.n	80067fa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fe fe95 	bl	8005524 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80067fa:	f7fe fcf3 	bl	80051e4 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d914      	bls.n	8006832 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	d00d      	beq.n	8006832 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681a:	f043 0210 	orr.w	r2, r3, #16
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006826:	f043 0201 	orr.w	r2, r3, #1
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e007      	b.n	8006842 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b01      	cmp	r3, #1
 800683e:	d1cf      	bne.n	80067e0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	8000003f 	.word	0x8000003f
 8006850:	50040300 	.word	0x50040300
 8006854:	20000010 	.word	0x20000010
 8006858:	053e2d63 	.word	0x053e2d63

0800685c <LL_ADC_IsEnabled>:
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b01      	cmp	r3, #1
 800686e:	d101      	bne.n	8006874 <LL_ADC_IsEnabled+0x18>
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <LL_ADC_IsEnabled+0x1a>
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <LL_ADC_REG_IsConversionOngoing>:
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b04      	cmp	r3, #4
 8006894:	d101      	bne.n	800689a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006896:	2301      	movs	r3, #1
 8006898:	e000      	b.n	800689c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800690c:	b590      	push	{r4, r7, lr}
 800690e:	b09f      	sub	sp, #124	; 0x7c
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006922:	2b01      	cmp	r3, #1
 8006924:	d101      	bne.n	800692a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006926:	2302      	movs	r3, #2
 8006928:	e093      	b.n	8006a52 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006932:	2300      	movs	r3, #0
 8006934:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006936:	2300      	movs	r3, #0
 8006938:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a47      	ldr	r2, [pc, #284]	; (8006a5c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d102      	bne.n	800694a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006944:	4b46      	ldr	r3, [pc, #280]	; (8006a60 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006946:	60bb      	str	r3, [r7, #8]
 8006948:	e001      	b.n	800694e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800694a:	2300      	movs	r3, #0
 800694c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10b      	bne.n	800696c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006958:	f043 0220 	orr.w	r2, r3, #32
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e072      	b.n	8006a52 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff ff87 	bl	8006882 <LL_ADC_REG_IsConversionOngoing>
 8006974:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff ff81 	bl	8006882 <LL_ADC_REG_IsConversionOngoing>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d154      	bne.n	8006a30 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006988:	2b00      	cmp	r3, #0
 800698a:	d151      	bne.n	8006a30 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800698c:	4b35      	ldr	r3, [pc, #212]	; (8006a64 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800698e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d02c      	beq.n	80069f2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	6859      	ldr	r1, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069aa:	035b      	lsls	r3, r3, #13
 80069ac:	430b      	orrs	r3, r1
 80069ae:	431a      	orrs	r2, r3
 80069b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80069b4:	4829      	ldr	r0, [pc, #164]	; (8006a5c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80069b6:	f7ff ff51 	bl	800685c <LL_ADC_IsEnabled>
 80069ba:	4604      	mov	r4, r0
 80069bc:	4828      	ldr	r0, [pc, #160]	; (8006a60 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80069be:	f7ff ff4d 	bl	800685c <LL_ADC_IsEnabled>
 80069c2:	4603      	mov	r3, r0
 80069c4:	431c      	orrs	r4, r3
 80069c6:	4828      	ldr	r0, [pc, #160]	; (8006a68 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80069c8:	f7ff ff48 	bl	800685c <LL_ADC_IsEnabled>
 80069cc:	4603      	mov	r3, r0
 80069ce:	4323      	orrs	r3, r4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d137      	bne.n	8006a44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80069d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80069dc:	f023 030f 	bic.w	r3, r3, #15
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	6811      	ldr	r1, [r2, #0]
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	6892      	ldr	r2, [r2, #8]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	431a      	orrs	r2, r3
 80069ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80069f0:	e028      	b.n	8006a44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80069f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80069fe:	4817      	ldr	r0, [pc, #92]	; (8006a5c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006a00:	f7ff ff2c 	bl	800685c <LL_ADC_IsEnabled>
 8006a04:	4604      	mov	r4, r0
 8006a06:	4816      	ldr	r0, [pc, #88]	; (8006a60 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006a08:	f7ff ff28 	bl	800685c <LL_ADC_IsEnabled>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	431c      	orrs	r4, r3
 8006a10:	4815      	ldr	r0, [pc, #84]	; (8006a68 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006a12:	f7ff ff23 	bl	800685c <LL_ADC_IsEnabled>
 8006a16:	4603      	mov	r3, r0
 8006a18:	4323      	orrs	r3, r4
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d112      	bne.n	8006a44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006a26:	f023 030f 	bic.w	r3, r3, #15
 8006a2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a2c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a2e:	e009      	b.n	8006a44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a34:	f043 0220 	orr.w	r2, r3, #32
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006a42:	e000      	b.n	8006a46 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006a4e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	377c      	adds	r7, #124	; 0x7c
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd90      	pop	{r4, r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	50040000 	.word	0x50040000
 8006a60:	50040100 	.word	0x50040100
 8006a64:	50040300 	.word	0x50040300
 8006a68:	50040200 	.word	0x50040200

08006a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a7c:	4b0c      	ldr	r3, [pc, #48]	; (8006ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a88:	4013      	ands	r3, r2
 8006a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a9e:	4a04      	ldr	r2, [pc, #16]	; (8006ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	60d3      	str	r3, [r2, #12]
}
 8006aa4:	bf00      	nop
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	e000ed00 	.word	0xe000ed00

08006ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ab8:	4b04      	ldr	r3, [pc, #16]	; (8006acc <__NVIC_GetPriorityGrouping+0x18>)
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	0a1b      	lsrs	r3, r3, #8
 8006abe:	f003 0307 	and.w	r3, r3, #7
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	e000ed00 	.word	0xe000ed00

08006ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	db0b      	blt.n	8006afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	f003 021f 	and.w	r2, r3, #31
 8006ae8:	4907      	ldr	r1, [pc, #28]	; (8006b08 <__NVIC_EnableIRQ+0x38>)
 8006aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	2001      	movs	r0, #1
 8006af2:	fa00 f202 	lsl.w	r2, r0, r2
 8006af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	e000e100 	.word	0xe000e100

08006b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	4603      	mov	r3, r0
 8006b14:	6039      	str	r1, [r7, #0]
 8006b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	db0a      	blt.n	8006b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	490c      	ldr	r1, [pc, #48]	; (8006b58 <__NVIC_SetPriority+0x4c>)
 8006b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b2a:	0112      	lsls	r2, r2, #4
 8006b2c:	b2d2      	uxtb	r2, r2
 8006b2e:	440b      	add	r3, r1
 8006b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b34:	e00a      	b.n	8006b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	4908      	ldr	r1, [pc, #32]	; (8006b5c <__NVIC_SetPriority+0x50>)
 8006b3c:	79fb      	ldrb	r3, [r7, #7]
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	3b04      	subs	r3, #4
 8006b44:	0112      	lsls	r2, r2, #4
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	440b      	add	r3, r1
 8006b4a:	761a      	strb	r2, [r3, #24]
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	e000e100 	.word	0xe000e100
 8006b5c:	e000ed00 	.word	0xe000ed00

08006b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b089      	sub	sp, #36	; 0x24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	f1c3 0307 	rsb	r3, r3, #7
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	bf28      	it	cs
 8006b7e:	2304      	movcs	r3, #4
 8006b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	3304      	adds	r3, #4
 8006b86:	2b06      	cmp	r3, #6
 8006b88:	d902      	bls.n	8006b90 <NVIC_EncodePriority+0x30>
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	3b03      	subs	r3, #3
 8006b8e:	e000      	b.n	8006b92 <NVIC_EncodePriority+0x32>
 8006b90:	2300      	movs	r3, #0
 8006b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b94:	f04f 32ff 	mov.w	r2, #4294967295
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9e:	43da      	mvns	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	401a      	ands	r2, r3
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb2:	43d9      	mvns	r1, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bb8:	4313      	orrs	r3, r2
         );
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3724      	adds	r7, #36	; 0x24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
	...

08006bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bd8:	d301      	bcc.n	8006bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e00f      	b.n	8006bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006bde:	4a0a      	ldr	r2, [pc, #40]	; (8006c08 <SysTick_Config+0x40>)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006be6:	210f      	movs	r1, #15
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	f7ff ff8e 	bl	8006b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006bf0:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <SysTick_Config+0x40>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006bf6:	4b04      	ldr	r3, [pc, #16]	; (8006c08 <SysTick_Config+0x40>)
 8006bf8:	2207      	movs	r2, #7
 8006bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	e000e010 	.word	0xe000e010

08006c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff ff29 	bl	8006a6c <__NVIC_SetPriorityGrouping>
}
 8006c1a:	bf00      	nop
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b086      	sub	sp, #24
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	4603      	mov	r3, r0
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
 8006c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006c30:	2300      	movs	r3, #0
 8006c32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006c34:	f7ff ff3e 	bl	8006ab4 <__NVIC_GetPriorityGrouping>
 8006c38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	6978      	ldr	r0, [r7, #20]
 8006c40:	f7ff ff8e 	bl	8006b60 <NVIC_EncodePriority>
 8006c44:	4602      	mov	r2, r0
 8006c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff ff5d 	bl	8006b0c <__NVIC_SetPriority>
}
 8006c52:	bf00      	nop
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	4603      	mov	r3, r0
 8006c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7ff ff31 	bl	8006ad0 <__NVIC_EnableIRQ>
}
 8006c6e:	bf00      	nop
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b082      	sub	sp, #8
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7ff ffa2 	bl	8006bc8 <SysTick_Config>
 8006c84:	4603      	mov	r3, r0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e098      	b.n	8006dd4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	4b4d      	ldr	r3, [pc, #308]	; (8006de0 <HAL_DMA_Init+0x150>)
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d80f      	bhi.n	8006cce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	4b4b      	ldr	r3, [pc, #300]	; (8006de4 <HAL_DMA_Init+0x154>)
 8006cb6:	4413      	add	r3, r2
 8006cb8:	4a4b      	ldr	r2, [pc, #300]	; (8006de8 <HAL_DMA_Init+0x158>)
 8006cba:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbe:	091b      	lsrs	r3, r3, #4
 8006cc0:	009a      	lsls	r2, r3, #2
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a48      	ldr	r2, [pc, #288]	; (8006dec <HAL_DMA_Init+0x15c>)
 8006cca:	641a      	str	r2, [r3, #64]	; 0x40
 8006ccc:	e00e      	b.n	8006cec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	4b46      	ldr	r3, [pc, #280]	; (8006df0 <HAL_DMA_Init+0x160>)
 8006cd6:	4413      	add	r3, r2
 8006cd8:	4a43      	ldr	r2, [pc, #268]	; (8006de8 <HAL_DMA_Init+0x158>)
 8006cda:	fba2 2303 	umull	r2, r3, r2, r3
 8006cde:	091b      	lsrs	r3, r3, #4
 8006ce0:	009a      	lsls	r2, r3, #2
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a42      	ldr	r2, [pc, #264]	; (8006df4 <HAL_DMA_Init+0x164>)
 8006cea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d46:	d039      	beq.n	8006dbc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4c:	4a27      	ldr	r2, [pc, #156]	; (8006dec <HAL_DMA_Init+0x15c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d11a      	bne.n	8006d88 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006d52:	4b29      	ldr	r3, [pc, #164]	; (8006df8 <HAL_DMA_Init+0x168>)
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5a:	f003 031c 	and.w	r3, r3, #28
 8006d5e:	210f      	movs	r1, #15
 8006d60:	fa01 f303 	lsl.w	r3, r1, r3
 8006d64:	43db      	mvns	r3, r3
 8006d66:	4924      	ldr	r1, [pc, #144]	; (8006df8 <HAL_DMA_Init+0x168>)
 8006d68:	4013      	ands	r3, r2
 8006d6a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006d6c:	4b22      	ldr	r3, [pc, #136]	; (8006df8 <HAL_DMA_Init+0x168>)
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6859      	ldr	r1, [r3, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d78:	f003 031c 	and.w	r3, r3, #28
 8006d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d80:	491d      	ldr	r1, [pc, #116]	; (8006df8 <HAL_DMA_Init+0x168>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	600b      	str	r3, [r1, #0]
 8006d86:	e019      	b.n	8006dbc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006d88:	4b1c      	ldr	r3, [pc, #112]	; (8006dfc <HAL_DMA_Init+0x16c>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d90:	f003 031c 	and.w	r3, r3, #28
 8006d94:	210f      	movs	r1, #15
 8006d96:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9a:	43db      	mvns	r3, r3
 8006d9c:	4917      	ldr	r1, [pc, #92]	; (8006dfc <HAL_DMA_Init+0x16c>)
 8006d9e:	4013      	ands	r3, r2
 8006da0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006da2:	4b16      	ldr	r3, [pc, #88]	; (8006dfc <HAL_DMA_Init+0x16c>)
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6859      	ldr	r1, [r3, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dae:	f003 031c 	and.w	r3, r3, #28
 8006db2:	fa01 f303 	lsl.w	r3, r1, r3
 8006db6:	4911      	ldr	r1, [pc, #68]	; (8006dfc <HAL_DMA_Init+0x16c>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	40020407 	.word	0x40020407
 8006de4:	bffdfff8 	.word	0xbffdfff8
 8006de8:	cccccccd 	.word	0xcccccccd
 8006dec:	40020000 	.word	0x40020000
 8006df0:	bffdfbf8 	.word	0xbffdfbf8
 8006df4:	40020400 	.word	0x40020400
 8006df8:	400200a8 	.word	0x400200a8
 8006dfc:	400204a8 	.word	0x400204a8

08006e00 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d008      	beq.n	8006e2a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2204      	movs	r2, #4
 8006e1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e022      	b.n	8006e70 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 020e 	bic.w	r2, r2, #14
 8006e38:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0201 	bic.w	r2, r2, #1
 8006e48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4e:	f003 021c 	and.w	r2, r3, #28
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	2101      	movs	r1, #1
 8006e58:	fa01 f202 	lsl.w	r2, r1, r2
 8006e5c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d005      	beq.n	8006ea0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2204      	movs	r2, #4
 8006e98:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	73fb      	strb	r3, [r7, #15]
 8006e9e:	e029      	b.n	8006ef4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 020e 	bic.w	r2, r2, #14
 8006eae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0201 	bic.w	r2, r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec4:	f003 021c 	and.w	r2, r3, #28
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ecc:	2101      	movs	r1, #1
 8006ece:	fa01 f202 	lsl.w	r2, r1, r2
 8006ed2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	4798      	blx	r3
    }
  }
  return status;
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1a:	f003 031c 	and.w	r3, r3, #28
 8006f1e:	2204      	movs	r2, #4
 8006f20:	409a      	lsls	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4013      	ands	r3, r2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d026      	beq.n	8006f78 <HAL_DMA_IRQHandler+0x7a>
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d021      	beq.n	8006f78 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0320 	and.w	r3, r3, #32
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d107      	bne.n	8006f52 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 0204 	bic.w	r2, r2, #4
 8006f50:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f56:	f003 021c 	and.w	r2, r3, #28
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	2104      	movs	r1, #4
 8006f60:	fa01 f202 	lsl.w	r2, r1, r2
 8006f64:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d071      	beq.n	8007052 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006f76:	e06c      	b.n	8007052 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7c:	f003 031c 	and.w	r3, r3, #28
 8006f80:	2202      	movs	r2, #2
 8006f82:	409a      	lsls	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4013      	ands	r3, r2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d02e      	beq.n	8006fea <HAL_DMA_IRQHandler+0xec>
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d029      	beq.n	8006fea <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10b      	bne.n	8006fbc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 020a 	bic.w	r2, r2, #10
 8006fb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc0:	f003 021c 	and.w	r2, r3, #28
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc8:	2102      	movs	r1, #2
 8006fca:	fa01 f202 	lsl.w	r2, r1, r2
 8006fce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d038      	beq.n	8007052 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006fe8:	e033      	b.n	8007052 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fee:	f003 031c 	and.w	r3, r3, #28
 8006ff2:	2208      	movs	r2, #8
 8006ff4:	409a      	lsls	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d02a      	beq.n	8007054 <HAL_DMA_IRQHandler+0x156>
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f003 0308 	and.w	r3, r3, #8
 8007004:	2b00      	cmp	r3, #0
 8007006:	d025      	beq.n	8007054 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 020e 	bic.w	r2, r2, #14
 8007016:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701c:	f003 021c 	and.w	r2, r3, #28
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	2101      	movs	r1, #1
 8007026:	fa01 f202 	lsl.w	r2, r1, r2
 800702a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007046:	2b00      	cmp	r3, #0
 8007048:	d004      	beq.n	8007054 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007052:	bf00      	nop
 8007054:	bf00      	nop
}
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007066:	2300      	movs	r3, #0
 8007068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800706a:	e17f      	b.n	800736c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	2101      	movs	r1, #1
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	fa01 f303 	lsl.w	r3, r1, r3
 8007078:	4013      	ands	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 8171 	beq.w	8007366 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f003 0303 	and.w	r3, r3, #3
 800708c:	2b01      	cmp	r3, #1
 800708e:	d005      	beq.n	800709c <HAL_GPIO_Init+0x40>
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f003 0303 	and.w	r3, r3, #3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d130      	bne.n	80070fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	2203      	movs	r2, #3
 80070a8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ac:	43db      	mvns	r3, r3
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4013      	ands	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	fa02 f303 	lsl.w	r3, r2, r3
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80070d2:	2201      	movs	r2, #1
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	fa02 f303 	lsl.w	r3, r2, r3
 80070da:	43db      	mvns	r3, r3
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	4013      	ands	r3, r2
 80070e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	091b      	lsrs	r3, r3, #4
 80070e8:	f003 0201 	and.w	r2, r3, #1
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	fa02 f303 	lsl.w	r3, r2, r3
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	2b03      	cmp	r3, #3
 8007108:	d118      	bne.n	800713c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8007110:	2201      	movs	r2, #1
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	fa02 f303 	lsl.w	r3, r2, r3
 8007118:	43db      	mvns	r3, r3
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4013      	ands	r3, r2
 800711e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	08db      	lsrs	r3, r3, #3
 8007126:	f003 0201 	and.w	r2, r3, #1
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	fa02 f303 	lsl.w	r3, r2, r3
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	4313      	orrs	r3, r2
 8007134:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f003 0303 	and.w	r3, r3, #3
 8007144:	2b03      	cmp	r3, #3
 8007146:	d017      	beq.n	8007178 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	2203      	movs	r2, #3
 8007154:	fa02 f303 	lsl.w	r3, r2, r3
 8007158:	43db      	mvns	r3, r3
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	4013      	ands	r3, r2
 800715e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	fa02 f303 	lsl.w	r3, r2, r3
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	4313      	orrs	r3, r2
 8007170:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f003 0303 	and.w	r3, r3, #3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d123      	bne.n	80071cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	08da      	lsrs	r2, r3, #3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3208      	adds	r2, #8
 800718c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007190:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	220f      	movs	r2, #15
 800719c:	fa02 f303 	lsl.w	r3, r2, r3
 80071a0:	43db      	mvns	r3, r3
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	4013      	ands	r3, r2
 80071a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	691a      	ldr	r2, [r3, #16]
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	fa02 f303 	lsl.w	r3, r2, r3
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	08da      	lsrs	r2, r3, #3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	3208      	adds	r2, #8
 80071c6:	6939      	ldr	r1, [r7, #16]
 80071c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	2203      	movs	r2, #3
 80071d8:	fa02 f303 	lsl.w	r3, r2, r3
 80071dc:	43db      	mvns	r3, r3
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	4013      	ands	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f003 0203 	and.w	r2, r3, #3
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	fa02 f303 	lsl.w	r3, r2, r3
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 80ac 	beq.w	8007366 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800720e:	4b5f      	ldr	r3, [pc, #380]	; (800738c <HAL_GPIO_Init+0x330>)
 8007210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007212:	4a5e      	ldr	r2, [pc, #376]	; (800738c <HAL_GPIO_Init+0x330>)
 8007214:	f043 0301 	orr.w	r3, r3, #1
 8007218:	6613      	str	r3, [r2, #96]	; 0x60
 800721a:	4b5c      	ldr	r3, [pc, #368]	; (800738c <HAL_GPIO_Init+0x330>)
 800721c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	60bb      	str	r3, [r7, #8]
 8007224:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007226:	4a5a      	ldr	r2, [pc, #360]	; (8007390 <HAL_GPIO_Init+0x334>)
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	089b      	lsrs	r3, r3, #2
 800722c:	3302      	adds	r3, #2
 800722e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007232:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	220f      	movs	r2, #15
 800723e:	fa02 f303 	lsl.w	r3, r2, r3
 8007242:	43db      	mvns	r3, r3
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	4013      	ands	r3, r2
 8007248:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007250:	d025      	beq.n	800729e <HAL_GPIO_Init+0x242>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a4f      	ldr	r2, [pc, #316]	; (8007394 <HAL_GPIO_Init+0x338>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d01f      	beq.n	800729a <HAL_GPIO_Init+0x23e>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a4e      	ldr	r2, [pc, #312]	; (8007398 <HAL_GPIO_Init+0x33c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d019      	beq.n	8007296 <HAL_GPIO_Init+0x23a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a4d      	ldr	r2, [pc, #308]	; (800739c <HAL_GPIO_Init+0x340>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d013      	beq.n	8007292 <HAL_GPIO_Init+0x236>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a4c      	ldr	r2, [pc, #304]	; (80073a0 <HAL_GPIO_Init+0x344>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00d      	beq.n	800728e <HAL_GPIO_Init+0x232>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a4b      	ldr	r2, [pc, #300]	; (80073a4 <HAL_GPIO_Init+0x348>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d007      	beq.n	800728a <HAL_GPIO_Init+0x22e>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a4a      	ldr	r2, [pc, #296]	; (80073a8 <HAL_GPIO_Init+0x34c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d101      	bne.n	8007286 <HAL_GPIO_Init+0x22a>
 8007282:	2306      	movs	r3, #6
 8007284:	e00c      	b.n	80072a0 <HAL_GPIO_Init+0x244>
 8007286:	2307      	movs	r3, #7
 8007288:	e00a      	b.n	80072a0 <HAL_GPIO_Init+0x244>
 800728a:	2305      	movs	r3, #5
 800728c:	e008      	b.n	80072a0 <HAL_GPIO_Init+0x244>
 800728e:	2304      	movs	r3, #4
 8007290:	e006      	b.n	80072a0 <HAL_GPIO_Init+0x244>
 8007292:	2303      	movs	r3, #3
 8007294:	e004      	b.n	80072a0 <HAL_GPIO_Init+0x244>
 8007296:	2302      	movs	r3, #2
 8007298:	e002      	b.n	80072a0 <HAL_GPIO_Init+0x244>
 800729a:	2301      	movs	r3, #1
 800729c:	e000      	b.n	80072a0 <HAL_GPIO_Init+0x244>
 800729e:	2300      	movs	r3, #0
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	f002 0203 	and.w	r2, r2, #3
 80072a6:	0092      	lsls	r2, r2, #2
 80072a8:	4093      	lsls	r3, r2
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80072b0:	4937      	ldr	r1, [pc, #220]	; (8007390 <HAL_GPIO_Init+0x334>)
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	089b      	lsrs	r3, r3, #2
 80072b6:	3302      	adds	r3, #2
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80072be:	4b3b      	ldr	r3, [pc, #236]	; (80073ac <HAL_GPIO_Init+0x350>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	43db      	mvns	r3, r3
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	4013      	ands	r3, r2
 80072cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4313      	orrs	r3, r2
 80072e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80072e2:	4a32      	ldr	r2, [pc, #200]	; (80073ac <HAL_GPIO_Init+0x350>)
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80072e8:	4b30      	ldr	r3, [pc, #192]	; (80073ac <HAL_GPIO_Init+0x350>)
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	43db      	mvns	r3, r3
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4013      	ands	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	4313      	orrs	r3, r2
 800730a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800730c:	4a27      	ldr	r2, [pc, #156]	; (80073ac <HAL_GPIO_Init+0x350>)
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007312:	4b26      	ldr	r3, [pc, #152]	; (80073ac <HAL_GPIO_Init+0x350>)
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	43db      	mvns	r3, r3
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	4013      	ands	r3, r2
 8007320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4313      	orrs	r3, r2
 8007334:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007336:	4a1d      	ldr	r2, [pc, #116]	; (80073ac <HAL_GPIO_Init+0x350>)
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800733c:	4b1b      	ldr	r3, [pc, #108]	; (80073ac <HAL_GPIO_Init+0x350>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	43db      	mvns	r3, r3
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	4013      	ands	r3, r2
 800734a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	4313      	orrs	r3, r2
 800735e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007360:	4a12      	ldr	r2, [pc, #72]	; (80073ac <HAL_GPIO_Init+0x350>)
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	3301      	adds	r3, #1
 800736a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	fa22 f303 	lsr.w	r3, r2, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	f47f ae78 	bne.w	800706c <HAL_GPIO_Init+0x10>
  }
}
 800737c:	bf00      	nop
 800737e:	bf00      	nop
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	40021000 	.word	0x40021000
 8007390:	40010000 	.word	0x40010000
 8007394:	48000400 	.word	0x48000400
 8007398:	48000800 	.word	0x48000800
 800739c:	48000c00 	.word	0x48000c00
 80073a0:	48001000 	.word	0x48001000
 80073a4:	48001400 	.word	0x48001400
 80073a8:	48001800 	.word	0x48001800
 80073ac:	40010400 	.word	0x40010400

080073b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691a      	ldr	r2, [r3, #16]
 80073c0:	887b      	ldrh	r3, [r7, #2]
 80073c2:	4013      	ands	r3, r2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073c8:	2301      	movs	r3, #1
 80073ca:	73fb      	strb	r3, [r7, #15]
 80073cc:	e001      	b.n	80073d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073ce:	2300      	movs	r3, #0
 80073d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	807b      	strh	r3, [r7, #2]
 80073ec:	4613      	mov	r3, r2
 80073ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80073f0:	787b      	ldrb	r3, [r7, #1]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80073f6:	887a      	ldrh	r2, [r7, #2]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80073fc:	e002      	b.n	8007404 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80073fe:	887a      	ldrh	r2, [r7, #2]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800741a:	4b08      	ldr	r3, [pc, #32]	; (800743c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800741c:	695a      	ldr	r2, [r3, #20]
 800741e:	88fb      	ldrh	r3, [r7, #6]
 8007420:	4013      	ands	r3, r2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d006      	beq.n	8007434 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007426:	4a05      	ldr	r2, [pc, #20]	; (800743c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007428:	88fb      	ldrh	r3, [r7, #6]
 800742a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800742c:	88fb      	ldrh	r3, [r7, #6]
 800742e:	4618      	mov	r0, r3
 8007430:	f7f9 fa9a 	bl	8000968 <HAL_GPIO_EXTI_Callback>
  }
}
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	40010400 	.word	0x40010400

08007440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e081      	b.n	8007556 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d106      	bne.n	800746c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7f9 faea 	bl	8000a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2224      	movs	r2, #36	; 0x24
 8007470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0201 	bic.w	r2, r2, #1
 8007482:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007490:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689a      	ldr	r2, [r3, #8]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d107      	bne.n	80074ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689a      	ldr	r2, [r3, #8]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074b6:	609a      	str	r2, [r3, #8]
 80074b8:	e006      	b.n	80074c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80074c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d104      	bne.n	80074da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6812      	ldr	r2, [r2, #0]
 80074e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80074e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68da      	ldr	r2, [r3, #12]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691a      	ldr	r2, [r3, #16]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	69d9      	ldr	r1, [r3, #28]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a1a      	ldr	r2, [r3, #32]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f042 0201 	orr.w	r2, r2, #1
 8007536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
	...

08007560 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b088      	sub	sp, #32
 8007564:	af02      	add	r7, sp, #8
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	607a      	str	r2, [r7, #4]
 800756a:	461a      	mov	r2, r3
 800756c:	460b      	mov	r3, r1
 800756e:	817b      	strh	r3, [r7, #10]
 8007570:	4613      	mov	r3, r2
 8007572:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b20      	cmp	r3, #32
 800757e:	f040 80da 	bne.w	8007736 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007588:	2b01      	cmp	r3, #1
 800758a:	d101      	bne.n	8007590 <HAL_I2C_Master_Transmit+0x30>
 800758c:	2302      	movs	r3, #2
 800758e:	e0d3      	b.n	8007738 <HAL_I2C_Master_Transmit+0x1d8>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007598:	f7fd fe24 	bl	80051e4 <HAL_GetTick>
 800759c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	2319      	movs	r3, #25
 80075a4:	2201      	movs	r2, #1
 80075a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 fa11 	bl	80079d2 <I2C_WaitOnFlagUntilTimeout>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e0be      	b.n	8007738 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2221      	movs	r2, #33	; 0x21
 80075be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2210      	movs	r2, #16
 80075c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	893a      	ldrh	r2, [r7, #8]
 80075da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2bff      	cmp	r3, #255	; 0xff
 80075ea:	d90e      	bls.n	800760a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	22ff      	movs	r2, #255	; 0xff
 80075f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	8979      	ldrh	r1, [r7, #10]
 80075fa:	4b51      	ldr	r3, [pc, #324]	; (8007740 <HAL_I2C_Master_Transmit+0x1e0>)
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 fb8e 	bl	8007d24 <I2C_TransferConfig>
 8007608:	e06c      	b.n	80076e4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007618:	b2da      	uxtb	r2, r3
 800761a:	8979      	ldrh	r1, [r7, #10]
 800761c:	4b48      	ldr	r3, [pc, #288]	; (8007740 <HAL_I2C_Master_Transmit+0x1e0>)
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 fb7d 	bl	8007d24 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800762a:	e05b      	b.n	80076e4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	6a39      	ldr	r1, [r7, #32]
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 fa0e 	bl	8007a52 <I2C_WaitOnTXISFlagUntilTimeout>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e07b      	b.n	8007738 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	781a      	ldrb	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007668:	3b01      	subs	r3, #1
 800766a:	b29a      	uxth	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007674:	b29b      	uxth	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d034      	beq.n	80076e4 <HAL_I2C_Master_Transmit+0x184>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800767e:	2b00      	cmp	r3, #0
 8007680:	d130      	bne.n	80076e4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	2200      	movs	r2, #0
 800768a:	2180      	movs	r1, #128	; 0x80
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 f9a0 	bl	80079d2 <I2C_WaitOnFlagUntilTimeout>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e04d      	b.n	8007738 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	2bff      	cmp	r3, #255	; 0xff
 80076a4:	d90e      	bls.n	80076c4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	22ff      	movs	r2, #255	; 0xff
 80076aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	8979      	ldrh	r1, [r7, #10]
 80076b4:	2300      	movs	r3, #0
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 fb31 	bl	8007d24 <I2C_TransferConfig>
 80076c2:	e00f      	b.n	80076e4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	8979      	ldrh	r1, [r7, #10]
 80076d6:	2300      	movs	r3, #0
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 fb20 	bl	8007d24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d19e      	bne.n	800762c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	6a39      	ldr	r1, [r7, #32]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 f9ed 	bl	8007ad2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e01a      	b.n	8007738 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2220      	movs	r2, #32
 8007708:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6859      	ldr	r1, [r3, #4]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <HAL_I2C_Master_Transmit+0x1e4>)
 8007716:	400b      	ands	r3, r1
 8007718:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2220      	movs	r2, #32
 800771e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	e000      	b.n	8007738 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007736:	2302      	movs	r3, #2
  }
}
 8007738:	4618      	mov	r0, r3
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	80002000 	.word	0x80002000
 8007744:	fe00e800 	.word	0xfe00e800

08007748 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08a      	sub	sp, #40	; 0x28
 800774c:	af02      	add	r7, sp, #8
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	607a      	str	r2, [r7, #4]
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	460b      	mov	r3, r1
 8007756:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b20      	cmp	r3, #32
 8007766:	f040 80f1 	bne.w	800794c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007778:	d101      	bne.n	800777e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800777a:	2302      	movs	r3, #2
 800777c:	e0e7      	b.n	800794e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007784:	2b01      	cmp	r3, #1
 8007786:	d101      	bne.n	800778c <HAL_I2C_IsDeviceReady+0x44>
 8007788:	2302      	movs	r3, #2
 800778a:	e0e0      	b.n	800794e <HAL_I2C_IsDeviceReady+0x206>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2224      	movs	r2, #36	; 0x24
 8007798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d107      	bne.n	80077ba <HAL_I2C_IsDeviceReady+0x72>
 80077aa:	897b      	ldrh	r3, [r7, #10]
 80077ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80077b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80077b8:	e004      	b.n	80077c4 <HAL_I2C_IsDeviceReady+0x7c>
 80077ba:	897b      	ldrh	r3, [r7, #10]
 80077bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077c0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	6812      	ldr	r2, [r2, #0]
 80077c8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80077ca:	f7fd fd0b 	bl	80051e4 <HAL_GetTick>
 80077ce:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b20      	cmp	r3, #32
 80077dc:	bf0c      	ite	eq
 80077de:	2301      	moveq	r3, #1
 80077e0:	2300      	movne	r3, #0
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	f003 0310 	and.w	r3, r3, #16
 80077f0:	2b10      	cmp	r3, #16
 80077f2:	bf0c      	ite	eq
 80077f4:	2301      	moveq	r3, #1
 80077f6:	2300      	movne	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80077fc:	e034      	b.n	8007868 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007804:	d01a      	beq.n	800783c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007806:	f7fd fced 	bl	80051e4 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	429a      	cmp	r2, r3
 8007814:	d302      	bcc.n	800781c <HAL_I2C_IsDeviceReady+0xd4>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10f      	bne.n	800783c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2220      	movs	r2, #32
 8007820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007828:	f043 0220 	orr.w	r2, r3, #32
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e088      	b.n	800794e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b20      	cmp	r3, #32
 8007848:	bf0c      	ite	eq
 800784a:	2301      	moveq	r3, #1
 800784c:	2300      	movne	r3, #0
 800784e:	b2db      	uxtb	r3, r3
 8007850:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	f003 0310 	and.w	r3, r3, #16
 800785c:	2b10      	cmp	r3, #16
 800785e:	bf0c      	ite	eq
 8007860:	2301      	moveq	r3, #1
 8007862:	2300      	movne	r3, #0
 8007864:	b2db      	uxtb	r3, r3
 8007866:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007868:	7ffb      	ldrb	r3, [r7, #31]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d102      	bne.n	8007874 <HAL_I2C_IsDeviceReady+0x12c>
 800786e:	7fbb      	ldrb	r3, [r7, #30]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d0c4      	beq.n	80077fe <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	f003 0310 	and.w	r3, r3, #16
 800787e:	2b10      	cmp	r3, #16
 8007880:	d01a      	beq.n	80078b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2200      	movs	r2, #0
 800788a:	2120      	movs	r1, #32
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 f8a0 	bl	80079d2 <I2C_WaitOnFlagUntilTimeout>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e058      	b.n	800794e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2220      	movs	r2, #32
 80078a2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	e04a      	b.n	800794e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2200      	movs	r2, #0
 80078c0:	2120      	movs	r1, #32
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 f885 	bl	80079d2 <I2C_WaitOnFlagUntilTimeout>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e03d      	b.n	800794e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2210      	movs	r2, #16
 80078d8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2220      	movs	r2, #32
 80078e0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d118      	bne.n	800791c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078f8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2200      	movs	r2, #0
 8007902:	2120      	movs	r1, #32
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 f864 	bl	80079d2 <I2C_WaitOnFlagUntilTimeout>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e01c      	b.n	800794e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2220      	movs	r2, #32
 800791a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	3301      	adds	r3, #1
 8007920:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	429a      	cmp	r2, r3
 8007928:	f63f af3b 	bhi.w	80077a2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2220      	movs	r2, #32
 8007930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007938:	f043 0220 	orr.w	r2, r3, #32
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e000      	b.n	800794e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800794c:	2302      	movs	r3, #2
  }
}
 800794e:	4618      	mov	r0, r3
 8007950:	3720      	adds	r7, #32
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007972:	2b00      	cmp	r3, #0
 8007974:	d005      	beq.n	8007982 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	68f9      	ldr	r1, [r7, #12]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	4798      	blx	r3
  }
}
 8007982:	bf00      	nop
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b02      	cmp	r3, #2
 800799e:	d103      	bne.n	80079a8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2200      	movs	r2, #0
 80079a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d007      	beq.n	80079c6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	699a      	ldr	r2, [r3, #24]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0201 	orr.w	r2, r2, #1
 80079c4:	619a      	str	r2, [r3, #24]
  }
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	60f8      	str	r0, [r7, #12]
 80079da:	60b9      	str	r1, [r7, #8]
 80079dc:	603b      	str	r3, [r7, #0]
 80079de:	4613      	mov	r3, r2
 80079e0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079e2:	e022      	b.n	8007a2a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ea:	d01e      	beq.n	8007a2a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ec:	f7fd fbfa 	bl	80051e4 <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d302      	bcc.n	8007a02 <I2C_WaitOnFlagUntilTimeout+0x30>
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d113      	bne.n	8007a2a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a06:	f043 0220 	orr.w	r2, r3, #32
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2220      	movs	r2, #32
 8007a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e00f      	b.n	8007a4a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	699a      	ldr	r2, [r3, #24]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	4013      	ands	r3, r2
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	bf0c      	ite	eq
 8007a3a:	2301      	moveq	r3, #1
 8007a3c:	2300      	movne	r3, #0
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	461a      	mov	r2, r3
 8007a42:	79fb      	ldrb	r3, [r7, #7]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d0cd      	beq.n	80079e4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a5e:	e02c      	b.n	8007aba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	68b9      	ldr	r1, [r7, #8]
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 f871 	bl	8007b4c <I2C_IsErrorOccurred>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e02a      	b.n	8007aca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7a:	d01e      	beq.n	8007aba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a7c:	f7fd fbb2 	bl	80051e4 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d302      	bcc.n	8007a92 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d113      	bne.n	8007aba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a96:	f043 0220 	orr.w	r2, r3, #32
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e007      	b.n	8007aca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d1cb      	bne.n	8007a60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ade:	e028      	b.n	8007b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	68b9      	ldr	r1, [r7, #8]
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 f831 	bl	8007b4c <I2C_IsErrorOccurred>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e026      	b.n	8007b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007af4:	f7fd fb76 	bl	80051e4 <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d302      	bcc.n	8007b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d113      	bne.n	8007b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0e:	f043 0220 	orr.w	r2, r3, #32
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e007      	b.n	8007b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	d1cf      	bne.n	8007ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b08a      	sub	sp, #40	; 0x28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007b66:	2300      	movs	r3, #0
 8007b68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	f003 0310 	and.w	r3, r3, #16
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d075      	beq.n	8007c64 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2210      	movs	r2, #16
 8007b7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b80:	e056      	b.n	8007c30 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b88:	d052      	beq.n	8007c30 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b8a:	f7fd fb2b 	bl	80051e4 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d302      	bcc.n	8007ba0 <I2C_IsErrorOccurred+0x54>
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d147      	bne.n	8007c30 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007baa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bc2:	d12e      	bne.n	8007c22 <I2C_IsErrorOccurred+0xd6>
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bca:	d02a      	beq.n	8007c22 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007bcc:	7cfb      	ldrb	r3, [r7, #19]
 8007bce:	2b20      	cmp	r3, #32
 8007bd0:	d027      	beq.n	8007c22 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007be0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007be2:	f7fd faff 	bl	80051e4 <HAL_GetTick>
 8007be6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007be8:	e01b      	b.n	8007c22 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007bea:	f7fd fafb 	bl	80051e4 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	2b19      	cmp	r3, #25
 8007bf6:	d914      	bls.n	8007c22 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfc:	f043 0220 	orr.w	r2, r3, #32
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	f003 0320 	and.w	r3, r3, #32
 8007c2c:	2b20      	cmp	r3, #32
 8007c2e:	d1dc      	bne.n	8007bea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b20      	cmp	r3, #32
 8007c3c:	d003      	beq.n	8007c46 <I2C_IsErrorOccurred+0xfa>
 8007c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d09d      	beq.n	8007b82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d103      	bne.n	8007c56 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2220      	movs	r2, #32
 8007c54:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	f043 0304 	orr.w	r3, r3, #4
 8007c5c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00b      	beq.n	8007c8e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	f043 0301 	orr.w	r3, r3, #1
 8007c7c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00b      	beq.n	8007cb0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	f043 0308 	orr.w	r3, r3, #8
 8007c9e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ca8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00b      	beq.n	8007cd2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	f043 0302 	orr.w	r3, r3, #2
 8007cc0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d01c      	beq.n	8007d14 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff fe55 	bl	800798a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6859      	ldr	r1, [r3, #4]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	4b0d      	ldr	r3, [pc, #52]	; (8007d20 <I2C_IsErrorOccurred+0x1d4>)
 8007cec:	400b      	ands	r3, r1
 8007cee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3728      	adds	r7, #40	; 0x28
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	fe00e800 	.word	0xfe00e800

08007d24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b087      	sub	sp, #28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	607b      	str	r3, [r7, #4]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	817b      	strh	r3, [r7, #10]
 8007d32:	4613      	mov	r3, r2
 8007d34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007d36:	897b      	ldrh	r3, [r7, #10]
 8007d38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007d3c:	7a7b      	ldrb	r3, [r7, #9]
 8007d3e:	041b      	lsls	r3, r3, #16
 8007d40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007d44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	0d5b      	lsrs	r3, r3, #21
 8007d5e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007d62:	4b08      	ldr	r3, [pc, #32]	; (8007d84 <I2C_TransferConfig+0x60>)
 8007d64:	430b      	orrs	r3, r1
 8007d66:	43db      	mvns	r3, r3
 8007d68:	ea02 0103 	and.w	r1, r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007d76:	bf00      	nop
 8007d78:	371c      	adds	r7, #28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	03ff63ff 	.word	0x03ff63ff

08007d88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	d138      	bne.n	8007e10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d101      	bne.n	8007dac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007da8:	2302      	movs	r3, #2
 8007daa:	e032      	b.n	8007e12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2224      	movs	r2, #36	; 0x24
 8007db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f022 0201 	bic.w	r2, r2, #1
 8007dca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007dda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6819      	ldr	r1, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0201 	orr.w	r2, r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	e000      	b.n	8007e12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e10:	2302      	movs	r3, #2
  }
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b085      	sub	sp, #20
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b20      	cmp	r3, #32
 8007e32:	d139      	bne.n	8007ea8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d101      	bne.n	8007e42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e033      	b.n	8007eaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2224      	movs	r2, #36	; 0x24
 8007e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 0201 	bic.w	r2, r2, #1
 8007e60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007e70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0201 	orr.w	r2, r2, #1
 8007e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e000      	b.n	8007eaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ea8:	2302      	movs	r3, #2
  }
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
	...

08007eb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007ebc:	4b04      	ldr	r3, [pc, #16]	; (8007ed0 <HAL_PWREx_GetVoltageRange+0x18>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	40007000 	.word	0x40007000

08007ed4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ee2:	d130      	bne.n	8007f46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007ee4:	4b23      	ldr	r3, [pc, #140]	; (8007f74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef0:	d038      	beq.n	8007f64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ef2:	4b20      	ldr	r3, [pc, #128]	; (8007f74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007efa:	4a1e      	ldr	r2, [pc, #120]	; (8007f74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007efc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007f02:	4b1d      	ldr	r3, [pc, #116]	; (8007f78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2232      	movs	r2, #50	; 0x32
 8007f08:	fb02 f303 	mul.w	r3, r2, r3
 8007f0c:	4a1b      	ldr	r2, [pc, #108]	; (8007f7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f12:	0c9b      	lsrs	r3, r3, #18
 8007f14:	3301      	adds	r3, #1
 8007f16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f18:	e002      	b.n	8007f20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f20:	4b14      	ldr	r3, [pc, #80]	; (8007f74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f2c:	d102      	bne.n	8007f34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1f2      	bne.n	8007f1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f34:	4b0f      	ldr	r3, [pc, #60]	; (8007f74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f40:	d110      	bne.n	8007f64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e00f      	b.n	8007f66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f46:	4b0b      	ldr	r3, [pc, #44]	; (8007f74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f52:	d007      	beq.n	8007f64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007f54:	4b07      	ldr	r3, [pc, #28]	; (8007f74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007f5c:	4a05      	ldr	r2, [pc, #20]	; (8007f74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	40007000 	.word	0x40007000
 8007f78:	20000010 	.word	0x20000010
 8007f7c:	431bde83 	.word	0x431bde83

08007f80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e3ca      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f92:	4b97      	ldr	r3, [pc, #604]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f003 030c 	and.w	r3, r3, #12
 8007f9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f9c:	4b94      	ldr	r3, [pc, #592]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f003 0303 	and.w	r3, r3, #3
 8007fa4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0310 	and.w	r3, r3, #16
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 80e4 	beq.w	800817c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d007      	beq.n	8007fca <HAL_RCC_OscConfig+0x4a>
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	2b0c      	cmp	r3, #12
 8007fbe:	f040 808b 	bne.w	80080d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	f040 8087 	bne.w	80080d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007fca:	4b89      	ldr	r3, [pc, #548]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d005      	beq.n	8007fe2 <HAL_RCC_OscConfig+0x62>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e3a2      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1a      	ldr	r2, [r3, #32]
 8007fe6:	4b82      	ldr	r3, [pc, #520]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0308 	and.w	r3, r3, #8
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d004      	beq.n	8007ffc <HAL_RCC_OscConfig+0x7c>
 8007ff2:	4b7f      	ldr	r3, [pc, #508]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ffa:	e005      	b.n	8008008 <HAL_RCC_OscConfig+0x88>
 8007ffc:	4b7c      	ldr	r3, [pc, #496]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8007ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008002:	091b      	lsrs	r3, r3, #4
 8008004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008008:	4293      	cmp	r3, r2
 800800a:	d223      	bcs.n	8008054 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fd55 	bl	8008ac0 <RCC_SetFlashLatencyFromMSIRange>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e383      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008020:	4b73      	ldr	r3, [pc, #460]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a72      	ldr	r2, [pc, #456]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8008026:	f043 0308 	orr.w	r3, r3, #8
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	4b70      	ldr	r3, [pc, #448]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a1b      	ldr	r3, [r3, #32]
 8008038:	496d      	ldr	r1, [pc, #436]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 800803a:	4313      	orrs	r3, r2
 800803c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800803e:	4b6c      	ldr	r3, [pc, #432]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	021b      	lsls	r3, r3, #8
 800804c:	4968      	ldr	r1, [pc, #416]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 800804e:	4313      	orrs	r3, r2
 8008050:	604b      	str	r3, [r1, #4]
 8008052:	e025      	b.n	80080a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008054:	4b66      	ldr	r3, [pc, #408]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a65      	ldr	r2, [pc, #404]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 800805a:	f043 0308 	orr.w	r3, r3, #8
 800805e:	6013      	str	r3, [r2, #0]
 8008060:	4b63      	ldr	r3, [pc, #396]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	4960      	ldr	r1, [pc, #384]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 800806e:	4313      	orrs	r3, r2
 8008070:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008072:	4b5f      	ldr	r3, [pc, #380]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	021b      	lsls	r3, r3, #8
 8008080:	495b      	ldr	r1, [pc, #364]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8008082:	4313      	orrs	r3, r2
 8008084:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d109      	bne.n	80080a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	4618      	mov	r0, r3
 8008092:	f000 fd15 	bl	8008ac0 <RCC_SetFlashLatencyFromMSIRange>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d001      	beq.n	80080a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e343      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80080a0:	f000 fc4a 	bl	8008938 <HAL_RCC_GetSysClockFreq>
 80080a4:	4602      	mov	r2, r0
 80080a6:	4b52      	ldr	r3, [pc, #328]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	091b      	lsrs	r3, r3, #4
 80080ac:	f003 030f 	and.w	r3, r3, #15
 80080b0:	4950      	ldr	r1, [pc, #320]	; (80081f4 <HAL_RCC_OscConfig+0x274>)
 80080b2:	5ccb      	ldrb	r3, [r1, r3]
 80080b4:	f003 031f 	and.w	r3, r3, #31
 80080b8:	fa22 f303 	lsr.w	r3, r2, r3
 80080bc:	4a4e      	ldr	r2, [pc, #312]	; (80081f8 <HAL_RCC_OscConfig+0x278>)
 80080be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80080c0:	4b4e      	ldr	r3, [pc, #312]	; (80081fc <HAL_RCC_OscConfig+0x27c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fd f83d 	bl	8005144 <HAL_InitTick>
 80080ca:	4603      	mov	r3, r0
 80080cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d052      	beq.n	800817a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	e327      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d032      	beq.n	8008146 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80080e0:	4b43      	ldr	r3, [pc, #268]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a42      	ldr	r2, [pc, #264]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 80080e6:	f043 0301 	orr.w	r3, r3, #1
 80080ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80080ec:	f7fd f87a 	bl	80051e4 <HAL_GetTick>
 80080f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80080f2:	e008      	b.n	8008106 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80080f4:	f7fd f876 	bl	80051e4 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d901      	bls.n	8008106 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e310      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008106:	4b3a      	ldr	r3, [pc, #232]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b00      	cmp	r3, #0
 8008110:	d0f0      	beq.n	80080f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008112:	4b37      	ldr	r3, [pc, #220]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a36      	ldr	r2, [pc, #216]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8008118:	f043 0308 	orr.w	r3, r3, #8
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	4b34      	ldr	r3, [pc, #208]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	4931      	ldr	r1, [pc, #196]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 800812c:	4313      	orrs	r3, r2
 800812e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008130:	4b2f      	ldr	r3, [pc, #188]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	021b      	lsls	r3, r3, #8
 800813e:	492c      	ldr	r1, [pc, #176]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8008140:	4313      	orrs	r3, r2
 8008142:	604b      	str	r3, [r1, #4]
 8008144:	e01a      	b.n	800817c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008146:	4b2a      	ldr	r3, [pc, #168]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a29      	ldr	r2, [pc, #164]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 800814c:	f023 0301 	bic.w	r3, r3, #1
 8008150:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008152:	f7fd f847 	bl	80051e4 <HAL_GetTick>
 8008156:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008158:	e008      	b.n	800816c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800815a:	f7fd f843 	bl	80051e4 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	2b02      	cmp	r3, #2
 8008166:	d901      	bls.n	800816c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e2dd      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800816c:	4b20      	ldr	r3, [pc, #128]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1f0      	bne.n	800815a <HAL_RCC_OscConfig+0x1da>
 8008178:	e000      	b.n	800817c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800817a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	2b00      	cmp	r3, #0
 8008186:	d074      	beq.n	8008272 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	2b08      	cmp	r3, #8
 800818c:	d005      	beq.n	800819a <HAL_RCC_OscConfig+0x21a>
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	2b0c      	cmp	r3, #12
 8008192:	d10e      	bne.n	80081b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2b03      	cmp	r3, #3
 8008198:	d10b      	bne.n	80081b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800819a:	4b15      	ldr	r3, [pc, #84]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d064      	beq.n	8008270 <HAL_RCC_OscConfig+0x2f0>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d160      	bne.n	8008270 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e2ba      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081ba:	d106      	bne.n	80081ca <HAL_RCC_OscConfig+0x24a>
 80081bc:	4b0c      	ldr	r3, [pc, #48]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a0b      	ldr	r2, [pc, #44]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 80081c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081c6:	6013      	str	r3, [r2, #0]
 80081c8:	e026      	b.n	8008218 <HAL_RCC_OscConfig+0x298>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081d2:	d115      	bne.n	8008200 <HAL_RCC_OscConfig+0x280>
 80081d4:	4b06      	ldr	r3, [pc, #24]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a05      	ldr	r2, [pc, #20]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 80081da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081de:	6013      	str	r3, [r2, #0]
 80081e0:	4b03      	ldr	r3, [pc, #12]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a02      	ldr	r2, [pc, #8]	; (80081f0 <HAL_RCC_OscConfig+0x270>)
 80081e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	e014      	b.n	8008218 <HAL_RCC_OscConfig+0x298>
 80081ee:	bf00      	nop
 80081f0:	40021000 	.word	0x40021000
 80081f4:	0800d0f4 	.word	0x0800d0f4
 80081f8:	20000010 	.word	0x20000010
 80081fc:	20000014 	.word	0x20000014
 8008200:	4ba0      	ldr	r3, [pc, #640]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a9f      	ldr	r2, [pc, #636]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	4b9d      	ldr	r3, [pc, #628]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a9c      	ldr	r2, [pc, #624]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d013      	beq.n	8008248 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008220:	f7fc ffe0 	bl	80051e4 <HAL_GetTick>
 8008224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008226:	e008      	b.n	800823a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008228:	f7fc ffdc 	bl	80051e4 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2b64      	cmp	r3, #100	; 0x64
 8008234:	d901      	bls.n	800823a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e276      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800823a:	4b92      	ldr	r3, [pc, #584]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0f0      	beq.n	8008228 <HAL_RCC_OscConfig+0x2a8>
 8008246:	e014      	b.n	8008272 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008248:	f7fc ffcc 	bl	80051e4 <HAL_GetTick>
 800824c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800824e:	e008      	b.n	8008262 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008250:	f7fc ffc8 	bl	80051e4 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2b64      	cmp	r3, #100	; 0x64
 800825c:	d901      	bls.n	8008262 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e262      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008262:	4b88      	ldr	r3, [pc, #544]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1f0      	bne.n	8008250 <HAL_RCC_OscConfig+0x2d0>
 800826e:	e000      	b.n	8008272 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0302 	and.w	r3, r3, #2
 800827a:	2b00      	cmp	r3, #0
 800827c:	d060      	beq.n	8008340 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	2b04      	cmp	r3, #4
 8008282:	d005      	beq.n	8008290 <HAL_RCC_OscConfig+0x310>
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	2b0c      	cmp	r3, #12
 8008288:	d119      	bne.n	80082be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	2b02      	cmp	r3, #2
 800828e:	d116      	bne.n	80082be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008290:	4b7c      	ldr	r3, [pc, #496]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008298:	2b00      	cmp	r3, #0
 800829a:	d005      	beq.n	80082a8 <HAL_RCC_OscConfig+0x328>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e23f      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082a8:	4b76      	ldr	r3, [pc, #472]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	061b      	lsls	r3, r3, #24
 80082b6:	4973      	ldr	r1, [pc, #460]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082bc:	e040      	b.n	8008340 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d023      	beq.n	800830e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082c6:	4b6f      	ldr	r3, [pc, #444]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a6e      	ldr	r2, [pc, #440]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 80082cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082d2:	f7fc ff87 	bl	80051e4 <HAL_GetTick>
 80082d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80082d8:	e008      	b.n	80082ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082da:	f7fc ff83 	bl	80051e4 <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d901      	bls.n	80082ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e21d      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80082ec:	4b65      	ldr	r3, [pc, #404]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d0f0      	beq.n	80082da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082f8:	4b62      	ldr	r3, [pc, #392]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	061b      	lsls	r3, r3, #24
 8008306:	495f      	ldr	r1, [pc, #380]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008308:	4313      	orrs	r3, r2
 800830a:	604b      	str	r3, [r1, #4]
 800830c:	e018      	b.n	8008340 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800830e:	4b5d      	ldr	r3, [pc, #372]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a5c      	ldr	r2, [pc, #368]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800831a:	f7fc ff63 	bl	80051e4 <HAL_GetTick>
 800831e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008320:	e008      	b.n	8008334 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008322:	f7fc ff5f 	bl	80051e4 <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	2b02      	cmp	r3, #2
 800832e:	d901      	bls.n	8008334 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e1f9      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008334:	4b53      	ldr	r3, [pc, #332]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1f0      	bne.n	8008322 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0308 	and.w	r3, r3, #8
 8008348:	2b00      	cmp	r3, #0
 800834a:	d03c      	beq.n	80083c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	695b      	ldr	r3, [r3, #20]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d01c      	beq.n	800838e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008354:	4b4b      	ldr	r3, [pc, #300]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800835a:	4a4a      	ldr	r2, [pc, #296]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 800835c:	f043 0301 	orr.w	r3, r3, #1
 8008360:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008364:	f7fc ff3e 	bl	80051e4 <HAL_GetTick>
 8008368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800836a:	e008      	b.n	800837e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800836c:	f7fc ff3a 	bl	80051e4 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	2b02      	cmp	r3, #2
 8008378:	d901      	bls.n	800837e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e1d4      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800837e:	4b41      	ldr	r3, [pc, #260]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d0ef      	beq.n	800836c <HAL_RCC_OscConfig+0x3ec>
 800838c:	e01b      	b.n	80083c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800838e:	4b3d      	ldr	r3, [pc, #244]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008394:	4a3b      	ldr	r2, [pc, #236]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008396:	f023 0301 	bic.w	r3, r3, #1
 800839a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800839e:	f7fc ff21 	bl	80051e4 <HAL_GetTick>
 80083a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80083a4:	e008      	b.n	80083b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083a6:	f7fc ff1d 	bl	80051e4 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d901      	bls.n	80083b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e1b7      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80083b8:	4b32      	ldr	r3, [pc, #200]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 80083ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1ef      	bne.n	80083a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0304 	and.w	r3, r3, #4
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 80a6 	beq.w	8008520 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083d4:	2300      	movs	r3, #0
 80083d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80083d8:	4b2a      	ldr	r3, [pc, #168]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 80083da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10d      	bne.n	8008400 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083e4:	4b27      	ldr	r3, [pc, #156]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 80083e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e8:	4a26      	ldr	r2, [pc, #152]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 80083ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ee:	6593      	str	r3, [r2, #88]	; 0x58
 80083f0:	4b24      	ldr	r3, [pc, #144]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 80083f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083f8:	60bb      	str	r3, [r7, #8]
 80083fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083fc:	2301      	movs	r3, #1
 80083fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008400:	4b21      	ldr	r3, [pc, #132]	; (8008488 <HAL_RCC_OscConfig+0x508>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008408:	2b00      	cmp	r3, #0
 800840a:	d118      	bne.n	800843e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800840c:	4b1e      	ldr	r3, [pc, #120]	; (8008488 <HAL_RCC_OscConfig+0x508>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a1d      	ldr	r2, [pc, #116]	; (8008488 <HAL_RCC_OscConfig+0x508>)
 8008412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008416:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008418:	f7fc fee4 	bl	80051e4 <HAL_GetTick>
 800841c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800841e:	e008      	b.n	8008432 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008420:	f7fc fee0 	bl	80051e4 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	2b02      	cmp	r3, #2
 800842c:	d901      	bls.n	8008432 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e17a      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008432:	4b15      	ldr	r3, [pc, #84]	; (8008488 <HAL_RCC_OscConfig+0x508>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800843a:	2b00      	cmp	r3, #0
 800843c:	d0f0      	beq.n	8008420 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d108      	bne.n	8008458 <HAL_RCC_OscConfig+0x4d8>
 8008446:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800844c:	4a0d      	ldr	r2, [pc, #52]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 800844e:	f043 0301 	orr.w	r3, r3, #1
 8008452:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008456:	e029      	b.n	80084ac <HAL_RCC_OscConfig+0x52c>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	2b05      	cmp	r3, #5
 800845e:	d115      	bne.n	800848c <HAL_RCC_OscConfig+0x50c>
 8008460:	4b08      	ldr	r3, [pc, #32]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008466:	4a07      	ldr	r2, [pc, #28]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008468:	f043 0304 	orr.w	r3, r3, #4
 800846c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008470:	4b04      	ldr	r3, [pc, #16]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008476:	4a03      	ldr	r2, [pc, #12]	; (8008484 <HAL_RCC_OscConfig+0x504>)
 8008478:	f043 0301 	orr.w	r3, r3, #1
 800847c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008480:	e014      	b.n	80084ac <HAL_RCC_OscConfig+0x52c>
 8008482:	bf00      	nop
 8008484:	40021000 	.word	0x40021000
 8008488:	40007000 	.word	0x40007000
 800848c:	4b9c      	ldr	r3, [pc, #624]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 800848e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008492:	4a9b      	ldr	r2, [pc, #620]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 8008494:	f023 0301 	bic.w	r3, r3, #1
 8008498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800849c:	4b98      	ldr	r3, [pc, #608]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 800849e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084a2:	4a97      	ldr	r2, [pc, #604]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 80084a4:	f023 0304 	bic.w	r3, r3, #4
 80084a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d016      	beq.n	80084e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084b4:	f7fc fe96 	bl	80051e4 <HAL_GetTick>
 80084b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084ba:	e00a      	b.n	80084d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084bc:	f7fc fe92 	bl	80051e4 <HAL_GetTick>
 80084c0:	4602      	mov	r2, r0
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d901      	bls.n	80084d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e12a      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084d2:	4b8b      	ldr	r3, [pc, #556]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 80084d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d8:	f003 0302 	and.w	r3, r3, #2
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d0ed      	beq.n	80084bc <HAL_RCC_OscConfig+0x53c>
 80084e0:	e015      	b.n	800850e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084e2:	f7fc fe7f 	bl	80051e4 <HAL_GetTick>
 80084e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80084e8:	e00a      	b.n	8008500 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084ea:	f7fc fe7b 	bl	80051e4 <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d901      	bls.n	8008500 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e113      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008500:	4b7f      	ldr	r3, [pc, #508]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 8008502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1ed      	bne.n	80084ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800850e:	7ffb      	ldrb	r3, [r7, #31]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d105      	bne.n	8008520 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008514:	4b7a      	ldr	r3, [pc, #488]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 8008516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008518:	4a79      	ldr	r2, [pc, #484]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 800851a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800851e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 80fe 	beq.w	8008726 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852e:	2b02      	cmp	r3, #2
 8008530:	f040 80d0 	bne.w	80086d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008534:	4b72      	ldr	r3, [pc, #456]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f003 0203 	and.w	r2, r3, #3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008544:	429a      	cmp	r2, r3
 8008546:	d130      	bne.n	80085aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008552:	3b01      	subs	r3, #1
 8008554:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008556:	429a      	cmp	r2, r3
 8008558:	d127      	bne.n	80085aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008564:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008566:	429a      	cmp	r2, r3
 8008568:	d11f      	bne.n	80085aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008574:	2a07      	cmp	r2, #7
 8008576:	bf14      	ite	ne
 8008578:	2201      	movne	r2, #1
 800857a:	2200      	moveq	r2, #0
 800857c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800857e:	4293      	cmp	r3, r2
 8008580:	d113      	bne.n	80085aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858c:	085b      	lsrs	r3, r3, #1
 800858e:	3b01      	subs	r3, #1
 8008590:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008592:	429a      	cmp	r2, r3
 8008594:	d109      	bne.n	80085aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a0:	085b      	lsrs	r3, r3, #1
 80085a2:	3b01      	subs	r3, #1
 80085a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d06e      	beq.n	8008688 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	2b0c      	cmp	r3, #12
 80085ae:	d069      	beq.n	8008684 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80085b0:	4b53      	ldr	r3, [pc, #332]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d105      	bne.n	80085c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80085bc:	4b50      	ldr	r3, [pc, #320]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e0ad      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80085cc:	4b4c      	ldr	r3, [pc, #304]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a4b      	ldr	r2, [pc, #300]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 80085d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80085d8:	f7fc fe04 	bl	80051e4 <HAL_GetTick>
 80085dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085de:	e008      	b.n	80085f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085e0:	f7fc fe00 	bl	80051e4 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e09a      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085f2:	4b43      	ldr	r3, [pc, #268]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1f0      	bne.n	80085e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085fe:	4b40      	ldr	r3, [pc, #256]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	4b40      	ldr	r3, [pc, #256]	; (8008704 <HAL_RCC_OscConfig+0x784>)
 8008604:	4013      	ands	r3, r2
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800860e:	3a01      	subs	r2, #1
 8008610:	0112      	lsls	r2, r2, #4
 8008612:	4311      	orrs	r1, r2
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008618:	0212      	lsls	r2, r2, #8
 800861a:	4311      	orrs	r1, r2
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008620:	0852      	lsrs	r2, r2, #1
 8008622:	3a01      	subs	r2, #1
 8008624:	0552      	lsls	r2, r2, #21
 8008626:	4311      	orrs	r1, r2
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800862c:	0852      	lsrs	r2, r2, #1
 800862e:	3a01      	subs	r2, #1
 8008630:	0652      	lsls	r2, r2, #25
 8008632:	4311      	orrs	r1, r2
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008638:	0912      	lsrs	r2, r2, #4
 800863a:	0452      	lsls	r2, r2, #17
 800863c:	430a      	orrs	r2, r1
 800863e:	4930      	ldr	r1, [pc, #192]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 8008640:	4313      	orrs	r3, r2
 8008642:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008644:	4b2e      	ldr	r3, [pc, #184]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a2d      	ldr	r2, [pc, #180]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 800864a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800864e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008650:	4b2b      	ldr	r3, [pc, #172]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	4a2a      	ldr	r2, [pc, #168]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 8008656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800865a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800865c:	f7fc fdc2 	bl	80051e4 <HAL_GetTick>
 8008660:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008662:	e008      	b.n	8008676 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008664:	f7fc fdbe 	bl	80051e4 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	2b02      	cmp	r3, #2
 8008670:	d901      	bls.n	8008676 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e058      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008676:	4b22      	ldr	r3, [pc, #136]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0f0      	beq.n	8008664 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008682:	e050      	b.n	8008726 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e04f      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008688:	4b1d      	ldr	r3, [pc, #116]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d148      	bne.n	8008726 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008694:	4b1a      	ldr	r3, [pc, #104]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a19      	ldr	r2, [pc, #100]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 800869a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800869e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80086a0:	4b17      	ldr	r3, [pc, #92]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	4a16      	ldr	r2, [pc, #88]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 80086a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80086ac:	f7fc fd9a 	bl	80051e4 <HAL_GetTick>
 80086b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086b2:	e008      	b.n	80086c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086b4:	f7fc fd96 	bl	80051e4 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d901      	bls.n	80086c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e030      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086c6:	4b0e      	ldr	r3, [pc, #56]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d0f0      	beq.n	80086b4 <HAL_RCC_OscConfig+0x734>
 80086d2:	e028      	b.n	8008726 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	2b0c      	cmp	r3, #12
 80086d8:	d023      	beq.n	8008722 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086da:	4b09      	ldr	r3, [pc, #36]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a08      	ldr	r2, [pc, #32]	; (8008700 <HAL_RCC_OscConfig+0x780>)
 80086e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e6:	f7fc fd7d 	bl	80051e4 <HAL_GetTick>
 80086ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086ec:	e00c      	b.n	8008708 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086ee:	f7fc fd79 	bl	80051e4 <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d905      	bls.n	8008708 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e013      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
 8008700:	40021000 	.word	0x40021000
 8008704:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008708:	4b09      	ldr	r3, [pc, #36]	; (8008730 <HAL_RCC_OscConfig+0x7b0>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1ec      	bne.n	80086ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008714:	4b06      	ldr	r3, [pc, #24]	; (8008730 <HAL_RCC_OscConfig+0x7b0>)
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	4905      	ldr	r1, [pc, #20]	; (8008730 <HAL_RCC_OscConfig+0x7b0>)
 800871a:	4b06      	ldr	r3, [pc, #24]	; (8008734 <HAL_RCC_OscConfig+0x7b4>)
 800871c:	4013      	ands	r3, r2
 800871e:	60cb      	str	r3, [r1, #12]
 8008720:	e001      	b.n	8008726 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e000      	b.n	8008728 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3720      	adds	r7, #32
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	40021000 	.word	0x40021000
 8008734:	feeefffc 	.word	0xfeeefffc

08008738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e0e7      	b.n	800891c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800874c:	4b75      	ldr	r3, [pc, #468]	; (8008924 <HAL_RCC_ClockConfig+0x1ec>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0307 	and.w	r3, r3, #7
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	429a      	cmp	r2, r3
 8008758:	d910      	bls.n	800877c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800875a:	4b72      	ldr	r3, [pc, #456]	; (8008924 <HAL_RCC_ClockConfig+0x1ec>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f023 0207 	bic.w	r2, r3, #7
 8008762:	4970      	ldr	r1, [pc, #448]	; (8008924 <HAL_RCC_ClockConfig+0x1ec>)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	4313      	orrs	r3, r2
 8008768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800876a:	4b6e      	ldr	r3, [pc, #440]	; (8008924 <HAL_RCC_ClockConfig+0x1ec>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0307 	and.w	r3, r3, #7
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	429a      	cmp	r2, r3
 8008776:	d001      	beq.n	800877c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e0cf      	b.n	800891c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0302 	and.w	r3, r3, #2
 8008784:	2b00      	cmp	r3, #0
 8008786:	d010      	beq.n	80087aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689a      	ldr	r2, [r3, #8]
 800878c:	4b66      	ldr	r3, [pc, #408]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008794:	429a      	cmp	r2, r3
 8008796:	d908      	bls.n	80087aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008798:	4b63      	ldr	r3, [pc, #396]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	4960      	ldr	r1, [pc, #384]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d04c      	beq.n	8008850 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	d107      	bne.n	80087ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087be:	4b5a      	ldr	r3, [pc, #360]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d121      	bne.n	800880e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e0a6      	b.n	800891c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d107      	bne.n	80087e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087d6:	4b54      	ldr	r3, [pc, #336]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d115      	bne.n	800880e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e09a      	b.n	800891c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d107      	bne.n	80087fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80087ee:	4b4e      	ldr	r3, [pc, #312]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d109      	bne.n	800880e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e08e      	b.n	800891c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087fe:	4b4a      	ldr	r3, [pc, #296]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e086      	b.n	800891c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800880e:	4b46      	ldr	r3, [pc, #280]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f023 0203 	bic.w	r2, r3, #3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	4943      	ldr	r1, [pc, #268]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 800881c:	4313      	orrs	r3, r2
 800881e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008820:	f7fc fce0 	bl	80051e4 <HAL_GetTick>
 8008824:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008826:	e00a      	b.n	800883e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008828:	f7fc fcdc 	bl	80051e4 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	f241 3288 	movw	r2, #5000	; 0x1388
 8008836:	4293      	cmp	r3, r2
 8008838:	d901      	bls.n	800883e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e06e      	b.n	800891c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800883e:	4b3a      	ldr	r3, [pc, #232]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f003 020c 	and.w	r2, r3, #12
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	429a      	cmp	r2, r3
 800884e:	d1eb      	bne.n	8008828 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0302 	and.w	r3, r3, #2
 8008858:	2b00      	cmp	r3, #0
 800885a:	d010      	beq.n	800887e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	4b31      	ldr	r3, [pc, #196]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008868:	429a      	cmp	r2, r3
 800886a:	d208      	bcs.n	800887e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800886c:	4b2e      	ldr	r3, [pc, #184]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	492b      	ldr	r1, [pc, #172]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 800887a:	4313      	orrs	r3, r2
 800887c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800887e:	4b29      	ldr	r3, [pc, #164]	; (8008924 <HAL_RCC_ClockConfig+0x1ec>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 0307 	and.w	r3, r3, #7
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	429a      	cmp	r2, r3
 800888a:	d210      	bcs.n	80088ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800888c:	4b25      	ldr	r3, [pc, #148]	; (8008924 <HAL_RCC_ClockConfig+0x1ec>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f023 0207 	bic.w	r2, r3, #7
 8008894:	4923      	ldr	r1, [pc, #140]	; (8008924 <HAL_RCC_ClockConfig+0x1ec>)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	4313      	orrs	r3, r2
 800889a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800889c:	4b21      	ldr	r3, [pc, #132]	; (8008924 <HAL_RCC_ClockConfig+0x1ec>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0307 	and.w	r3, r3, #7
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d001      	beq.n	80088ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e036      	b.n	800891c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0304 	and.w	r3, r3, #4
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d008      	beq.n	80088cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088ba:	4b1b      	ldr	r3, [pc, #108]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	4918      	ldr	r1, [pc, #96]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0308 	and.w	r3, r3, #8
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d009      	beq.n	80088ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80088d8:	4b13      	ldr	r3, [pc, #76]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	00db      	lsls	r3, r3, #3
 80088e6:	4910      	ldr	r1, [pc, #64]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80088ec:	f000 f824 	bl	8008938 <HAL_RCC_GetSysClockFreq>
 80088f0:	4602      	mov	r2, r0
 80088f2:	4b0d      	ldr	r3, [pc, #52]	; (8008928 <HAL_RCC_ClockConfig+0x1f0>)
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	091b      	lsrs	r3, r3, #4
 80088f8:	f003 030f 	and.w	r3, r3, #15
 80088fc:	490b      	ldr	r1, [pc, #44]	; (800892c <HAL_RCC_ClockConfig+0x1f4>)
 80088fe:	5ccb      	ldrb	r3, [r1, r3]
 8008900:	f003 031f 	and.w	r3, r3, #31
 8008904:	fa22 f303 	lsr.w	r3, r2, r3
 8008908:	4a09      	ldr	r2, [pc, #36]	; (8008930 <HAL_RCC_ClockConfig+0x1f8>)
 800890a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800890c:	4b09      	ldr	r3, [pc, #36]	; (8008934 <HAL_RCC_ClockConfig+0x1fc>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4618      	mov	r0, r3
 8008912:	f7fc fc17 	bl	8005144 <HAL_InitTick>
 8008916:	4603      	mov	r3, r0
 8008918:	72fb      	strb	r3, [r7, #11]

  return status;
 800891a:	7afb      	ldrb	r3, [r7, #11]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	40022000 	.word	0x40022000
 8008928:	40021000 	.word	0x40021000
 800892c:	0800d0f4 	.word	0x0800d0f4
 8008930:	20000010 	.word	0x20000010
 8008934:	20000014 	.word	0x20000014

08008938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008938:	b480      	push	{r7}
 800893a:	b089      	sub	sp, #36	; 0x24
 800893c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	61fb      	str	r3, [r7, #28]
 8008942:	2300      	movs	r3, #0
 8008944:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008946:	4b3e      	ldr	r3, [pc, #248]	; (8008a40 <HAL_RCC_GetSysClockFreq+0x108>)
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f003 030c 	and.w	r3, r3, #12
 800894e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008950:	4b3b      	ldr	r3, [pc, #236]	; (8008a40 <HAL_RCC_GetSysClockFreq+0x108>)
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	f003 0303 	and.w	r3, r3, #3
 8008958:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d005      	beq.n	800896c <HAL_RCC_GetSysClockFreq+0x34>
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	2b0c      	cmp	r3, #12
 8008964:	d121      	bne.n	80089aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d11e      	bne.n	80089aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800896c:	4b34      	ldr	r3, [pc, #208]	; (8008a40 <HAL_RCC_GetSysClockFreq+0x108>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 0308 	and.w	r3, r3, #8
 8008974:	2b00      	cmp	r3, #0
 8008976:	d107      	bne.n	8008988 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008978:	4b31      	ldr	r3, [pc, #196]	; (8008a40 <HAL_RCC_GetSysClockFreq+0x108>)
 800897a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800897e:	0a1b      	lsrs	r3, r3, #8
 8008980:	f003 030f 	and.w	r3, r3, #15
 8008984:	61fb      	str	r3, [r7, #28]
 8008986:	e005      	b.n	8008994 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008988:	4b2d      	ldr	r3, [pc, #180]	; (8008a40 <HAL_RCC_GetSysClockFreq+0x108>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	091b      	lsrs	r3, r3, #4
 800898e:	f003 030f 	and.w	r3, r3, #15
 8008992:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008994:	4a2b      	ldr	r2, [pc, #172]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800899c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10d      	bne.n	80089c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80089a8:	e00a      	b.n	80089c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	2b04      	cmp	r3, #4
 80089ae:	d102      	bne.n	80089b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80089b0:	4b25      	ldr	r3, [pc, #148]	; (8008a48 <HAL_RCC_GetSysClockFreq+0x110>)
 80089b2:	61bb      	str	r3, [r7, #24]
 80089b4:	e004      	b.n	80089c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	2b08      	cmp	r3, #8
 80089ba:	d101      	bne.n	80089c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80089bc:	4b23      	ldr	r3, [pc, #140]	; (8008a4c <HAL_RCC_GetSysClockFreq+0x114>)
 80089be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	2b0c      	cmp	r3, #12
 80089c4:	d134      	bne.n	8008a30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80089c6:	4b1e      	ldr	r3, [pc, #120]	; (8008a40 <HAL_RCC_GetSysClockFreq+0x108>)
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	f003 0303 	and.w	r3, r3, #3
 80089ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d003      	beq.n	80089de <HAL_RCC_GetSysClockFreq+0xa6>
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d003      	beq.n	80089e4 <HAL_RCC_GetSysClockFreq+0xac>
 80089dc:	e005      	b.n	80089ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80089de:	4b1a      	ldr	r3, [pc, #104]	; (8008a48 <HAL_RCC_GetSysClockFreq+0x110>)
 80089e0:	617b      	str	r3, [r7, #20]
      break;
 80089e2:	e005      	b.n	80089f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80089e4:	4b19      	ldr	r3, [pc, #100]	; (8008a4c <HAL_RCC_GetSysClockFreq+0x114>)
 80089e6:	617b      	str	r3, [r7, #20]
      break;
 80089e8:	e002      	b.n	80089f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	617b      	str	r3, [r7, #20]
      break;
 80089ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80089f0:	4b13      	ldr	r3, [pc, #76]	; (8008a40 <HAL_RCC_GetSysClockFreq+0x108>)
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	091b      	lsrs	r3, r3, #4
 80089f6:	f003 0307 	and.w	r3, r3, #7
 80089fa:	3301      	adds	r3, #1
 80089fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80089fe:	4b10      	ldr	r3, [pc, #64]	; (8008a40 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	0a1b      	lsrs	r3, r3, #8
 8008a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	fb03 f202 	mul.w	r2, r3, r2
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008a16:	4b0a      	ldr	r3, [pc, #40]	; (8008a40 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	0e5b      	lsrs	r3, r3, #25
 8008a1c:	f003 0303 	and.w	r3, r3, #3
 8008a20:	3301      	adds	r3, #1
 8008a22:	005b      	lsls	r3, r3, #1
 8008a24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008a30:	69bb      	ldr	r3, [r7, #24]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3724      	adds	r7, #36	; 0x24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	40021000 	.word	0x40021000
 8008a44:	0800d10c 	.word	0x0800d10c
 8008a48:	00f42400 	.word	0x00f42400
 8008a4c:	007a1200 	.word	0x007a1200

08008a50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a54:	4b03      	ldr	r3, [pc, #12]	; (8008a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a56:	681b      	ldr	r3, [r3, #0]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	20000010 	.word	0x20000010

08008a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008a6c:	f7ff fff0 	bl	8008a50 <HAL_RCC_GetHCLKFreq>
 8008a70:	4602      	mov	r2, r0
 8008a72:	4b06      	ldr	r3, [pc, #24]	; (8008a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	0a1b      	lsrs	r3, r3, #8
 8008a78:	f003 0307 	and.w	r3, r3, #7
 8008a7c:	4904      	ldr	r1, [pc, #16]	; (8008a90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a7e:	5ccb      	ldrb	r3, [r1, r3]
 8008a80:	f003 031f 	and.w	r3, r3, #31
 8008a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	40021000 	.word	0x40021000
 8008a90:	0800d104 	.word	0x0800d104

08008a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008a98:	f7ff ffda 	bl	8008a50 <HAL_RCC_GetHCLKFreq>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	4b06      	ldr	r3, [pc, #24]	; (8008ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	0adb      	lsrs	r3, r3, #11
 8008aa4:	f003 0307 	and.w	r3, r3, #7
 8008aa8:	4904      	ldr	r1, [pc, #16]	; (8008abc <HAL_RCC_GetPCLK2Freq+0x28>)
 8008aaa:	5ccb      	ldrb	r3, [r1, r3]
 8008aac:	f003 031f 	and.w	r3, r3, #31
 8008ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	40021000 	.word	0x40021000
 8008abc:	0800d104 	.word	0x0800d104

08008ac0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008ac8:	2300      	movs	r3, #0
 8008aca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008acc:	4b2a      	ldr	r3, [pc, #168]	; (8008b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d003      	beq.n	8008ae0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008ad8:	f7ff f9ee 	bl	8007eb8 <HAL_PWREx_GetVoltageRange>
 8008adc:	6178      	str	r0, [r7, #20]
 8008ade:	e014      	b.n	8008b0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ae0:	4b25      	ldr	r3, [pc, #148]	; (8008b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae4:	4a24      	ldr	r2, [pc, #144]	; (8008b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aea:	6593      	str	r3, [r2, #88]	; 0x58
 8008aec:	4b22      	ldr	r3, [pc, #136]	; (8008b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008af8:	f7ff f9de 	bl	8007eb8 <HAL_PWREx_GetVoltageRange>
 8008afc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008afe:	4b1e      	ldr	r3, [pc, #120]	; (8008b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b02:	4a1d      	ldr	r2, [pc, #116]	; (8008b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b10:	d10b      	bne.n	8008b2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b80      	cmp	r3, #128	; 0x80
 8008b16:	d919      	bls.n	8008b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2ba0      	cmp	r3, #160	; 0xa0
 8008b1c:	d902      	bls.n	8008b24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008b1e:	2302      	movs	r3, #2
 8008b20:	613b      	str	r3, [r7, #16]
 8008b22:	e013      	b.n	8008b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008b24:	2301      	movs	r3, #1
 8008b26:	613b      	str	r3, [r7, #16]
 8008b28:	e010      	b.n	8008b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2b80      	cmp	r3, #128	; 0x80
 8008b2e:	d902      	bls.n	8008b36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008b30:	2303      	movs	r3, #3
 8008b32:	613b      	str	r3, [r7, #16]
 8008b34:	e00a      	b.n	8008b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b80      	cmp	r3, #128	; 0x80
 8008b3a:	d102      	bne.n	8008b42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	613b      	str	r3, [r7, #16]
 8008b40:	e004      	b.n	8008b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b70      	cmp	r3, #112	; 0x70
 8008b46:	d101      	bne.n	8008b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008b48:	2301      	movs	r3, #1
 8008b4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008b4c:	4b0b      	ldr	r3, [pc, #44]	; (8008b7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f023 0207 	bic.w	r2, r3, #7
 8008b54:	4909      	ldr	r1, [pc, #36]	; (8008b7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008b5c:	4b07      	ldr	r3, [pc, #28]	; (8008b7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0307 	and.w	r3, r3, #7
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d001      	beq.n	8008b6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e000      	b.n	8008b70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3718      	adds	r7, #24
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	40021000 	.word	0x40021000
 8008b7c:	40022000 	.word	0x40022000

08008b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b88:	2300      	movs	r3, #0
 8008b8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d041      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ba0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008ba4:	d02a      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008ba6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008baa:	d824      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008bac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bb0:	d008      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008bb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bb6:	d81e      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00a      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bc0:	d010      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008bc2:	e018      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008bc4:	4b86      	ldr	r3, [pc, #536]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	4a85      	ldr	r2, [pc, #532]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008bd0:	e015      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 fabb 	bl	8009154 <RCCEx_PLLSAI1_Config>
 8008bde:	4603      	mov	r3, r0
 8008be0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008be2:	e00c      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3320      	adds	r3, #32
 8008be8:	2100      	movs	r1, #0
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 fba6 	bl	800933c <RCCEx_PLLSAI2_Config>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008bf4:	e003      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	74fb      	strb	r3, [r7, #19]
      break;
 8008bfa:	e000      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bfe:	7cfb      	ldrb	r3, [r7, #19]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10b      	bne.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c04:	4b76      	ldr	r3, [pc, #472]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c12:	4973      	ldr	r1, [pc, #460]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c14:	4313      	orrs	r3, r2
 8008c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008c1a:	e001      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c1c:	7cfb      	ldrb	r3, [r7, #19]
 8008c1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d041      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c34:	d02a      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008c36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c3a:	d824      	bhi.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008c3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c40:	d008      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008c42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c46:	d81e      	bhi.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00a      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c50:	d010      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008c52:	e018      	b.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008c54:	4b62      	ldr	r3, [pc, #392]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	4a61      	ldr	r2, [pc, #388]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008c60:	e015      	b.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	3304      	adds	r3, #4
 8008c66:	2100      	movs	r1, #0
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 fa73 	bl	8009154 <RCCEx_PLLSAI1_Config>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008c72:	e00c      	b.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	3320      	adds	r3, #32
 8008c78:	2100      	movs	r1, #0
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 fb5e 	bl	800933c <RCCEx_PLLSAI2_Config>
 8008c80:	4603      	mov	r3, r0
 8008c82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008c84:	e003      	b.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	74fb      	strb	r3, [r7, #19]
      break;
 8008c8a:	e000      	b.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008c8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c8e:	7cfb      	ldrb	r3, [r7, #19]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10b      	bne.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008c94:	4b52      	ldr	r3, [pc, #328]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ca2:	494f      	ldr	r1, [pc, #316]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008caa:	e001      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cac:	7cfb      	ldrb	r3, [r7, #19]
 8008cae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 80a0 	beq.w	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008cc2:	4b47      	ldr	r3, [pc, #284]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d101      	bne.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e000      	b.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00d      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cd8:	4b41      	ldr	r3, [pc, #260]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cdc:	4a40      	ldr	r2, [pc, #256]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ce2:	6593      	str	r3, [r2, #88]	; 0x58
 8008ce4:	4b3e      	ldr	r3, [pc, #248]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cec:	60bb      	str	r3, [r7, #8]
 8008cee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cf4:	4b3b      	ldr	r3, [pc, #236]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a3a      	ldr	r2, [pc, #232]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d00:	f7fc fa70 	bl	80051e4 <HAL_GetTick>
 8008d04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008d06:	e009      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d08:	f7fc fa6c 	bl	80051e4 <HAL_GetTick>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d902      	bls.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	74fb      	strb	r3, [r7, #19]
        break;
 8008d1a:	e005      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008d1c:	4b31      	ldr	r3, [pc, #196]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d0ef      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008d28:	7cfb      	ldrb	r3, [r7, #19]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d15c      	bne.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008d2e:	4b2c      	ldr	r3, [pc, #176]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d01f      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d019      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d4c:	4b24      	ldr	r3, [pc, #144]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d58:	4b21      	ldr	r3, [pc, #132]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d5e:	4a20      	ldr	r2, [pc, #128]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d68:	4b1d      	ldr	r3, [pc, #116]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d6e:	4a1c      	ldr	r2, [pc, #112]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008d78:	4a19      	ldr	r2, [pc, #100]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d016      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d8a:	f7fc fa2b 	bl	80051e4 <HAL_GetTick>
 8008d8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d90:	e00b      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d92:	f7fc fa27 	bl	80051e4 <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d902      	bls.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	74fb      	strb	r3, [r7, #19]
            break;
 8008da8:	e006      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008daa:	4b0d      	ldr	r3, [pc, #52]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db0:	f003 0302 	and.w	r3, r3, #2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d0ec      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008db8:	7cfb      	ldrb	r3, [r7, #19]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10c      	bne.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008dbe:	4b08      	ldr	r3, [pc, #32]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dce:	4904      	ldr	r1, [pc, #16]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008dd6:	e009      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008dd8:	7cfb      	ldrb	r3, [r7, #19]
 8008dda:	74bb      	strb	r3, [r7, #18]
 8008ddc:	e006      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008dde:	bf00      	nop
 8008de0:	40021000 	.word	0x40021000
 8008de4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de8:	7cfb      	ldrb	r3, [r7, #19]
 8008dea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008dec:	7c7b      	ldrb	r3, [r7, #17]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d105      	bne.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008df2:	4b9e      	ldr	r3, [pc, #632]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df6:	4a9d      	ldr	r2, [pc, #628]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00a      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e0a:	4b98      	ldr	r3, [pc, #608]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e10:	f023 0203 	bic.w	r2, r3, #3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e18:	4994      	ldr	r1, [pc, #592]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00a      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e2c:	4b8f      	ldr	r3, [pc, #572]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e32:	f023 020c 	bic.w	r2, r3, #12
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e3a:	498c      	ldr	r1, [pc, #560]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0304 	and.w	r3, r3, #4
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00a      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008e4e:	4b87      	ldr	r3, [pc, #540]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5c:	4983      	ldr	r1, [pc, #524]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0308 	and.w	r3, r3, #8
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00a      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008e70:	4b7e      	ldr	r3, [pc, #504]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7e:	497b      	ldr	r1, [pc, #492]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e80:	4313      	orrs	r3, r2
 8008e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0310 	and.w	r3, r3, #16
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00a      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008e92:	4b76      	ldr	r3, [pc, #472]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ea0:	4972      	ldr	r1, [pc, #456]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0320 	and.w	r3, r3, #32
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00a      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008eb4:	4b6d      	ldr	r3, [pc, #436]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ec2:	496a      	ldr	r1, [pc, #424]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00a      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ed6:	4b65      	ldr	r3, [pc, #404]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008edc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ee4:	4961      	ldr	r1, [pc, #388]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00a      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ef8:	4b5c      	ldr	r3, [pc, #368]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008efe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f06:	4959      	ldr	r1, [pc, #356]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008f1a:	4b54      	ldr	r3, [pc, #336]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f28:	4950      	ldr	r1, [pc, #320]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00a      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008f3c:	4b4b      	ldr	r3, [pc, #300]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f4a:	4948      	ldr	r1, [pc, #288]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00a      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008f5e:	4b43      	ldr	r3, [pc, #268]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6c:	493f      	ldr	r1, [pc, #252]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d028      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f80:	4b3a      	ldr	r3, [pc, #232]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f8e:	4937      	ldr	r1, [pc, #220]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f9e:	d106      	bne.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fa0:	4b32      	ldr	r3, [pc, #200]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	4a31      	ldr	r2, [pc, #196]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008faa:	60d3      	str	r3, [r2, #12]
 8008fac:	e011      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fb6:	d10c      	bne.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 f8c8 	bl	8009154 <RCCEx_PLLSAI1_Config>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008fc8:	7cfb      	ldrb	r3, [r7, #19]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008fce:	7cfb      	ldrb	r3, [r7, #19]
 8008fd0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d028      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008fde:	4b23      	ldr	r3, [pc, #140]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fec:	491f      	ldr	r1, [pc, #124]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ffc:	d106      	bne.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ffe:	4b1b      	ldr	r3, [pc, #108]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	4a1a      	ldr	r2, [pc, #104]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009008:	60d3      	str	r3, [r2, #12]
 800900a:	e011      	b.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009010:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009014:	d10c      	bne.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	3304      	adds	r3, #4
 800901a:	2101      	movs	r1, #1
 800901c:	4618      	mov	r0, r3
 800901e:	f000 f899 	bl	8009154 <RCCEx_PLLSAI1_Config>
 8009022:	4603      	mov	r3, r0
 8009024:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009026:	7cfb      	ldrb	r3, [r7, #19]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800902c:	7cfb      	ldrb	r3, [r7, #19]
 800902e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d02b      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800903c:	4b0b      	ldr	r3, [pc, #44]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800903e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009042:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800904a:	4908      	ldr	r1, [pc, #32]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800904c:	4313      	orrs	r3, r2
 800904e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009056:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800905a:	d109      	bne.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800905c:	4b03      	ldr	r3, [pc, #12]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	4a02      	ldr	r2, [pc, #8]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009066:	60d3      	str	r3, [r2, #12]
 8009068:	e014      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800906a:	bf00      	nop
 800906c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009074:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009078:	d10c      	bne.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	3304      	adds	r3, #4
 800907e:	2101      	movs	r1, #1
 8009080:	4618      	mov	r0, r3
 8009082:	f000 f867 	bl	8009154 <RCCEx_PLLSAI1_Config>
 8009086:	4603      	mov	r3, r0
 8009088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800908a:	7cfb      	ldrb	r3, [r7, #19]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d001      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8009090:	7cfb      	ldrb	r3, [r7, #19]
 8009092:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d02f      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090a0:	4b2b      	ldr	r3, [pc, #172]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80090a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090ae:	4928      	ldr	r1, [pc, #160]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090be:	d10d      	bne.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3304      	adds	r3, #4
 80090c4:	2102      	movs	r1, #2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 f844 	bl	8009154 <RCCEx_PLLSAI1_Config>
 80090cc:	4603      	mov	r3, r0
 80090ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80090d0:	7cfb      	ldrb	r3, [r7, #19]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d014      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80090d6:	7cfb      	ldrb	r3, [r7, #19]
 80090d8:	74bb      	strb	r3, [r7, #18]
 80090da:	e011      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090e4:	d10c      	bne.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	3320      	adds	r3, #32
 80090ea:	2102      	movs	r1, #2
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 f925 	bl	800933c <RCCEx_PLLSAI2_Config>
 80090f2:	4603      	mov	r3, r0
 80090f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80090f6:	7cfb      	ldrb	r3, [r7, #19]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80090fc:	7cfb      	ldrb	r3, [r7, #19]
 80090fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00a      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800910c:	4b10      	ldr	r3, [pc, #64]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800910e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009112:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800911a:	490d      	ldr	r1, [pc, #52]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800911c:	4313      	orrs	r3, r2
 800911e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00b      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800912e:	4b08      	ldr	r3, [pc, #32]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009134:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800913e:	4904      	ldr	r1, [pc, #16]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009140:	4313      	orrs	r3, r2
 8009142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009146:	7cbb      	ldrb	r3, [r7, #18]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3718      	adds	r7, #24
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	40021000 	.word	0x40021000

08009154 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009162:	4b75      	ldr	r3, [pc, #468]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	2b00      	cmp	r3, #0
 800916c:	d018      	beq.n	80091a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800916e:	4b72      	ldr	r3, [pc, #456]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	f003 0203 	and.w	r2, r3, #3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d10d      	bne.n	800919a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
       ||
 8009182:	2b00      	cmp	r3, #0
 8009184:	d009      	beq.n	800919a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009186:	4b6c      	ldr	r3, [pc, #432]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	091b      	lsrs	r3, r3, #4
 800918c:	f003 0307 	and.w	r3, r3, #7
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	685b      	ldr	r3, [r3, #4]
       ||
 8009196:	429a      	cmp	r2, r3
 8009198:	d047      	beq.n	800922a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	73fb      	strb	r3, [r7, #15]
 800919e:	e044      	b.n	800922a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b03      	cmp	r3, #3
 80091a6:	d018      	beq.n	80091da <RCCEx_PLLSAI1_Config+0x86>
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d825      	bhi.n	80091f8 <RCCEx_PLLSAI1_Config+0xa4>
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d002      	beq.n	80091b6 <RCCEx_PLLSAI1_Config+0x62>
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d009      	beq.n	80091c8 <RCCEx_PLLSAI1_Config+0x74>
 80091b4:	e020      	b.n	80091f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80091b6:	4b60      	ldr	r3, [pc, #384]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0302 	and.w	r3, r3, #2
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d11d      	bne.n	80091fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80091c6:	e01a      	b.n	80091fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80091c8:	4b5b      	ldr	r3, [pc, #364]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d116      	bne.n	8009202 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80091d8:	e013      	b.n	8009202 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80091da:	4b57      	ldr	r3, [pc, #348]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10f      	bne.n	8009206 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80091e6:	4b54      	ldr	r3, [pc, #336]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d109      	bne.n	8009206 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80091f6:	e006      	b.n	8009206 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	73fb      	strb	r3, [r7, #15]
      break;
 80091fc:	e004      	b.n	8009208 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80091fe:	bf00      	nop
 8009200:	e002      	b.n	8009208 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009202:	bf00      	nop
 8009204:	e000      	b.n	8009208 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009206:	bf00      	nop
    }

    if(status == HAL_OK)
 8009208:	7bfb      	ldrb	r3, [r7, #15]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10d      	bne.n	800922a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800920e:	4b4a      	ldr	r3, [pc, #296]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6819      	ldr	r1, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	3b01      	subs	r3, #1
 8009220:	011b      	lsls	r3, r3, #4
 8009222:	430b      	orrs	r3, r1
 8009224:	4944      	ldr	r1, [pc, #272]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009226:	4313      	orrs	r3, r2
 8009228:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800922a:	7bfb      	ldrb	r3, [r7, #15]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d17d      	bne.n	800932c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009230:	4b41      	ldr	r3, [pc, #260]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a40      	ldr	r2, [pc, #256]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009236:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800923a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800923c:	f7fb ffd2 	bl	80051e4 <HAL_GetTick>
 8009240:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009242:	e009      	b.n	8009258 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009244:	f7fb ffce 	bl	80051e4 <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	2b02      	cmp	r3, #2
 8009250:	d902      	bls.n	8009258 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009252:	2303      	movs	r3, #3
 8009254:	73fb      	strb	r3, [r7, #15]
        break;
 8009256:	e005      	b.n	8009264 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009258:	4b37      	ldr	r3, [pc, #220]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1ef      	bne.n	8009244 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009264:	7bfb      	ldrb	r3, [r7, #15]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d160      	bne.n	800932c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d111      	bne.n	8009294 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009270:	4b31      	ldr	r3, [pc, #196]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	6892      	ldr	r2, [r2, #8]
 8009280:	0211      	lsls	r1, r2, #8
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	68d2      	ldr	r2, [r2, #12]
 8009286:	0912      	lsrs	r2, r2, #4
 8009288:	0452      	lsls	r2, r2, #17
 800928a:	430a      	orrs	r2, r1
 800928c:	492a      	ldr	r1, [pc, #168]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 800928e:	4313      	orrs	r3, r2
 8009290:	610b      	str	r3, [r1, #16]
 8009292:	e027      	b.n	80092e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d112      	bne.n	80092c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800929a:	4b27      	ldr	r3, [pc, #156]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80092a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	6892      	ldr	r2, [r2, #8]
 80092aa:	0211      	lsls	r1, r2, #8
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	6912      	ldr	r2, [r2, #16]
 80092b0:	0852      	lsrs	r2, r2, #1
 80092b2:	3a01      	subs	r2, #1
 80092b4:	0552      	lsls	r2, r2, #21
 80092b6:	430a      	orrs	r2, r1
 80092b8:	491f      	ldr	r1, [pc, #124]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80092ba:	4313      	orrs	r3, r2
 80092bc:	610b      	str	r3, [r1, #16]
 80092be:	e011      	b.n	80092e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80092c0:	4b1d      	ldr	r3, [pc, #116]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80092c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	6892      	ldr	r2, [r2, #8]
 80092d0:	0211      	lsls	r1, r2, #8
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	6952      	ldr	r2, [r2, #20]
 80092d6:	0852      	lsrs	r2, r2, #1
 80092d8:	3a01      	subs	r2, #1
 80092da:	0652      	lsls	r2, r2, #25
 80092dc:	430a      	orrs	r2, r1
 80092de:	4916      	ldr	r1, [pc, #88]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80092e0:	4313      	orrs	r3, r2
 80092e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80092e4:	4b14      	ldr	r3, [pc, #80]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a13      	ldr	r2, [pc, #76]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80092ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092f0:	f7fb ff78 	bl	80051e4 <HAL_GetTick>
 80092f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80092f6:	e009      	b.n	800930c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80092f8:	f7fb ff74 	bl	80051e4 <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	2b02      	cmp	r3, #2
 8009304:	d902      	bls.n	800930c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	73fb      	strb	r3, [r7, #15]
          break;
 800930a:	e005      	b.n	8009318 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800930c:	4b0a      	ldr	r3, [pc, #40]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d0ef      	beq.n	80092f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009318:	7bfb      	ldrb	r3, [r7, #15]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d106      	bne.n	800932c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800931e:	4b06      	ldr	r3, [pc, #24]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009320:	691a      	ldr	r2, [r3, #16]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	4904      	ldr	r1, [pc, #16]	; (8009338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009328:	4313      	orrs	r3, r2
 800932a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800932c:	7bfb      	ldrb	r3, [r7, #15]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	40021000 	.word	0x40021000

0800933c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800934a:	4b6a      	ldr	r3, [pc, #424]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	f003 0303 	and.w	r3, r3, #3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d018      	beq.n	8009388 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009356:	4b67      	ldr	r3, [pc, #412]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	f003 0203 	and.w	r2, r3, #3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	429a      	cmp	r2, r3
 8009364:	d10d      	bne.n	8009382 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
       ||
 800936a:	2b00      	cmp	r3, #0
 800936c:	d009      	beq.n	8009382 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800936e:	4b61      	ldr	r3, [pc, #388]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	091b      	lsrs	r3, r3, #4
 8009374:	f003 0307 	and.w	r3, r3, #7
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	685b      	ldr	r3, [r3, #4]
       ||
 800937e:	429a      	cmp	r2, r3
 8009380:	d047      	beq.n	8009412 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	73fb      	strb	r3, [r7, #15]
 8009386:	e044      	b.n	8009412 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b03      	cmp	r3, #3
 800938e:	d018      	beq.n	80093c2 <RCCEx_PLLSAI2_Config+0x86>
 8009390:	2b03      	cmp	r3, #3
 8009392:	d825      	bhi.n	80093e0 <RCCEx_PLLSAI2_Config+0xa4>
 8009394:	2b01      	cmp	r3, #1
 8009396:	d002      	beq.n	800939e <RCCEx_PLLSAI2_Config+0x62>
 8009398:	2b02      	cmp	r3, #2
 800939a:	d009      	beq.n	80093b0 <RCCEx_PLLSAI2_Config+0x74>
 800939c:	e020      	b.n	80093e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800939e:	4b55      	ldr	r3, [pc, #340]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 0302 	and.w	r3, r3, #2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d11d      	bne.n	80093e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80093ae:	e01a      	b.n	80093e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80093b0:	4b50      	ldr	r3, [pc, #320]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d116      	bne.n	80093ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80093c0:	e013      	b.n	80093ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80093c2:	4b4c      	ldr	r3, [pc, #304]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10f      	bne.n	80093ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80093ce:	4b49      	ldr	r3, [pc, #292]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d109      	bne.n	80093ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80093de:	e006      	b.n	80093ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	73fb      	strb	r3, [r7, #15]
      break;
 80093e4:	e004      	b.n	80093f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80093e6:	bf00      	nop
 80093e8:	e002      	b.n	80093f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80093ea:	bf00      	nop
 80093ec:	e000      	b.n	80093f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80093ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10d      	bne.n	8009412 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80093f6:	4b3f      	ldr	r3, [pc, #252]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6819      	ldr	r1, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	3b01      	subs	r3, #1
 8009408:	011b      	lsls	r3, r3, #4
 800940a:	430b      	orrs	r3, r1
 800940c:	4939      	ldr	r1, [pc, #228]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800940e:	4313      	orrs	r3, r2
 8009410:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d167      	bne.n	80094e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009418:	4b36      	ldr	r3, [pc, #216]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a35      	ldr	r2, [pc, #212]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800941e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009424:	f7fb fede 	bl	80051e4 <HAL_GetTick>
 8009428:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800942a:	e009      	b.n	8009440 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800942c:	f7fb feda 	bl	80051e4 <HAL_GetTick>
 8009430:	4602      	mov	r2, r0
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	2b02      	cmp	r3, #2
 8009438:	d902      	bls.n	8009440 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	73fb      	strb	r3, [r7, #15]
        break;
 800943e:	e005      	b.n	800944c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009440:	4b2c      	ldr	r3, [pc, #176]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1ef      	bne.n	800942c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800944c:	7bfb      	ldrb	r3, [r7, #15]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d14a      	bne.n	80094e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d111      	bne.n	800947c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009458:	4b26      	ldr	r3, [pc, #152]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	6892      	ldr	r2, [r2, #8]
 8009468:	0211      	lsls	r1, r2, #8
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	68d2      	ldr	r2, [r2, #12]
 800946e:	0912      	lsrs	r2, r2, #4
 8009470:	0452      	lsls	r2, r2, #17
 8009472:	430a      	orrs	r2, r1
 8009474:	491f      	ldr	r1, [pc, #124]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009476:	4313      	orrs	r3, r2
 8009478:	614b      	str	r3, [r1, #20]
 800947a:	e011      	b.n	80094a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800947c:	4b1d      	ldr	r3, [pc, #116]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800947e:	695b      	ldr	r3, [r3, #20]
 8009480:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009484:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	6892      	ldr	r2, [r2, #8]
 800948c:	0211      	lsls	r1, r2, #8
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	6912      	ldr	r2, [r2, #16]
 8009492:	0852      	lsrs	r2, r2, #1
 8009494:	3a01      	subs	r2, #1
 8009496:	0652      	lsls	r2, r2, #25
 8009498:	430a      	orrs	r2, r1
 800949a:	4916      	ldr	r1, [pc, #88]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800949c:	4313      	orrs	r3, r2
 800949e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80094a0:	4b14      	ldr	r3, [pc, #80]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a13      	ldr	r2, [pc, #76]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094ac:	f7fb fe9a 	bl	80051e4 <HAL_GetTick>
 80094b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80094b2:	e009      	b.n	80094c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80094b4:	f7fb fe96 	bl	80051e4 <HAL_GetTick>
 80094b8:	4602      	mov	r2, r0
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d902      	bls.n	80094c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	73fb      	strb	r3, [r7, #15]
          break;
 80094c6:	e005      	b.n	80094d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80094c8:	4b0a      	ldr	r3, [pc, #40]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d0ef      	beq.n	80094b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d106      	bne.n	80094e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80094da:	4b06      	ldr	r3, [pc, #24]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094dc:	695a      	ldr	r2, [r3, #20]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	4904      	ldr	r1, [pc, #16]	; (80094f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094e4:	4313      	orrs	r3, r2
 80094e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	40021000 	.word	0x40021000

080094f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e049      	b.n	800959e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d106      	bne.n	8009524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7fb fc38 	bl	8004d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2202      	movs	r2, #2
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3304      	adds	r3, #4
 8009534:	4619      	mov	r1, r3
 8009536:	4610      	mov	r0, r2
 8009538:	f000 fb76 	bl	8009c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
	...

080095a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d001      	beq.n	80095c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e047      	b.n	8009650 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2202      	movs	r2, #2
 80095c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a23      	ldr	r2, [pc, #140]	; (800965c <HAL_TIM_Base_Start+0xb4>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d01d      	beq.n	800960e <HAL_TIM_Base_Start+0x66>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095da:	d018      	beq.n	800960e <HAL_TIM_Base_Start+0x66>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a1f      	ldr	r2, [pc, #124]	; (8009660 <HAL_TIM_Base_Start+0xb8>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d013      	beq.n	800960e <HAL_TIM_Base_Start+0x66>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a1e      	ldr	r2, [pc, #120]	; (8009664 <HAL_TIM_Base_Start+0xbc>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d00e      	beq.n	800960e <HAL_TIM_Base_Start+0x66>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a1c      	ldr	r2, [pc, #112]	; (8009668 <HAL_TIM_Base_Start+0xc0>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d009      	beq.n	800960e <HAL_TIM_Base_Start+0x66>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a1b      	ldr	r2, [pc, #108]	; (800966c <HAL_TIM_Base_Start+0xc4>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d004      	beq.n	800960e <HAL_TIM_Base_Start+0x66>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a19      	ldr	r2, [pc, #100]	; (8009670 <HAL_TIM_Base_Start+0xc8>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d115      	bne.n	800963a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	689a      	ldr	r2, [r3, #8]
 8009614:	4b17      	ldr	r3, [pc, #92]	; (8009674 <HAL_TIM_Base_Start+0xcc>)
 8009616:	4013      	ands	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2b06      	cmp	r3, #6
 800961e:	d015      	beq.n	800964c <HAL_TIM_Base_Start+0xa4>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009626:	d011      	beq.n	800964c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f042 0201 	orr.w	r2, r2, #1
 8009636:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009638:	e008      	b.n	800964c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f042 0201 	orr.w	r2, r2, #1
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	e000      	b.n	800964e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800964c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	40012c00 	.word	0x40012c00
 8009660:	40000400 	.word	0x40000400
 8009664:	40000800 	.word	0x40000800
 8009668:	40000c00 	.word	0x40000c00
 800966c:	40013400 	.word	0x40013400
 8009670:	40014000 	.word	0x40014000
 8009674:	00010007 	.word	0x00010007

08009678 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6a1a      	ldr	r2, [r3, #32]
 8009686:	f241 1311 	movw	r3, #4369	; 0x1111
 800968a:	4013      	ands	r3, r2
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10f      	bne.n	80096b0 <HAL_TIM_Base_Stop+0x38>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	6a1a      	ldr	r2, [r3, #32]
 8009696:	f240 4344 	movw	r3, #1092	; 0x444
 800969a:	4013      	ands	r3, r2
 800969c:	2b00      	cmp	r3, #0
 800969e:	d107      	bne.n	80096b0 <HAL_TIM_Base_Stop+0x38>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f022 0201 	bic.w	r2, r2, #1
 80096ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
	...

080096c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d001      	beq.n	80096e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e04f      	b.n	8009780 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2202      	movs	r2, #2
 80096e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68da      	ldr	r2, [r3, #12]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f042 0201 	orr.w	r2, r2, #1
 80096f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a23      	ldr	r2, [pc, #140]	; (800978c <HAL_TIM_Base_Start_IT+0xc4>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d01d      	beq.n	800973e <HAL_TIM_Base_Start_IT+0x76>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800970a:	d018      	beq.n	800973e <HAL_TIM_Base_Start_IT+0x76>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a1f      	ldr	r2, [pc, #124]	; (8009790 <HAL_TIM_Base_Start_IT+0xc8>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d013      	beq.n	800973e <HAL_TIM_Base_Start_IT+0x76>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a1e      	ldr	r2, [pc, #120]	; (8009794 <HAL_TIM_Base_Start_IT+0xcc>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d00e      	beq.n	800973e <HAL_TIM_Base_Start_IT+0x76>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a1c      	ldr	r2, [pc, #112]	; (8009798 <HAL_TIM_Base_Start_IT+0xd0>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d009      	beq.n	800973e <HAL_TIM_Base_Start_IT+0x76>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a1b      	ldr	r2, [pc, #108]	; (800979c <HAL_TIM_Base_Start_IT+0xd4>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d004      	beq.n	800973e <HAL_TIM_Base_Start_IT+0x76>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a19      	ldr	r2, [pc, #100]	; (80097a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d115      	bne.n	800976a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	689a      	ldr	r2, [r3, #8]
 8009744:	4b17      	ldr	r3, [pc, #92]	; (80097a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009746:	4013      	ands	r3, r2
 8009748:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2b06      	cmp	r3, #6
 800974e:	d015      	beq.n	800977c <HAL_TIM_Base_Start_IT+0xb4>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009756:	d011      	beq.n	800977c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0201 	orr.w	r2, r2, #1
 8009766:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009768:	e008      	b.n	800977c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f042 0201 	orr.w	r2, r2, #1
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	e000      	b.n	800977e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800977c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	40012c00 	.word	0x40012c00
 8009790:	40000400 	.word	0x40000400
 8009794:	40000800 	.word	0x40000800
 8009798:	40000c00 	.word	0x40000c00
 800979c:	40013400 	.word	0x40013400
 80097a0:	40014000 	.word	0x40014000
 80097a4:	00010007 	.word	0x00010007

080097a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68da      	ldr	r2, [r3, #12]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f022 0201 	bic.w	r2, r2, #1
 80097be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6a1a      	ldr	r2, [r3, #32]
 80097c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80097ca:	4013      	ands	r3, r2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10f      	bne.n	80097f0 <HAL_TIM_Base_Stop_IT+0x48>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6a1a      	ldr	r2, [r3, #32]
 80097d6:	f240 4344 	movw	r3, #1092	; 0x444
 80097da:	4013      	ands	r3, r2
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d107      	bne.n	80097f0 <HAL_TIM_Base_Stop_IT+0x48>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f022 0201 	bic.w	r2, r2, #1
 80097ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b082      	sub	sp, #8
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b02      	cmp	r3, #2
 800981a:	d122      	bne.n	8009862 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	f003 0302 	and.w	r3, r3, #2
 8009826:	2b02      	cmp	r3, #2
 8009828:	d11b      	bne.n	8009862 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f06f 0202 	mvn.w	r2, #2
 8009832:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	f003 0303 	and.w	r3, r3, #3
 8009844:	2b00      	cmp	r3, #0
 8009846:	d003      	beq.n	8009850 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f9ce 	bl	8009bea <HAL_TIM_IC_CaptureCallback>
 800984e:	e005      	b.n	800985c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f9c0 	bl	8009bd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 f9d1 	bl	8009bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	f003 0304 	and.w	r3, r3, #4
 800986c:	2b04      	cmp	r3, #4
 800986e:	d122      	bne.n	80098b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	f003 0304 	and.w	r3, r3, #4
 800987a:	2b04      	cmp	r3, #4
 800987c:	d11b      	bne.n	80098b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f06f 0204 	mvn.w	r2, #4
 8009886:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2202      	movs	r2, #2
 800988c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009898:	2b00      	cmp	r3, #0
 800989a:	d003      	beq.n	80098a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 f9a4 	bl	8009bea <HAL_TIM_IC_CaptureCallback>
 80098a2:	e005      	b.n	80098b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f996 	bl	8009bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f9a7 	bl	8009bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	f003 0308 	and.w	r3, r3, #8
 80098c0:	2b08      	cmp	r3, #8
 80098c2:	d122      	bne.n	800990a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	f003 0308 	and.w	r3, r3, #8
 80098ce:	2b08      	cmp	r3, #8
 80098d0:	d11b      	bne.n	800990a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f06f 0208 	mvn.w	r2, #8
 80098da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2204      	movs	r2, #4
 80098e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	69db      	ldr	r3, [r3, #28]
 80098e8:	f003 0303 	and.w	r3, r3, #3
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d003      	beq.n	80098f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f97a 	bl	8009bea <HAL_TIM_IC_CaptureCallback>
 80098f6:	e005      	b.n	8009904 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f96c 	bl	8009bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f97d 	bl	8009bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	f003 0310 	and.w	r3, r3, #16
 8009914:	2b10      	cmp	r3, #16
 8009916:	d122      	bne.n	800995e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	f003 0310 	and.w	r3, r3, #16
 8009922:	2b10      	cmp	r3, #16
 8009924:	d11b      	bne.n	800995e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f06f 0210 	mvn.w	r2, #16
 800992e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2208      	movs	r2, #8
 8009934:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009940:	2b00      	cmp	r3, #0
 8009942:	d003      	beq.n	800994c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f950 	bl	8009bea <HAL_TIM_IC_CaptureCallback>
 800994a:	e005      	b.n	8009958 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 f942 	bl	8009bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f953 	bl	8009bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	f003 0301 	and.w	r3, r3, #1
 8009968:	2b01      	cmp	r3, #1
 800996a:	d10e      	bne.n	800998a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	f003 0301 	and.w	r3, r3, #1
 8009976:	2b01      	cmp	r3, #1
 8009978:	d107      	bne.n	800998a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f06f 0201 	mvn.w	r2, #1
 8009982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7fb fa7d 	bl	8004e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009994:	2b80      	cmp	r3, #128	; 0x80
 8009996:	d10e      	bne.n	80099b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a2:	2b80      	cmp	r3, #128	; 0x80
 80099a4:	d107      	bne.n	80099b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 faff 	bl	8009fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099c4:	d10e      	bne.n	80099e4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099d0:	2b80      	cmp	r3, #128	; 0x80
 80099d2:	d107      	bne.n	80099e4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80099dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 faf2 	bl	8009fc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ee:	2b40      	cmp	r3, #64	; 0x40
 80099f0:	d10e      	bne.n	8009a10 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099fc:	2b40      	cmp	r3, #64	; 0x40
 80099fe:	d107      	bne.n	8009a10 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f901 	bl	8009c12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	f003 0320 	and.w	r3, r3, #32
 8009a1a:	2b20      	cmp	r3, #32
 8009a1c:	d10e      	bne.n	8009a3c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	f003 0320 	and.w	r3, r3, #32
 8009a28:	2b20      	cmp	r3, #32
 8009a2a:	d107      	bne.n	8009a3c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f06f 0220 	mvn.w	r2, #32
 8009a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fab2 	bl	8009fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a3c:	bf00      	nop
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d101      	bne.n	8009a60 <HAL_TIM_ConfigClockSource+0x1c>
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	e0b6      	b.n	8009bce <HAL_TIM_ConfigClockSource+0x18a>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68ba      	ldr	r2, [r7, #8]
 8009a92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a9c:	d03e      	beq.n	8009b1c <HAL_TIM_ConfigClockSource+0xd8>
 8009a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aa2:	f200 8087 	bhi.w	8009bb4 <HAL_TIM_ConfigClockSource+0x170>
 8009aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aaa:	f000 8086 	beq.w	8009bba <HAL_TIM_ConfigClockSource+0x176>
 8009aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ab2:	d87f      	bhi.n	8009bb4 <HAL_TIM_ConfigClockSource+0x170>
 8009ab4:	2b70      	cmp	r3, #112	; 0x70
 8009ab6:	d01a      	beq.n	8009aee <HAL_TIM_ConfigClockSource+0xaa>
 8009ab8:	2b70      	cmp	r3, #112	; 0x70
 8009aba:	d87b      	bhi.n	8009bb4 <HAL_TIM_ConfigClockSource+0x170>
 8009abc:	2b60      	cmp	r3, #96	; 0x60
 8009abe:	d050      	beq.n	8009b62 <HAL_TIM_ConfigClockSource+0x11e>
 8009ac0:	2b60      	cmp	r3, #96	; 0x60
 8009ac2:	d877      	bhi.n	8009bb4 <HAL_TIM_ConfigClockSource+0x170>
 8009ac4:	2b50      	cmp	r3, #80	; 0x50
 8009ac6:	d03c      	beq.n	8009b42 <HAL_TIM_ConfigClockSource+0xfe>
 8009ac8:	2b50      	cmp	r3, #80	; 0x50
 8009aca:	d873      	bhi.n	8009bb4 <HAL_TIM_ConfigClockSource+0x170>
 8009acc:	2b40      	cmp	r3, #64	; 0x40
 8009ace:	d058      	beq.n	8009b82 <HAL_TIM_ConfigClockSource+0x13e>
 8009ad0:	2b40      	cmp	r3, #64	; 0x40
 8009ad2:	d86f      	bhi.n	8009bb4 <HAL_TIM_ConfigClockSource+0x170>
 8009ad4:	2b30      	cmp	r3, #48	; 0x30
 8009ad6:	d064      	beq.n	8009ba2 <HAL_TIM_ConfigClockSource+0x15e>
 8009ad8:	2b30      	cmp	r3, #48	; 0x30
 8009ada:	d86b      	bhi.n	8009bb4 <HAL_TIM_ConfigClockSource+0x170>
 8009adc:	2b20      	cmp	r3, #32
 8009ade:	d060      	beq.n	8009ba2 <HAL_TIM_ConfigClockSource+0x15e>
 8009ae0:	2b20      	cmp	r3, #32
 8009ae2:	d867      	bhi.n	8009bb4 <HAL_TIM_ConfigClockSource+0x170>
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d05c      	beq.n	8009ba2 <HAL_TIM_ConfigClockSource+0x15e>
 8009ae8:	2b10      	cmp	r3, #16
 8009aea:	d05a      	beq.n	8009ba2 <HAL_TIM_ConfigClockSource+0x15e>
 8009aec:	e062      	b.n	8009bb4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6818      	ldr	r0, [r3, #0]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	6899      	ldr	r1, [r3, #8]
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	685a      	ldr	r2, [r3, #4]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	f000 f9a7 	bl	8009e50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	609a      	str	r2, [r3, #8]
      break;
 8009b1a:	e04f      	b.n	8009bbc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6818      	ldr	r0, [r3, #0]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	6899      	ldr	r1, [r3, #8]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	f000 f990 	bl	8009e50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689a      	ldr	r2, [r3, #8]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b3e:	609a      	str	r2, [r3, #8]
      break;
 8009b40:	e03c      	b.n	8009bbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6818      	ldr	r0, [r3, #0]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	6859      	ldr	r1, [r3, #4]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f000 f904 	bl	8009d5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2150      	movs	r1, #80	; 0x50
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 f95d 	bl	8009e1a <TIM_ITRx_SetConfig>
      break;
 8009b60:	e02c      	b.n	8009bbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6818      	ldr	r0, [r3, #0]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	6859      	ldr	r1, [r3, #4]
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	461a      	mov	r2, r3
 8009b70:	f000 f923 	bl	8009dba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2160      	movs	r1, #96	; 0x60
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 f94d 	bl	8009e1a <TIM_ITRx_SetConfig>
      break;
 8009b80:	e01c      	b.n	8009bbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6818      	ldr	r0, [r3, #0]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	6859      	ldr	r1, [r3, #4]
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	f000 f8e4 	bl	8009d5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2140      	movs	r1, #64	; 0x40
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f000 f93d 	bl	8009e1a <TIM_ITRx_SetConfig>
      break;
 8009ba0:	e00c      	b.n	8009bbc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4619      	mov	r1, r3
 8009bac:	4610      	mov	r0, r2
 8009bae:	f000 f934 	bl	8009e1a <TIM_ITRx_SetConfig>
      break;
 8009bb2:	e003      	b.n	8009bbc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8009bb8:	e000      	b.n	8009bbc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009bba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b083      	sub	sp, #12
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bde:	bf00      	nop
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b083      	sub	sp, #12
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bf2:	bf00      	nop
 8009bf4:	370c      	adds	r7, #12
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b083      	sub	sp, #12
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c06:	bf00      	nop
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b083      	sub	sp, #12
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c1a:	bf00      	nop
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
	...

08009c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a40      	ldr	r2, [pc, #256]	; (8009d3c <TIM_Base_SetConfig+0x114>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d013      	beq.n	8009c68 <TIM_Base_SetConfig+0x40>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c46:	d00f      	beq.n	8009c68 <TIM_Base_SetConfig+0x40>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a3d      	ldr	r2, [pc, #244]	; (8009d40 <TIM_Base_SetConfig+0x118>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d00b      	beq.n	8009c68 <TIM_Base_SetConfig+0x40>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a3c      	ldr	r2, [pc, #240]	; (8009d44 <TIM_Base_SetConfig+0x11c>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d007      	beq.n	8009c68 <TIM_Base_SetConfig+0x40>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a3b      	ldr	r2, [pc, #236]	; (8009d48 <TIM_Base_SetConfig+0x120>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d003      	beq.n	8009c68 <TIM_Base_SetConfig+0x40>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a3a      	ldr	r2, [pc, #232]	; (8009d4c <TIM_Base_SetConfig+0x124>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d108      	bne.n	8009c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a2f      	ldr	r2, [pc, #188]	; (8009d3c <TIM_Base_SetConfig+0x114>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d01f      	beq.n	8009cc2 <TIM_Base_SetConfig+0x9a>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c88:	d01b      	beq.n	8009cc2 <TIM_Base_SetConfig+0x9a>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a2c      	ldr	r2, [pc, #176]	; (8009d40 <TIM_Base_SetConfig+0x118>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d017      	beq.n	8009cc2 <TIM_Base_SetConfig+0x9a>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a2b      	ldr	r2, [pc, #172]	; (8009d44 <TIM_Base_SetConfig+0x11c>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d013      	beq.n	8009cc2 <TIM_Base_SetConfig+0x9a>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a2a      	ldr	r2, [pc, #168]	; (8009d48 <TIM_Base_SetConfig+0x120>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d00f      	beq.n	8009cc2 <TIM_Base_SetConfig+0x9a>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a29      	ldr	r2, [pc, #164]	; (8009d4c <TIM_Base_SetConfig+0x124>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d00b      	beq.n	8009cc2 <TIM_Base_SetConfig+0x9a>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a28      	ldr	r2, [pc, #160]	; (8009d50 <TIM_Base_SetConfig+0x128>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d007      	beq.n	8009cc2 <TIM_Base_SetConfig+0x9a>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a27      	ldr	r2, [pc, #156]	; (8009d54 <TIM_Base_SetConfig+0x12c>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d003      	beq.n	8009cc2 <TIM_Base_SetConfig+0x9a>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a26      	ldr	r2, [pc, #152]	; (8009d58 <TIM_Base_SetConfig+0x130>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d108      	bne.n	8009cd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	689a      	ldr	r2, [r3, #8]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a10      	ldr	r2, [pc, #64]	; (8009d3c <TIM_Base_SetConfig+0x114>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d00f      	beq.n	8009d20 <TIM_Base_SetConfig+0xf8>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a12      	ldr	r2, [pc, #72]	; (8009d4c <TIM_Base_SetConfig+0x124>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d00b      	beq.n	8009d20 <TIM_Base_SetConfig+0xf8>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a11      	ldr	r2, [pc, #68]	; (8009d50 <TIM_Base_SetConfig+0x128>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d007      	beq.n	8009d20 <TIM_Base_SetConfig+0xf8>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a10      	ldr	r2, [pc, #64]	; (8009d54 <TIM_Base_SetConfig+0x12c>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d003      	beq.n	8009d20 <TIM_Base_SetConfig+0xf8>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a0f      	ldr	r2, [pc, #60]	; (8009d58 <TIM_Base_SetConfig+0x130>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d103      	bne.n	8009d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	691a      	ldr	r2, [r3, #16]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	615a      	str	r2, [r3, #20]
}
 8009d2e:	bf00      	nop
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	40012c00 	.word	0x40012c00
 8009d40:	40000400 	.word	0x40000400
 8009d44:	40000800 	.word	0x40000800
 8009d48:	40000c00 	.word	0x40000c00
 8009d4c:	40013400 	.word	0x40013400
 8009d50:	40014000 	.word	0x40014000
 8009d54:	40014400 	.word	0x40014400
 8009d58:	40014800 	.word	0x40014800

08009d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b087      	sub	sp, #28
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6a1b      	ldr	r3, [r3, #32]
 8009d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	f023 0201 	bic.w	r2, r3, #1
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	011b      	lsls	r3, r3, #4
 8009d8c:	693a      	ldr	r2, [r7, #16]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f023 030a 	bic.w	r3, r3, #10
 8009d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d9a:	697a      	ldr	r2, [r7, #20]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	621a      	str	r2, [r3, #32]
}
 8009dae:	bf00      	nop
 8009db0:	371c      	adds	r7, #28
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dba:	b480      	push	{r7}
 8009dbc:	b087      	sub	sp, #28
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	60f8      	str	r0, [r7, #12]
 8009dc2:	60b9      	str	r1, [r7, #8]
 8009dc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	f023 0210 	bic.w	r2, r3, #16
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6a1b      	ldr	r3, [r3, #32]
 8009ddc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009de4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	031b      	lsls	r3, r3, #12
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	4313      	orrs	r3, r2
 8009dee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009df6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	011b      	lsls	r3, r3, #4
 8009dfc:	693a      	ldr	r2, [r7, #16]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	693a      	ldr	r2, [r7, #16]
 8009e0c:	621a      	str	r2, [r3, #32]
}
 8009e0e:	bf00      	nop
 8009e10:	371c      	adds	r7, #28
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b085      	sub	sp, #20
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e32:	683a      	ldr	r2, [r7, #0]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	f043 0307 	orr.w	r3, r3, #7
 8009e3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	609a      	str	r2, [r3, #8]
}
 8009e44:	bf00      	nop
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
 8009e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	021a      	lsls	r2, r3, #8
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	431a      	orrs	r2, r3
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	697a      	ldr	r2, [r7, #20]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	609a      	str	r2, [r3, #8]
}
 8009e84:	bf00      	nop
 8009e86:	371c      	adds	r7, #28
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d101      	bne.n	8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	e068      	b.n	8009f7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2202      	movs	r2, #2
 8009eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a2e      	ldr	r2, [pc, #184]	; (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d004      	beq.n	8009edc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a2d      	ldr	r2, [pc, #180]	; (8009f8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d108      	bne.n	8009eee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ee2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ef4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a1e      	ldr	r2, [pc, #120]	; (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d01d      	beq.n	8009f4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f1a:	d018      	beq.n	8009f4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a1b      	ldr	r2, [pc, #108]	; (8009f90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d013      	beq.n	8009f4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a1a      	ldr	r2, [pc, #104]	; (8009f94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d00e      	beq.n	8009f4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a18      	ldr	r2, [pc, #96]	; (8009f98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d009      	beq.n	8009f4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a13      	ldr	r2, [pc, #76]	; (8009f8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d004      	beq.n	8009f4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a14      	ldr	r2, [pc, #80]	; (8009f9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d10c      	bne.n	8009f68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	40012c00 	.word	0x40012c00
 8009f8c:	40013400 	.word	0x40013400
 8009f90:	40000400 	.word	0x40000400
 8009f94:	40000800 	.word	0x40000800
 8009f98:	40000c00 	.word	0x40000c00
 8009f9c:	40014000 	.word	0x40014000

08009fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e040      	b.n	800a070 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d106      	bne.n	800a004 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7fa ffe8 	bl	8004fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2224      	movs	r2, #36	; 0x24
 800a008:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f022 0201 	bic.w	r2, r2, #1
 800a018:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 fc18 	bl	800a850 <UART_SetConfig>
 800a020:	4603      	mov	r3, r0
 800a022:	2b01      	cmp	r3, #1
 800a024:	d101      	bne.n	800a02a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	e022      	b.n	800a070 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d002      	beq.n	800a038 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fec4 	bl	800adc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	685a      	ldr	r2, [r3, #4]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a046:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	689a      	ldr	r2, [r3, #8]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a056:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f042 0201 	orr.w	r2, r2, #1
 800a066:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 ff4b 	bl	800af04 <UART_CheckIdleState>
 800a06e:	4603      	mov	r3, r0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b08a      	sub	sp, #40	; 0x28
 800a07c:	af02      	add	r7, sp, #8
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	603b      	str	r3, [r7, #0]
 800a084:	4613      	mov	r3, r2
 800a086:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a08c:	2b20      	cmp	r3, #32
 800a08e:	f040 8082 	bne.w	800a196 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <HAL_UART_Transmit+0x26>
 800a098:	88fb      	ldrh	r3, [r7, #6]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d101      	bne.n	800a0a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e07a      	b.n	800a198 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d101      	bne.n	800a0b0 <HAL_UART_Transmit+0x38>
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	e073      	b.n	800a198 <HAL_UART_Transmit+0x120>
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2221      	movs	r2, #33	; 0x21
 800a0c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0c6:	f7fb f88d 	bl	80051e4 <HAL_GetTick>
 800a0ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	88fa      	ldrh	r2, [r7, #6]
 800a0d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	88fa      	ldrh	r2, [r7, #6]
 800a0d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e4:	d108      	bne.n	800a0f8 <HAL_UART_Transmit+0x80>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d104      	bne.n	800a0f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	61bb      	str	r3, [r7, #24]
 800a0f6:	e003      	b.n	800a100 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a108:	e02d      	b.n	800a166 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	2200      	movs	r2, #0
 800a112:	2180      	movs	r1, #128	; 0x80
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f000 ff3e 	bl	800af96 <UART_WaitOnFlagUntilTimeout>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e039      	b.n	800a198 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10b      	bne.n	800a142 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	881a      	ldrh	r2, [r3, #0]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a136:	b292      	uxth	r2, r2
 800a138:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	3302      	adds	r3, #2
 800a13e:	61bb      	str	r3, [r7, #24]
 800a140:	e008      	b.n	800a154 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	781a      	ldrb	r2, [r3, #0]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	b292      	uxth	r2, r2
 800a14c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	3301      	adds	r3, #1
 800a152:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	3b01      	subs	r3, #1
 800a15e:	b29a      	uxth	r2, r3
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1cb      	bne.n	800a10a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2200      	movs	r2, #0
 800a17a:	2140      	movs	r1, #64	; 0x40
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f000 ff0a 	bl	800af96 <UART_WaitOnFlagUntilTimeout>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d001      	beq.n	800a18c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a188:	2303      	movs	r3, #3
 800a18a:	e005      	b.n	800a198 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2220      	movs	r2, #32
 800a190:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	e000      	b.n	800a198 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a196:	2302      	movs	r3, #2
  }
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3720      	adds	r7, #32
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b08a      	sub	sp, #40	; 0x28
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1b2:	2b20      	cmp	r3, #32
 800a1b4:	d142      	bne.n	800a23c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d002      	beq.n	800a1c2 <HAL_UART_Receive_IT+0x22>
 800a1bc:	88fb      	ldrh	r3, [r7, #6]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d101      	bne.n	800a1c6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e03b      	b.n	800a23e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d101      	bne.n	800a1d4 <HAL_UART_Receive_IT+0x34>
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	e034      	b.n	800a23e <HAL_UART_Receive_IT+0x9e>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a18      	ldr	r2, [pc, #96]	; (800a248 <HAL_UART_Receive_IT+0xa8>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d01f      	beq.n	800a22c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d018      	beq.n	800a22c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	e853 3f00 	ldrex	r3, [r3]
 800a206:	613b      	str	r3, [r7, #16]
   return(result);
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a20e:	627b      	str	r3, [r7, #36]	; 0x24
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	461a      	mov	r2, r3
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	623b      	str	r3, [r7, #32]
 800a21a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21c:	69f9      	ldr	r1, [r7, #28]
 800a21e:	6a3a      	ldr	r2, [r7, #32]
 800a220:	e841 2300 	strex	r3, r2, [r1]
 800a224:	61bb      	str	r3, [r7, #24]
   return(result);
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1e6      	bne.n	800a1fa <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a22c:	88fb      	ldrh	r3, [r7, #6]
 800a22e:	461a      	mov	r2, r3
 800a230:	68b9      	ldr	r1, [r7, #8]
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f000 ff74 	bl	800b120 <UART_Start_Receive_IT>
 800a238:	4603      	mov	r3, r0
 800a23a:	e000      	b.n	800a23e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a23c:	2302      	movs	r3, #2
  }
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3728      	adds	r7, #40	; 0x28
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	40008000 	.word	0x40008000

0800a24c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b0ba      	sub	sp, #232	; 0xe8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	69db      	ldr	r3, [r3, #28]
 800a25a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a272:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a276:	f640 030f 	movw	r3, #2063	; 0x80f
 800a27a:	4013      	ands	r3, r2
 800a27c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a280:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a284:	2b00      	cmp	r3, #0
 800a286:	d115      	bne.n	800a2b4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a28c:	f003 0320 	and.w	r3, r3, #32
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00f      	beq.n	800a2b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a298:	f003 0320 	and.w	r3, r3, #32
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d009      	beq.n	800a2b4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f000 82a6 	beq.w	800a7f6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	4798      	blx	r3
      }
      return;
 800a2b2:	e2a0      	b.n	800a7f6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800a2b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 8117 	beq.w	800a4ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a2be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2c2:	f003 0301 	and.w	r3, r3, #1
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d106      	bne.n	800a2d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a2ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a2ce:	4b85      	ldr	r3, [pc, #532]	; (800a4e4 <HAL_UART_IRQHandler+0x298>)
 800a2d0:	4013      	ands	r3, r2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f000 810a 	beq.w	800a4ec <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2dc:	f003 0301 	and.w	r3, r3, #1
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d011      	beq.n	800a308 <HAL_UART_IRQHandler+0xbc>
 800a2e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00b      	beq.n	800a308 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2fe:	f043 0201 	orr.w	r2, r3, #1
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a30c:	f003 0302 	and.w	r3, r3, #2
 800a310:	2b00      	cmp	r3, #0
 800a312:	d011      	beq.n	800a338 <HAL_UART_IRQHandler+0xec>
 800a314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a318:	f003 0301 	and.w	r3, r3, #1
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00b      	beq.n	800a338 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2202      	movs	r2, #2
 800a326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a32e:	f043 0204 	orr.w	r2, r3, #4
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a33c:	f003 0304 	and.w	r3, r3, #4
 800a340:	2b00      	cmp	r3, #0
 800a342:	d011      	beq.n	800a368 <HAL_UART_IRQHandler+0x11c>
 800a344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00b      	beq.n	800a368 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2204      	movs	r2, #4
 800a356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a35e:	f043 0202 	orr.w	r2, r3, #2
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a36c:	f003 0308 	and.w	r3, r3, #8
 800a370:	2b00      	cmp	r3, #0
 800a372:	d017      	beq.n	800a3a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a378:	f003 0320 	and.w	r3, r3, #32
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d105      	bne.n	800a38c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a384:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00b      	beq.n	800a3a4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2208      	movs	r2, #8
 800a392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a39a:	f043 0208 	orr.w	r2, r3, #8
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a3a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d012      	beq.n	800a3d6 <HAL_UART_IRQHandler+0x18a>
 800a3b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00c      	beq.n	800a3d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3cc:	f043 0220 	orr.w	r2, r3, #32
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f000 820c 	beq.w	800a7fa <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a3e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3e6:	f003 0320 	and.w	r3, r3, #32
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00d      	beq.n	800a40a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a3ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3f2:	f003 0320 	and.w	r3, r3, #32
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d007      	beq.n	800a40a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a410:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a41e:	2b40      	cmp	r3, #64	; 0x40
 800a420:	d005      	beq.n	800a42e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a426:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d04f      	beq.n	800a4ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 ff40 	bl	800b2b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a43e:	2b40      	cmp	r3, #64	; 0x40
 800a440:	d141      	bne.n	800a4c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	3308      	adds	r3, #8
 800a448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a450:	e853 3f00 	ldrex	r3, [r3]
 800a454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a458:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a45c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	3308      	adds	r3, #8
 800a46a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a46e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a476:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a47a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a47e:	e841 2300 	strex	r3, r2, [r1]
 800a482:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1d9      	bne.n	800a442 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a492:	2b00      	cmp	r3, #0
 800a494:	d013      	beq.n	800a4be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a49a:	4a13      	ldr	r2, [pc, #76]	; (800a4e8 <HAL_UART_IRQHandler+0x29c>)
 800a49c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7fc fcea 	bl	8006e7c <HAL_DMA_Abort_IT>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d017      	beq.n	800a4de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4bc:	e00f      	b.n	800a4de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f9b0 	bl	800a824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4c4:	e00b      	b.n	800a4de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f9ac 	bl	800a824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4cc:	e007      	b.n	800a4de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f9a8 	bl	800a824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a4dc:	e18d      	b.n	800a7fa <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4de:	bf00      	nop
    return;
 800a4e0:	e18b      	b.n	800a7fa <HAL_UART_IRQHandler+0x5ae>
 800a4e2:	bf00      	nop
 800a4e4:	04000120 	.word	0x04000120
 800a4e8:	0800b37b 	.word	0x0800b37b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	f040 8146 	bne.w	800a782 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a4f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4fa:	f003 0310 	and.w	r3, r3, #16
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 813f 	beq.w	800a782 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a508:	f003 0310 	and.w	r3, r3, #16
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f000 8138 	beq.w	800a782 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2210      	movs	r2, #16
 800a518:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a524:	2b40      	cmp	r3, #64	; 0x40
 800a526:	f040 80b4 	bne.w	800a692 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a536:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f000 815f 	beq.w	800a7fe <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a54a:	429a      	cmp	r2, r3
 800a54c:	f080 8157 	bcs.w	800a7fe <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a556:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 0320 	and.w	r3, r3, #32
 800a566:	2b00      	cmp	r3, #0
 800a568:	f040 8085 	bne.w	800a676 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a574:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a578:	e853 3f00 	ldrex	r3, [r3]
 800a57c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	461a      	mov	r2, r3
 800a592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a59a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a5a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a5a6:	e841 2300 	strex	r3, r2, [r1]
 800a5aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a5ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1da      	bne.n	800a56c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	3308      	adds	r3, #8
 800a5bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5c0:	e853 3f00 	ldrex	r3, [r3]
 800a5c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a5c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5c8:	f023 0301 	bic.w	r3, r3, #1
 800a5cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	3308      	adds	r3, #8
 800a5d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a5da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a5de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a5e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a5e6:	e841 2300 	strex	r3, r2, [r1]
 800a5ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a5ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1e1      	bne.n	800a5b6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3308      	adds	r3, #8
 800a5f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5fc:	e853 3f00 	ldrex	r3, [r3]
 800a600:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a608:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	3308      	adds	r3, #8
 800a612:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a616:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a618:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a61c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a61e:	e841 2300 	strex	r3, r2, [r1]
 800a622:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1e3      	bne.n	800a5f2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2220      	movs	r2, #32
 800a62e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a63e:	e853 3f00 	ldrex	r3, [r3]
 800a642:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a646:	f023 0310 	bic.w	r3, r3, #16
 800a64a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	461a      	mov	r2, r3
 800a654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a658:	65bb      	str	r3, [r7, #88]	; 0x58
 800a65a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a65e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a660:	e841 2300 	strex	r3, r2, [r1]
 800a664:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1e4      	bne.n	800a636 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a670:	4618      	mov	r0, r3
 800a672:	f7fc fbc5 	bl	8006e00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a682:	b29b      	uxth	r3, r3
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	b29b      	uxth	r3, r3
 800a688:	4619      	mov	r1, r3
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f8d4 	bl	800a838 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a690:	e0b5      	b.n	800a7fe <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f000 80a7 	beq.w	800a802 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800a6b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 80a2 	beq.w	800a802 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c6:	e853 3f00 	ldrex	r3, [r3]
 800a6ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6e0:	647b      	str	r3, [r7, #68]	; 0x44
 800a6e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6e8:	e841 2300 	strex	r3, r2, [r1]
 800a6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1e4      	bne.n	800a6be <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	3308      	adds	r3, #8
 800a6fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fe:	e853 3f00 	ldrex	r3, [r3]
 800a702:	623b      	str	r3, [r7, #32]
   return(result);
 800a704:	6a3b      	ldr	r3, [r7, #32]
 800a706:	f023 0301 	bic.w	r3, r3, #1
 800a70a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	3308      	adds	r3, #8
 800a714:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a718:	633a      	str	r2, [r7, #48]	; 0x30
 800a71a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a71e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a720:	e841 2300 	strex	r3, r2, [r1]
 800a724:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1e3      	bne.n	800a6f4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2220      	movs	r2, #32
 800a730:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	e853 3f00 	ldrex	r3, [r3]
 800a74a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f023 0310 	bic.w	r3, r3, #16
 800a752:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	461a      	mov	r2, r3
 800a75c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a760:	61fb      	str	r3, [r7, #28]
 800a762:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a764:	69b9      	ldr	r1, [r7, #24]
 800a766:	69fa      	ldr	r2, [r7, #28]
 800a768:	e841 2300 	strex	r3, r2, [r1]
 800a76c:	617b      	str	r3, [r7, #20]
   return(result);
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1e4      	bne.n	800a73e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a778:	4619      	mov	r1, r3
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f85c 	bl	800a838 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a780:	e03f      	b.n	800a802 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00e      	beq.n	800a7ac <HAL_UART_IRQHandler+0x560>
 800a78e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a796:	2b00      	cmp	r3, #0
 800a798:	d008      	beq.n	800a7ac <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a7a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 ff88 	bl	800b6ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7aa:	e02d      	b.n	800a808 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a7ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00e      	beq.n	800a7d6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a7b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d008      	beq.n	800a7d6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d01c      	beq.n	800a806 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	4798      	blx	r3
    }
    return;
 800a7d4:	e017      	b.n	800a806 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a7d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d012      	beq.n	800a808 <HAL_UART_IRQHandler+0x5bc>
 800a7e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00c      	beq.n	800a808 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fdd9 	bl	800b3a6 <UART_EndTransmit_IT>
    return;
 800a7f4:	e008      	b.n	800a808 <HAL_UART_IRQHandler+0x5bc>
      return;
 800a7f6:	bf00      	nop
 800a7f8:	e006      	b.n	800a808 <HAL_UART_IRQHandler+0x5bc>
    return;
 800a7fa:	bf00      	nop
 800a7fc:	e004      	b.n	800a808 <HAL_UART_IRQHandler+0x5bc>
      return;
 800a7fe:	bf00      	nop
 800a800:	e002      	b.n	800a808 <HAL_UART_IRQHandler+0x5bc>
      return;
 800a802:	bf00      	nop
 800a804:	e000      	b.n	800a808 <HAL_UART_IRQHandler+0x5bc>
    return;
 800a806:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a808:	37e8      	adds	r7, #232	; 0xe8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop

0800a810 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	460b      	mov	r3, r1
 800a842:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a854:	b08a      	sub	sp, #40	; 0x28
 800a856:	af00      	add	r7, sp, #0
 800a858:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	689a      	ldr	r2, [r3, #8]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	691b      	ldr	r3, [r3, #16]
 800a868:	431a      	orrs	r2, r3
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	431a      	orrs	r2, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	69db      	ldr	r3, [r3, #28]
 800a874:	4313      	orrs	r3, r2
 800a876:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	4ba4      	ldr	r3, [pc, #656]	; (800ab10 <UART_SetConfig+0x2c0>)
 800a880:	4013      	ands	r3, r2
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	6812      	ldr	r2, [r2, #0]
 800a886:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a888:	430b      	orrs	r3, r1
 800a88a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	68da      	ldr	r2, [r3, #12]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a99      	ldr	r2, [pc, #612]	; (800ab14 <UART_SetConfig+0x2c4>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d004      	beq.n	800a8bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6a1b      	ldr	r3, [r3, #32]
 800a8b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8cc:	430a      	orrs	r2, r1
 800a8ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a90      	ldr	r2, [pc, #576]	; (800ab18 <UART_SetConfig+0x2c8>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d126      	bne.n	800a928 <UART_SetConfig+0xd8>
 800a8da:	4b90      	ldr	r3, [pc, #576]	; (800ab1c <UART_SetConfig+0x2cc>)
 800a8dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8e0:	f003 0303 	and.w	r3, r3, #3
 800a8e4:	2b03      	cmp	r3, #3
 800a8e6:	d81b      	bhi.n	800a920 <UART_SetConfig+0xd0>
 800a8e8:	a201      	add	r2, pc, #4	; (adr r2, 800a8f0 <UART_SetConfig+0xa0>)
 800a8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ee:	bf00      	nop
 800a8f0:	0800a901 	.word	0x0800a901
 800a8f4:	0800a911 	.word	0x0800a911
 800a8f8:	0800a909 	.word	0x0800a909
 800a8fc:	0800a919 	.word	0x0800a919
 800a900:	2301      	movs	r3, #1
 800a902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a906:	e116      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800a908:	2302      	movs	r3, #2
 800a90a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a90e:	e112      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800a910:	2304      	movs	r3, #4
 800a912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a916:	e10e      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800a918:	2308      	movs	r3, #8
 800a91a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a91e:	e10a      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800a920:	2310      	movs	r3, #16
 800a922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a926:	e106      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a7c      	ldr	r2, [pc, #496]	; (800ab20 <UART_SetConfig+0x2d0>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d138      	bne.n	800a9a4 <UART_SetConfig+0x154>
 800a932:	4b7a      	ldr	r3, [pc, #488]	; (800ab1c <UART_SetConfig+0x2cc>)
 800a934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a938:	f003 030c 	and.w	r3, r3, #12
 800a93c:	2b0c      	cmp	r3, #12
 800a93e:	d82d      	bhi.n	800a99c <UART_SetConfig+0x14c>
 800a940:	a201      	add	r2, pc, #4	; (adr r2, 800a948 <UART_SetConfig+0xf8>)
 800a942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a946:	bf00      	nop
 800a948:	0800a97d 	.word	0x0800a97d
 800a94c:	0800a99d 	.word	0x0800a99d
 800a950:	0800a99d 	.word	0x0800a99d
 800a954:	0800a99d 	.word	0x0800a99d
 800a958:	0800a98d 	.word	0x0800a98d
 800a95c:	0800a99d 	.word	0x0800a99d
 800a960:	0800a99d 	.word	0x0800a99d
 800a964:	0800a99d 	.word	0x0800a99d
 800a968:	0800a985 	.word	0x0800a985
 800a96c:	0800a99d 	.word	0x0800a99d
 800a970:	0800a99d 	.word	0x0800a99d
 800a974:	0800a99d 	.word	0x0800a99d
 800a978:	0800a995 	.word	0x0800a995
 800a97c:	2300      	movs	r3, #0
 800a97e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a982:	e0d8      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800a984:	2302      	movs	r3, #2
 800a986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a98a:	e0d4      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800a98c:	2304      	movs	r3, #4
 800a98e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a992:	e0d0      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800a994:	2308      	movs	r3, #8
 800a996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a99a:	e0cc      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800a99c:	2310      	movs	r3, #16
 800a99e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9a2:	e0c8      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a5e      	ldr	r2, [pc, #376]	; (800ab24 <UART_SetConfig+0x2d4>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d125      	bne.n	800a9fa <UART_SetConfig+0x1aa>
 800a9ae:	4b5b      	ldr	r3, [pc, #364]	; (800ab1c <UART_SetConfig+0x2cc>)
 800a9b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a9b8:	2b30      	cmp	r3, #48	; 0x30
 800a9ba:	d016      	beq.n	800a9ea <UART_SetConfig+0x19a>
 800a9bc:	2b30      	cmp	r3, #48	; 0x30
 800a9be:	d818      	bhi.n	800a9f2 <UART_SetConfig+0x1a2>
 800a9c0:	2b20      	cmp	r3, #32
 800a9c2:	d00a      	beq.n	800a9da <UART_SetConfig+0x18a>
 800a9c4:	2b20      	cmp	r3, #32
 800a9c6:	d814      	bhi.n	800a9f2 <UART_SetConfig+0x1a2>
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <UART_SetConfig+0x182>
 800a9cc:	2b10      	cmp	r3, #16
 800a9ce:	d008      	beq.n	800a9e2 <UART_SetConfig+0x192>
 800a9d0:	e00f      	b.n	800a9f2 <UART_SetConfig+0x1a2>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9d8:	e0ad      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800a9da:	2302      	movs	r3, #2
 800a9dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9e0:	e0a9      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800a9e2:	2304      	movs	r3, #4
 800a9e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9e8:	e0a5      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800a9ea:	2308      	movs	r3, #8
 800a9ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9f0:	e0a1      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800a9f2:	2310      	movs	r3, #16
 800a9f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9f8:	e09d      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a4a      	ldr	r2, [pc, #296]	; (800ab28 <UART_SetConfig+0x2d8>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d125      	bne.n	800aa50 <UART_SetConfig+0x200>
 800aa04:	4b45      	ldr	r3, [pc, #276]	; (800ab1c <UART_SetConfig+0x2cc>)
 800aa06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa0e:	2bc0      	cmp	r3, #192	; 0xc0
 800aa10:	d016      	beq.n	800aa40 <UART_SetConfig+0x1f0>
 800aa12:	2bc0      	cmp	r3, #192	; 0xc0
 800aa14:	d818      	bhi.n	800aa48 <UART_SetConfig+0x1f8>
 800aa16:	2b80      	cmp	r3, #128	; 0x80
 800aa18:	d00a      	beq.n	800aa30 <UART_SetConfig+0x1e0>
 800aa1a:	2b80      	cmp	r3, #128	; 0x80
 800aa1c:	d814      	bhi.n	800aa48 <UART_SetConfig+0x1f8>
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d002      	beq.n	800aa28 <UART_SetConfig+0x1d8>
 800aa22:	2b40      	cmp	r3, #64	; 0x40
 800aa24:	d008      	beq.n	800aa38 <UART_SetConfig+0x1e8>
 800aa26:	e00f      	b.n	800aa48 <UART_SetConfig+0x1f8>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa2e:	e082      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800aa30:	2302      	movs	r3, #2
 800aa32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa36:	e07e      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800aa38:	2304      	movs	r3, #4
 800aa3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa3e:	e07a      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800aa40:	2308      	movs	r3, #8
 800aa42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa46:	e076      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800aa48:	2310      	movs	r3, #16
 800aa4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa4e:	e072      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a35      	ldr	r2, [pc, #212]	; (800ab2c <UART_SetConfig+0x2dc>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d12a      	bne.n	800aab0 <UART_SetConfig+0x260>
 800aa5a:	4b30      	ldr	r3, [pc, #192]	; (800ab1c <UART_SetConfig+0x2cc>)
 800aa5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa68:	d01a      	beq.n	800aaa0 <UART_SetConfig+0x250>
 800aa6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa6e:	d81b      	bhi.n	800aaa8 <UART_SetConfig+0x258>
 800aa70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa74:	d00c      	beq.n	800aa90 <UART_SetConfig+0x240>
 800aa76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa7a:	d815      	bhi.n	800aaa8 <UART_SetConfig+0x258>
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d003      	beq.n	800aa88 <UART_SetConfig+0x238>
 800aa80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa84:	d008      	beq.n	800aa98 <UART_SetConfig+0x248>
 800aa86:	e00f      	b.n	800aaa8 <UART_SetConfig+0x258>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa8e:	e052      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800aa90:	2302      	movs	r3, #2
 800aa92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa96:	e04e      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800aa98:	2304      	movs	r3, #4
 800aa9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa9e:	e04a      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800aaa0:	2308      	movs	r3, #8
 800aaa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaa6:	e046      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800aaa8:	2310      	movs	r3, #16
 800aaaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaae:	e042      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a17      	ldr	r2, [pc, #92]	; (800ab14 <UART_SetConfig+0x2c4>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d13a      	bne.n	800ab30 <UART_SetConfig+0x2e0>
 800aaba:	4b18      	ldr	r3, [pc, #96]	; (800ab1c <UART_SetConfig+0x2cc>)
 800aabc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aac0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aac8:	d01a      	beq.n	800ab00 <UART_SetConfig+0x2b0>
 800aaca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aace:	d81b      	bhi.n	800ab08 <UART_SetConfig+0x2b8>
 800aad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aad4:	d00c      	beq.n	800aaf0 <UART_SetConfig+0x2a0>
 800aad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aada:	d815      	bhi.n	800ab08 <UART_SetConfig+0x2b8>
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d003      	beq.n	800aae8 <UART_SetConfig+0x298>
 800aae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aae4:	d008      	beq.n	800aaf8 <UART_SetConfig+0x2a8>
 800aae6:	e00f      	b.n	800ab08 <UART_SetConfig+0x2b8>
 800aae8:	2300      	movs	r3, #0
 800aaea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaee:	e022      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaf6:	e01e      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800aaf8:	2304      	movs	r3, #4
 800aafa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aafe:	e01a      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800ab00:	2308      	movs	r3, #8
 800ab02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab06:	e016      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800ab08:	2310      	movs	r3, #16
 800ab0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab0e:	e012      	b.n	800ab36 <UART_SetConfig+0x2e6>
 800ab10:	efff69f3 	.word	0xefff69f3
 800ab14:	40008000 	.word	0x40008000
 800ab18:	40013800 	.word	0x40013800
 800ab1c:	40021000 	.word	0x40021000
 800ab20:	40004400 	.word	0x40004400
 800ab24:	40004800 	.word	0x40004800
 800ab28:	40004c00 	.word	0x40004c00
 800ab2c:	40005000 	.word	0x40005000
 800ab30:	2310      	movs	r3, #16
 800ab32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a9f      	ldr	r2, [pc, #636]	; (800adb8 <UART_SetConfig+0x568>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d17a      	bne.n	800ac36 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab44:	2b08      	cmp	r3, #8
 800ab46:	d824      	bhi.n	800ab92 <UART_SetConfig+0x342>
 800ab48:	a201      	add	r2, pc, #4	; (adr r2, 800ab50 <UART_SetConfig+0x300>)
 800ab4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab4e:	bf00      	nop
 800ab50:	0800ab75 	.word	0x0800ab75
 800ab54:	0800ab93 	.word	0x0800ab93
 800ab58:	0800ab7d 	.word	0x0800ab7d
 800ab5c:	0800ab93 	.word	0x0800ab93
 800ab60:	0800ab83 	.word	0x0800ab83
 800ab64:	0800ab93 	.word	0x0800ab93
 800ab68:	0800ab93 	.word	0x0800ab93
 800ab6c:	0800ab93 	.word	0x0800ab93
 800ab70:	0800ab8b 	.word	0x0800ab8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab74:	f7fd ff78 	bl	8008a68 <HAL_RCC_GetPCLK1Freq>
 800ab78:	61f8      	str	r0, [r7, #28]
        break;
 800ab7a:	e010      	b.n	800ab9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab7c:	4b8f      	ldr	r3, [pc, #572]	; (800adbc <UART_SetConfig+0x56c>)
 800ab7e:	61fb      	str	r3, [r7, #28]
        break;
 800ab80:	e00d      	b.n	800ab9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab82:	f7fd fed9 	bl	8008938 <HAL_RCC_GetSysClockFreq>
 800ab86:	61f8      	str	r0, [r7, #28]
        break;
 800ab88:	e009      	b.n	800ab9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab8e:	61fb      	str	r3, [r7, #28]
        break;
 800ab90:	e005      	b.n	800ab9e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800ab92:	2300      	movs	r3, #0
 800ab94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ab9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f000 80fb 	beq.w	800ad9c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	685a      	ldr	r2, [r3, #4]
 800abaa:	4613      	mov	r3, r2
 800abac:	005b      	lsls	r3, r3, #1
 800abae:	4413      	add	r3, r2
 800abb0:	69fa      	ldr	r2, [r7, #28]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d305      	bcc.n	800abc2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800abbc:	69fa      	ldr	r2, [r7, #28]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d903      	bls.n	800abca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800abc8:	e0e8      	b.n	800ad9c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	2200      	movs	r2, #0
 800abce:	461c      	mov	r4, r3
 800abd0:	4615      	mov	r5, r2
 800abd2:	f04f 0200 	mov.w	r2, #0
 800abd6:	f04f 0300 	mov.w	r3, #0
 800abda:	022b      	lsls	r3, r5, #8
 800abdc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800abe0:	0222      	lsls	r2, r4, #8
 800abe2:	68f9      	ldr	r1, [r7, #12]
 800abe4:	6849      	ldr	r1, [r1, #4]
 800abe6:	0849      	lsrs	r1, r1, #1
 800abe8:	2000      	movs	r0, #0
 800abea:	4688      	mov	r8, r1
 800abec:	4681      	mov	r9, r0
 800abee:	eb12 0a08 	adds.w	sl, r2, r8
 800abf2:	eb43 0b09 	adc.w	fp, r3, r9
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	603b      	str	r3, [r7, #0]
 800abfe:	607a      	str	r2, [r7, #4]
 800ac00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac04:	4650      	mov	r0, sl
 800ac06:	4659      	mov	r1, fp
 800ac08:	f7f5 fae6 	bl	80001d8 <__aeabi_uldivmod>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	460b      	mov	r3, r1
 800ac10:	4613      	mov	r3, r2
 800ac12:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac1a:	d308      	bcc.n	800ac2e <UART_SetConfig+0x3de>
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac22:	d204      	bcs.n	800ac2e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	69ba      	ldr	r2, [r7, #24]
 800ac2a:	60da      	str	r2, [r3, #12]
 800ac2c:	e0b6      	b.n	800ad9c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ac34:	e0b2      	b.n	800ad9c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	69db      	ldr	r3, [r3, #28]
 800ac3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac3e:	d15e      	bne.n	800acfe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800ac40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac44:	2b08      	cmp	r3, #8
 800ac46:	d828      	bhi.n	800ac9a <UART_SetConfig+0x44a>
 800ac48:	a201      	add	r2, pc, #4	; (adr r2, 800ac50 <UART_SetConfig+0x400>)
 800ac4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4e:	bf00      	nop
 800ac50:	0800ac75 	.word	0x0800ac75
 800ac54:	0800ac7d 	.word	0x0800ac7d
 800ac58:	0800ac85 	.word	0x0800ac85
 800ac5c:	0800ac9b 	.word	0x0800ac9b
 800ac60:	0800ac8b 	.word	0x0800ac8b
 800ac64:	0800ac9b 	.word	0x0800ac9b
 800ac68:	0800ac9b 	.word	0x0800ac9b
 800ac6c:	0800ac9b 	.word	0x0800ac9b
 800ac70:	0800ac93 	.word	0x0800ac93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac74:	f7fd fef8 	bl	8008a68 <HAL_RCC_GetPCLK1Freq>
 800ac78:	61f8      	str	r0, [r7, #28]
        break;
 800ac7a:	e014      	b.n	800aca6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac7c:	f7fd ff0a 	bl	8008a94 <HAL_RCC_GetPCLK2Freq>
 800ac80:	61f8      	str	r0, [r7, #28]
        break;
 800ac82:	e010      	b.n	800aca6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac84:	4b4d      	ldr	r3, [pc, #308]	; (800adbc <UART_SetConfig+0x56c>)
 800ac86:	61fb      	str	r3, [r7, #28]
        break;
 800ac88:	e00d      	b.n	800aca6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac8a:	f7fd fe55 	bl	8008938 <HAL_RCC_GetSysClockFreq>
 800ac8e:	61f8      	str	r0, [r7, #28]
        break;
 800ac90:	e009      	b.n	800aca6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac96:	61fb      	str	r3, [r7, #28]
        break;
 800ac98:	e005      	b.n	800aca6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800aca4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d077      	beq.n	800ad9c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	005a      	lsls	r2, r3, #1
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	085b      	lsrs	r3, r3, #1
 800acb6:	441a      	add	r2, r3
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800acc0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	2b0f      	cmp	r3, #15
 800acc6:	d916      	bls.n	800acf6 <UART_SetConfig+0x4a6>
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acce:	d212      	bcs.n	800acf6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	f023 030f 	bic.w	r3, r3, #15
 800acd8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	085b      	lsrs	r3, r3, #1
 800acde:	b29b      	uxth	r3, r3
 800ace0:	f003 0307 	and.w	r3, r3, #7
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	8afb      	ldrh	r3, [r7, #22]
 800ace8:	4313      	orrs	r3, r2
 800acea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	8afa      	ldrh	r2, [r7, #22]
 800acf2:	60da      	str	r2, [r3, #12]
 800acf4:	e052      	b.n	800ad9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800acfc:	e04e      	b.n	800ad9c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800acfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ad02:	2b08      	cmp	r3, #8
 800ad04:	d827      	bhi.n	800ad56 <UART_SetConfig+0x506>
 800ad06:	a201      	add	r2, pc, #4	; (adr r2, 800ad0c <UART_SetConfig+0x4bc>)
 800ad08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0c:	0800ad31 	.word	0x0800ad31
 800ad10:	0800ad39 	.word	0x0800ad39
 800ad14:	0800ad41 	.word	0x0800ad41
 800ad18:	0800ad57 	.word	0x0800ad57
 800ad1c:	0800ad47 	.word	0x0800ad47
 800ad20:	0800ad57 	.word	0x0800ad57
 800ad24:	0800ad57 	.word	0x0800ad57
 800ad28:	0800ad57 	.word	0x0800ad57
 800ad2c:	0800ad4f 	.word	0x0800ad4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad30:	f7fd fe9a 	bl	8008a68 <HAL_RCC_GetPCLK1Freq>
 800ad34:	61f8      	str	r0, [r7, #28]
        break;
 800ad36:	e014      	b.n	800ad62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad38:	f7fd feac 	bl	8008a94 <HAL_RCC_GetPCLK2Freq>
 800ad3c:	61f8      	str	r0, [r7, #28]
        break;
 800ad3e:	e010      	b.n	800ad62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad40:	4b1e      	ldr	r3, [pc, #120]	; (800adbc <UART_SetConfig+0x56c>)
 800ad42:	61fb      	str	r3, [r7, #28]
        break;
 800ad44:	e00d      	b.n	800ad62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad46:	f7fd fdf7 	bl	8008938 <HAL_RCC_GetSysClockFreq>
 800ad4a:	61f8      	str	r0, [r7, #28]
        break;
 800ad4c:	e009      	b.n	800ad62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad52:	61fb      	str	r3, [r7, #28]
        break;
 800ad54:	e005      	b.n	800ad62 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800ad56:	2300      	movs	r3, #0
 800ad58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ad60:	bf00      	nop
    }

    if (pclk != 0U)
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d019      	beq.n	800ad9c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	085a      	lsrs	r2, r3, #1
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	441a      	add	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	2b0f      	cmp	r3, #15
 800ad80:	d909      	bls.n	800ad96 <UART_SetConfig+0x546>
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad88:	d205      	bcs.n	800ad96 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	b29a      	uxth	r2, r3
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	60da      	str	r2, [r3, #12]
 800ad94:	e002      	b.n	800ad9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ada8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800adac:	4618      	mov	r0, r3
 800adae:	3728      	adds	r7, #40	; 0x28
 800adb0:	46bd      	mov	sp, r7
 800adb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adb6:	bf00      	nop
 800adb8:	40008000 	.word	0x40008000
 800adbc:	00f42400 	.word	0x00f42400

0800adc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00a      	beq.n	800adea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	430a      	orrs	r2, r1
 800ade8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adee:	f003 0302 	and.w	r3, r3, #2
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00a      	beq.n	800ae0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	430a      	orrs	r2, r1
 800ae0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae10:	f003 0304 	and.w	r3, r3, #4
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00a      	beq.n	800ae2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	430a      	orrs	r2, r1
 800ae2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae32:	f003 0308 	and.w	r3, r3, #8
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00a      	beq.n	800ae50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	430a      	orrs	r2, r1
 800ae4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae54:	f003 0310 	and.w	r3, r3, #16
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00a      	beq.n	800ae72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	430a      	orrs	r2, r1
 800ae70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae76:	f003 0320 	and.w	r3, r3, #32
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00a      	beq.n	800ae94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	430a      	orrs	r2, r1
 800ae92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d01a      	beq.n	800aed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	430a      	orrs	r2, r1
 800aeb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aebe:	d10a      	bne.n	800aed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	430a      	orrs	r2, r1
 800aed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00a      	beq.n	800aef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	430a      	orrs	r2, r1
 800aef6:	605a      	str	r2, [r3, #4]
  }
}
 800aef8:	bf00      	nop
 800aefa:	370c      	adds	r7, #12
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af02      	add	r7, sp, #8
 800af0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af14:	f7fa f966 	bl	80051e4 <HAL_GetTick>
 800af18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 0308 	and.w	r3, r3, #8
 800af24:	2b08      	cmp	r3, #8
 800af26:	d10e      	bne.n	800af46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2200      	movs	r2, #0
 800af32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f82d 	bl	800af96 <UART_WaitOnFlagUntilTimeout>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d001      	beq.n	800af46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af42:	2303      	movs	r3, #3
 800af44:	e023      	b.n	800af8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f003 0304 	and.w	r3, r3, #4
 800af50:	2b04      	cmp	r3, #4
 800af52:	d10e      	bne.n	800af72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af58:	9300      	str	r3, [sp, #0]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f817 	bl	800af96 <UART_WaitOnFlagUntilTimeout>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af6e:	2303      	movs	r3, #3
 800af70:	e00d      	b.n	800af8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2220      	movs	r2, #32
 800af76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2220      	movs	r2, #32
 800af7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b09c      	sub	sp, #112	; 0x70
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	60f8      	str	r0, [r7, #12]
 800af9e:	60b9      	str	r1, [r7, #8]
 800afa0:	603b      	str	r3, [r7, #0]
 800afa2:	4613      	mov	r3, r2
 800afa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afa6:	e0a5      	b.n	800b0f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afae:	f000 80a1 	beq.w	800b0f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afb2:	f7fa f917 	bl	80051e4 <HAL_GetTick>
 800afb6:	4602      	mov	r2, r0
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d302      	bcc.n	800afc8 <UART_WaitOnFlagUntilTimeout+0x32>
 800afc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d13e      	bne.n	800b046 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afd0:	e853 3f00 	ldrex	r3, [r3]
 800afd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800afd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800afdc:	667b      	str	r3, [r7, #100]	; 0x64
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	461a      	mov	r2, r3
 800afe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afe6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afe8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800afec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800afee:	e841 2300 	strex	r3, r2, [r1]
 800aff2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d1e6      	bne.n	800afc8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	3308      	adds	r3, #8
 800b000:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b004:	e853 3f00 	ldrex	r3, [r3]
 800b008:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00c:	f023 0301 	bic.w	r3, r3, #1
 800b010:	663b      	str	r3, [r7, #96]	; 0x60
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	3308      	adds	r3, #8
 800b018:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b01a:	64ba      	str	r2, [r7, #72]	; 0x48
 800b01c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b022:	e841 2300 	strex	r3, r2, [r1]
 800b026:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1e5      	bne.n	800affa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2220      	movs	r2, #32
 800b032:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2220      	movs	r2, #32
 800b038:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b042:	2303      	movs	r3, #3
 800b044:	e067      	b.n	800b116 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f003 0304 	and.w	r3, r3, #4
 800b050:	2b00      	cmp	r3, #0
 800b052:	d04f      	beq.n	800b0f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	69db      	ldr	r3, [r3, #28]
 800b05a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b05e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b062:	d147      	bne.n	800b0f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b06c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b076:	e853 3f00 	ldrex	r3, [r3]
 800b07a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b082:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	461a      	mov	r2, r3
 800b08a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b08c:	637b      	str	r3, [r7, #52]	; 0x34
 800b08e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b090:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b094:	e841 2300 	strex	r3, r2, [r1]
 800b098:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d1e6      	bne.n	800b06e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	3308      	adds	r3, #8
 800b0a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	e853 3f00 	ldrex	r3, [r3]
 800b0ae:	613b      	str	r3, [r7, #16]
   return(result);
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	f023 0301 	bic.w	r3, r3, #1
 800b0b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	3308      	adds	r3, #8
 800b0be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b0c0:	623a      	str	r2, [r7, #32]
 800b0c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c4:	69f9      	ldr	r1, [r7, #28]
 800b0c6:	6a3a      	ldr	r2, [r7, #32]
 800b0c8:	e841 2300 	strex	r3, r2, [r1]
 800b0cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1e5      	bne.n	800b0a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2220      	movs	r2, #32
 800b0d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2220      	movs	r2, #32
 800b0de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2220      	movs	r2, #32
 800b0e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	e010      	b.n	800b116 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	69da      	ldr	r2, [r3, #28]
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	429a      	cmp	r2, r3
 800b102:	bf0c      	ite	eq
 800b104:	2301      	moveq	r3, #1
 800b106:	2300      	movne	r3, #0
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	461a      	mov	r2, r3
 800b10c:	79fb      	ldrb	r3, [r7, #7]
 800b10e:	429a      	cmp	r2, r3
 800b110:	f43f af4a 	beq.w	800afa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3770      	adds	r7, #112	; 0x70
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
	...

0800b120 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b120:	b480      	push	{r7}
 800b122:	b097      	sub	sp, #92	; 0x5c
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	4613      	mov	r3, r2
 800b12c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	88fa      	ldrh	r2, [r7, #6]
 800b138:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	88fa      	ldrh	r2, [r7, #6]
 800b140:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2200      	movs	r2, #0
 800b148:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b152:	d10e      	bne.n	800b172 <UART_Start_Receive_IT+0x52>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	691b      	ldr	r3, [r3, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d105      	bne.n	800b168 <UART_Start_Receive_IT+0x48>
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b162:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b166:	e02d      	b.n	800b1c4 <UART_Start_Receive_IT+0xa4>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	22ff      	movs	r2, #255	; 0xff
 800b16c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b170:	e028      	b.n	800b1c4 <UART_Start_Receive_IT+0xa4>
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10d      	bne.n	800b196 <UART_Start_Receive_IT+0x76>
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d104      	bne.n	800b18c <UART_Start_Receive_IT+0x6c>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	22ff      	movs	r2, #255	; 0xff
 800b186:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b18a:	e01b      	b.n	800b1c4 <UART_Start_Receive_IT+0xa4>
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	227f      	movs	r2, #127	; 0x7f
 800b190:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b194:	e016      	b.n	800b1c4 <UART_Start_Receive_IT+0xa4>
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b19e:	d10d      	bne.n	800b1bc <UART_Start_Receive_IT+0x9c>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d104      	bne.n	800b1b2 <UART_Start_Receive_IT+0x92>
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	227f      	movs	r2, #127	; 0x7f
 800b1ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b1b0:	e008      	b.n	800b1c4 <UART_Start_Receive_IT+0xa4>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	223f      	movs	r2, #63	; 0x3f
 800b1b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b1ba:	e003      	b.n	800b1c4 <UART_Start_Receive_IT+0xa4>
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2222      	movs	r2, #34	; 0x22
 800b1d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1dc:	e853 3f00 	ldrex	r3, [r3]
 800b1e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e4:	f043 0301 	orr.w	r3, r3, #1
 800b1e8:	657b      	str	r3, [r7, #84]	; 0x54
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	3308      	adds	r3, #8
 800b1f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b1f2:	64ba      	str	r2, [r7, #72]	; 0x48
 800b1f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b1f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1fa:	e841 2300 	strex	r3, r2, [r1]
 800b1fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1e5      	bne.n	800b1d2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b20e:	d107      	bne.n	800b220 <UART_Start_Receive_IT+0x100>
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	691b      	ldr	r3, [r3, #16]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d103      	bne.n	800b220 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	4a24      	ldr	r2, [pc, #144]	; (800b2ac <UART_Start_Receive_IT+0x18c>)
 800b21c:	665a      	str	r2, [r3, #100]	; 0x64
 800b21e:	e002      	b.n	800b226 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4a23      	ldr	r2, [pc, #140]	; (800b2b0 <UART_Start_Receive_IT+0x190>)
 800b224:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d019      	beq.n	800b26a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23e:	e853 3f00 	ldrex	r3, [r3]
 800b242:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b246:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b24a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	461a      	mov	r2, r3
 800b252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b254:	637b      	str	r3, [r7, #52]	; 0x34
 800b256:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b25a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b25c:	e841 2300 	strex	r3, r2, [r1]
 800b260:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1e6      	bne.n	800b236 <UART_Start_Receive_IT+0x116>
 800b268:	e018      	b.n	800b29c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	e853 3f00 	ldrex	r3, [r3]
 800b276:	613b      	str	r3, [r7, #16]
   return(result);
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	f043 0320 	orr.w	r3, r3, #32
 800b27e:	653b      	str	r3, [r7, #80]	; 0x50
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	461a      	mov	r2, r3
 800b286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b288:	623b      	str	r3, [r7, #32]
 800b28a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28c:	69f9      	ldr	r1, [r7, #28]
 800b28e:	6a3a      	ldr	r2, [r7, #32]
 800b290:	e841 2300 	strex	r3, r2, [r1]
 800b294:	61bb      	str	r3, [r7, #24]
   return(result);
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d1e6      	bne.n	800b26a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	375c      	adds	r7, #92	; 0x5c
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	0800b55b 	.word	0x0800b55b
 800b2b0:	0800b3fb 	.word	0x0800b3fb

0800b2b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b095      	sub	sp, #84	; 0x54
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2c4:	e853 3f00 	ldrex	r3, [r3]
 800b2c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2da:	643b      	str	r3, [r7, #64]	; 0x40
 800b2dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2e2:	e841 2300 	strex	r3, r2, [r1]
 800b2e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1e6      	bne.n	800b2bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	3308      	adds	r3, #8
 800b2f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f6:	6a3b      	ldr	r3, [r7, #32]
 800b2f8:	e853 3f00 	ldrex	r3, [r3]
 800b2fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	f023 0301 	bic.w	r3, r3, #1
 800b304:	64bb      	str	r3, [r7, #72]	; 0x48
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	3308      	adds	r3, #8
 800b30c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b30e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b310:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b316:	e841 2300 	strex	r3, r2, [r1]
 800b31a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d1e5      	bne.n	800b2ee <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b326:	2b01      	cmp	r3, #1
 800b328:	d118      	bne.n	800b35c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	e853 3f00 	ldrex	r3, [r3]
 800b336:	60bb      	str	r3, [r7, #8]
   return(result);
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	f023 0310 	bic.w	r3, r3, #16
 800b33e:	647b      	str	r3, [r7, #68]	; 0x44
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	461a      	mov	r2, r3
 800b346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b348:	61bb      	str	r3, [r7, #24]
 800b34a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34c:	6979      	ldr	r1, [r7, #20]
 800b34e:	69ba      	ldr	r2, [r7, #24]
 800b350:	e841 2300 	strex	r3, r2, [r1]
 800b354:	613b      	str	r3, [r7, #16]
   return(result);
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1e6      	bne.n	800b32a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2220      	movs	r2, #32
 800b360:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b36e:	bf00      	nop
 800b370:	3754      	adds	r7, #84	; 0x54
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b084      	sub	sp, #16
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b386:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2200      	movs	r2, #0
 800b38c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2200      	movs	r2, #0
 800b394:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f7ff fa43 	bl	800a824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b39e:	bf00      	nop
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b088      	sub	sp, #32
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	e853 3f00 	ldrex	r3, [r3]
 800b3ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3c2:	61fb      	str	r3, [r7, #28]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	61bb      	str	r3, [r7, #24]
 800b3ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d0:	6979      	ldr	r1, [r7, #20]
 800b3d2:	69ba      	ldr	r2, [r7, #24]
 800b3d4:	e841 2300 	strex	r3, r2, [r1]
 800b3d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1e6      	bne.n	800b3ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2220      	movs	r2, #32
 800b3e4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f7ff fa0f 	bl	800a810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3f2:	bf00      	nop
 800b3f4:	3720      	adds	r7, #32
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b096      	sub	sp, #88	; 0x58
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b408:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b410:	2b22      	cmp	r3, #34	; 0x22
 800b412:	f040 8094 	bne.w	800b53e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b41c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b420:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800b424:	b2d9      	uxtb	r1, r3
 800b426:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b42a:	b2da      	uxtb	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b430:	400a      	ands	r2, r1
 800b432:	b2d2      	uxtb	r2, r2
 800b434:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b43a:	1c5a      	adds	r2, r3, #1
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b446:	b29b      	uxth	r3, r3
 800b448:	3b01      	subs	r3, #1
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b458:	b29b      	uxth	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d179      	bne.n	800b552 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b466:	e853 3f00 	ldrex	r3, [r3]
 800b46a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b472:	653b      	str	r3, [r7, #80]	; 0x50
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	461a      	mov	r2, r3
 800b47a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b47c:	647b      	str	r3, [r7, #68]	; 0x44
 800b47e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b480:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b484:	e841 2300 	strex	r3, r2, [r1]
 800b488:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1e6      	bne.n	800b45e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	3308      	adds	r3, #8
 800b496:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49a:	e853 3f00 	ldrex	r3, [r3]
 800b49e:	623b      	str	r3, [r7, #32]
   return(result);
 800b4a0:	6a3b      	ldr	r3, [r7, #32]
 800b4a2:	f023 0301 	bic.w	r3, r3, #1
 800b4a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	3308      	adds	r3, #8
 800b4ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4b0:	633a      	str	r2, [r7, #48]	; 0x30
 800b4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4b8:	e841 2300 	strex	r3, r2, [r1]
 800b4bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1e5      	bne.n	800b490 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2220      	movs	r2, #32
 800b4c8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d12e      	bne.n	800b536 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	e853 3f00 	ldrex	r3, [r3]
 800b4ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f023 0310 	bic.w	r3, r3, #16
 800b4f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4fc:	61fb      	str	r3, [r7, #28]
 800b4fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b500:	69b9      	ldr	r1, [r7, #24]
 800b502:	69fa      	ldr	r2, [r7, #28]
 800b504:	e841 2300 	strex	r3, r2, [r1]
 800b508:	617b      	str	r3, [r7, #20]
   return(result);
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1e6      	bne.n	800b4de <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	69db      	ldr	r3, [r3, #28]
 800b516:	f003 0310 	and.w	r3, r3, #16
 800b51a:	2b10      	cmp	r3, #16
 800b51c:	d103      	bne.n	800b526 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2210      	movs	r2, #16
 800b524:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b52c:	4619      	mov	r1, r3
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f7ff f982 	bl	800a838 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b534:	e00d      	b.n	800b552 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7f9 fdb0 	bl	800509c <HAL_UART_RxCpltCallback>
}
 800b53c:	e009      	b.n	800b552 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	8b1b      	ldrh	r3, [r3, #24]
 800b544:	b29a      	uxth	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f042 0208 	orr.w	r2, r2, #8
 800b54e:	b292      	uxth	r2, r2
 800b550:	831a      	strh	r2, [r3, #24]
}
 800b552:	bf00      	nop
 800b554:	3758      	adds	r7, #88	; 0x58
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b096      	sub	sp, #88	; 0x58
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b568:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b570:	2b22      	cmp	r3, #34	; 0x22
 800b572:	f040 8094 	bne.w	800b69e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b57c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b584:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b586:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b58a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b58e:	4013      	ands	r3, r2
 800b590:	b29a      	uxth	r2, r3
 800b592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b594:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b59a:	1c9a      	adds	r2, r3, #2
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d179      	bne.n	800b6b2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c6:	e853 3f00 	ldrex	r3, [r3]
 800b5ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5dc:	643b      	str	r3, [r7, #64]	; 0x40
 800b5de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b5e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5e4:	e841 2300 	strex	r3, r2, [r1]
 800b5e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1e6      	bne.n	800b5be <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	3308      	adds	r3, #8
 800b5f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f8:	6a3b      	ldr	r3, [r7, #32]
 800b5fa:	e853 3f00 	ldrex	r3, [r3]
 800b5fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	f023 0301 	bic.w	r3, r3, #1
 800b606:	64bb      	str	r3, [r7, #72]	; 0x48
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	3308      	adds	r3, #8
 800b60e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b610:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b618:	e841 2300 	strex	r3, r2, [r1]
 800b61c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b620:	2b00      	cmp	r3, #0
 800b622:	d1e5      	bne.n	800b5f0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2220      	movs	r2, #32
 800b628:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b634:	2b01      	cmp	r3, #1
 800b636:	d12e      	bne.n	800b696 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	e853 3f00 	ldrex	r3, [r3]
 800b64a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	f023 0310 	bic.w	r3, r3, #16
 800b652:	647b      	str	r3, [r7, #68]	; 0x44
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	461a      	mov	r2, r3
 800b65a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b65c:	61bb      	str	r3, [r7, #24]
 800b65e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b660:	6979      	ldr	r1, [r7, #20]
 800b662:	69ba      	ldr	r2, [r7, #24]
 800b664:	e841 2300 	strex	r3, r2, [r1]
 800b668:	613b      	str	r3, [r7, #16]
   return(result);
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1e6      	bne.n	800b63e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	69db      	ldr	r3, [r3, #28]
 800b676:	f003 0310 	and.w	r3, r3, #16
 800b67a:	2b10      	cmp	r3, #16
 800b67c:	d103      	bne.n	800b686 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2210      	movs	r2, #16
 800b684:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b68c:	4619      	mov	r1, r3
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f7ff f8d2 	bl	800a838 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b694:	e00d      	b.n	800b6b2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7f9 fd00 	bl	800509c <HAL_UART_RxCpltCallback>
}
 800b69c:	e009      	b.n	800b6b2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	8b1b      	ldrh	r3, [r3, #24]
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f042 0208 	orr.w	r2, r2, #8
 800b6ae:	b292      	uxth	r2, r2
 800b6b0:	831a      	strh	r2, [r3, #24]
}
 800b6b2:	bf00      	nop
 800b6b4:	3758      	adds	r7, #88	; 0x58
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b083      	sub	sp, #12
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b6c2:	bf00      	nop
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <_Znwj>:
 800b6ce:	2801      	cmp	r0, #1
 800b6d0:	bf38      	it	cc
 800b6d2:	2001      	movcc	r0, #1
 800b6d4:	b510      	push	{r4, lr}
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 f9ef 	bl	800babc <malloc>
 800b6de:	b930      	cbnz	r0, 800b6ee <_Znwj+0x20>
 800b6e0:	f000 f9aa 	bl	800ba38 <_ZSt15get_new_handlerv>
 800b6e4:	b908      	cbnz	r0, 800b6ea <_Znwj+0x1c>
 800b6e6:	f000 f9b8 	bl	800ba5a <abort>
 800b6ea:	4780      	blx	r0
 800b6ec:	e7f4      	b.n	800b6d8 <_Znwj+0xa>
 800b6ee:	bd10      	pop	{r4, pc}

0800b6f0 <__cxa_pure_virtual>:
 800b6f0:	b508      	push	{r3, lr}
 800b6f2:	f000 f99b 	bl	800ba2c <_ZSt9terminatev>

0800b6f6 <_ZNSaIcEC1Ev>:
 800b6f6:	4770      	bx	lr

0800b6f8 <_ZNSaIcED1Ev>:
 800b6f8:	4770      	bx	lr

0800b6fa <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800b6fa:	b10a      	cbz	r2, 800b700 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800b6fc:	f000 b9ee 	b.w	800badc <memcpy>
 800b700:	4770      	bx	lr
	...

0800b704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800b704:	b508      	push	{r3, lr}
 800b706:	680b      	ldr	r3, [r1, #0]
 800b708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b70c:	d302      	bcc.n	800b714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800b70e:	480d      	ldr	r0, [pc, #52]	; (800b744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800b710:	f000 f9a0 	bl	800ba54 <_ZSt20__throw_length_errorPKc>
 800b714:	4293      	cmp	r3, r2
 800b716:	d90b      	bls.n	800b730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b718:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800b71c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800b720:	d206      	bcs.n	800b730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b722:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b726:	bf2a      	itet	cs
 800b728:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800b72c:	6008      	strcc	r0, [r1, #0]
 800b72e:	600b      	strcs	r3, [r1, #0]
 800b730:	6808      	ldr	r0, [r1, #0]
 800b732:	3001      	adds	r0, #1
 800b734:	d501      	bpl.n	800b73a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800b736:	f000 f987 	bl	800ba48 <_ZSt17__throw_bad_allocv>
 800b73a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b73e:	f7ff bfc6 	b.w	800b6ce <_Znwj>
 800b742:	bf00      	nop
 800b744:	0800d13c 	.word	0x0800d13c

0800b748 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800b748:	f850 3b08 	ldr.w	r3, [r0], #8
 800b74c:	4283      	cmp	r3, r0
 800b74e:	d002      	beq.n	800b756 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800b750:	4618      	mov	r0, r3
 800b752:	f000 b95c 	b.w	800ba0e <_ZdlPv>
 800b756:	4770      	bx	lr

0800b758 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800b758:	6840      	ldr	r0, [r0, #4]
 800b75a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800b75e:	3901      	subs	r1, #1
 800b760:	1a09      	subs	r1, r1, r0
 800b762:	4291      	cmp	r1, r2
 800b764:	b508      	push	{r3, lr}
 800b766:	d202      	bcs.n	800b76e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800b768:	4618      	mov	r0, r3
 800b76a:	f000 f973 	bl	800ba54 <_ZSt20__throw_length_errorPKc>
 800b76e:	bd08      	pop	{r3, pc}

0800b770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800b770:	2a01      	cmp	r2, #1
 800b772:	b410      	push	{r4}
 800b774:	d104      	bne.n	800b780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800b776:	780a      	ldrb	r2, [r1, #0]
 800b778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b77c:	7002      	strb	r2, [r0, #0]
 800b77e:	4770      	bx	lr
 800b780:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b784:	f7ff bfb9 	b.w	800b6fa <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800b788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 800b788:	460b      	mov	r3, r1
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	b410      	push	{r4}
 800b78e:	4611      	mov	r1, r2
 800b790:	4604      	mov	r4, r0
 800b792:	d103      	bne.n	800b79c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 800b794:	7022      	strb	r2, [r4, #0]
 800b796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d0fa      	beq.n	800b796 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 800b7a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	f000 b9a7 	b.w	800baf8 <memset>

0800b7aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 800b7aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7ac:	290f      	cmp	r1, #15
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	9101      	str	r1, [sp, #4]
 800b7b2:	4615      	mov	r5, r2
 800b7b4:	d906      	bls.n	800b7c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	a901      	add	r1, sp, #4
 800b7ba:	f7ff ffa3 	bl	800b704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b7be:	9b01      	ldr	r3, [sp, #4]
 800b7c0:	6020      	str	r0, [r4, #0]
 800b7c2:	60a3      	str	r3, [r4, #8]
 800b7c4:	9901      	ldr	r1, [sp, #4]
 800b7c6:	b119      	cbz	r1, 800b7d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 800b7c8:	6820      	ldr	r0, [r4, #0]
 800b7ca:	462a      	mov	r2, r5
 800b7cc:	f7ff ffdc 	bl	800b788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 800b7d0:	9b01      	ldr	r3, [sp, #4]
 800b7d2:	6822      	ldr	r2, [r4, #0]
 800b7d4:	6063      	str	r3, [r4, #4]
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	54d1      	strb	r1, [r2, r3]
 800b7da:	b003      	add	sp, #12
 800b7dc:	bd30      	pop	{r4, r5, pc}

0800b7de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800b7de:	b508      	push	{r3, lr}
 800b7e0:	1a52      	subs	r2, r2, r1
 800b7e2:	f7ff ffc5 	bl	800b770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b7e6:	bd08      	pop	{r3, pc}

0800b7e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800b7e8:	b508      	push	{r3, lr}
 800b7ea:	1a52      	subs	r2, r2, r1
 800b7ec:	f7ff ffc0 	bl	800b770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b7f0:	bd08      	pop	{r3, pc}

0800b7f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800b7f2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7f6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b7f8:	461f      	mov	r7, r3
 800b7fa:	6843      	ldr	r3, [r0, #4]
 800b7fc:	eb01 0802 	add.w	r8, r1, r2
 800b800:	1ab2      	subs	r2, r6, r2
 800b802:	441a      	add	r2, r3
 800b804:	eba3 0908 	sub.w	r9, r3, r8
 800b808:	4603      	mov	r3, r0
 800b80a:	9201      	str	r2, [sp, #4]
 800b80c:	f853 2b08 	ldr.w	r2, [r3], #8
 800b810:	429a      	cmp	r2, r3
 800b812:	bf18      	it	ne
 800b814:	6882      	ldrne	r2, [r0, #8]
 800b816:	460d      	mov	r5, r1
 800b818:	bf08      	it	eq
 800b81a:	220f      	moveq	r2, #15
 800b81c:	a901      	add	r1, sp, #4
 800b81e:	4604      	mov	r4, r0
 800b820:	f7ff ff70 	bl	800b704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b824:	4682      	mov	sl, r0
 800b826:	b11d      	cbz	r5, 800b830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800b828:	6821      	ldr	r1, [r4, #0]
 800b82a:	462a      	mov	r2, r5
 800b82c:	f7ff ffa0 	bl	800b770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b830:	b137      	cbz	r7, 800b840 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800b832:	b12e      	cbz	r6, 800b840 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800b834:	4632      	mov	r2, r6
 800b836:	4639      	mov	r1, r7
 800b838:	eb0a 0005 	add.w	r0, sl, r5
 800b83c:	f7ff ff98 	bl	800b770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b840:	f1b9 0f00 	cmp.w	r9, #0
 800b844:	d007      	beq.n	800b856 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800b846:	6821      	ldr	r1, [r4, #0]
 800b848:	4435      	add	r5, r6
 800b84a:	464a      	mov	r2, r9
 800b84c:	4441      	add	r1, r8
 800b84e:	eb0a 0005 	add.w	r0, sl, r5
 800b852:	f7ff ff8d 	bl	800b770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b856:	4620      	mov	r0, r4
 800b858:	f7ff ff76 	bl	800b748 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b85c:	9b01      	ldr	r3, [sp, #4]
 800b85e:	f8c4 a000 	str.w	sl, [r4]
 800b862:	60a3      	str	r3, [r4, #8]
 800b864:	b002      	add	sp, #8
 800b866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b86a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800b86a:	f100 0208 	add.w	r2, r0, #8
 800b86e:	6002      	str	r2, [r0, #0]
 800b870:	2200      	movs	r2, #0
 800b872:	6042      	str	r2, [r0, #4]
 800b874:	7202      	strb	r2, [r0, #8]
 800b876:	4770      	bx	lr

0800b878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 800b878:	b510      	push	{r4, lr}
 800b87a:	f100 0308 	add.w	r3, r0, #8
 800b87e:	4604      	mov	r4, r0
 800b880:	6003      	str	r3, [r0, #0]
 800b882:	f7ff ff92 	bl	800b7aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 800b886:	4620      	mov	r0, r4
 800b888:	bd10      	pop	{r4, pc}

0800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800b88a:	b510      	push	{r4, lr}
 800b88c:	4604      	mov	r4, r0
 800b88e:	f7ff ff5b 	bl	800b748 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b892:	4620      	mov	r0, r4
 800b894:	bd10      	pop	{r4, pc}

0800b896 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800b896:	6840      	ldr	r0, [r0, #4]
 800b898:	4770      	bx	lr

0800b89a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800b89a:	6800      	ldr	r0, [r0, #0]
 800b89c:	4408      	add	r0, r1
 800b89e:	4770      	bx	lr

0800b8a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800b8a0:	6800      	ldr	r0, [r0, #0]
 800b8a2:	4408      	add	r0, r1
 800b8a4:	4770      	bx	lr

0800b8a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800b8a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	4623      	mov	r3, r4
 800b8ac:	6840      	ldr	r0, [r0, #4]
 800b8ae:	f853 6b08 	ldr.w	r6, [r3], #8
 800b8b2:	429e      	cmp	r6, r3
 800b8b4:	bf18      	it	ne
 800b8b6:	68a3      	ldrne	r3, [r4, #8]
 800b8b8:	eb00 0502 	add.w	r5, r0, r2
 800b8bc:	bf08      	it	eq
 800b8be:	230f      	moveq	r3, #15
 800b8c0:	429d      	cmp	r5, r3
 800b8c2:	d80a      	bhi.n	800b8da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800b8c4:	b112      	cbz	r2, 800b8cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800b8c6:	4430      	add	r0, r6
 800b8c8:	f7ff ff52 	bl	800b770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b8cc:	6823      	ldr	r3, [r4, #0]
 800b8ce:	6065      	str	r5, [r4, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	555a      	strb	r2, [r3, r5]
 800b8d6:	b002      	add	sp, #8
 800b8d8:	bd70      	pop	{r4, r5, r6, pc}
 800b8da:	9200      	str	r2, [sp, #0]
 800b8dc:	460b      	mov	r3, r1
 800b8de:	2200      	movs	r2, #0
 800b8e0:	4601      	mov	r1, r0
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f7ff ff85 	bl	800b7f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800b8e8:	e7f0      	b.n	800b8cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800b8ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800b8ea:	b508      	push	{r3, lr}
 800b8ec:	e9d1 1200 	ldrd	r1, r2, [r1]
 800b8f0:	f7ff ffd9 	bl	800b8a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800b8f4:	bd08      	pop	{r3, pc}

0800b8f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 800b8f6:	b508      	push	{r3, lr}
 800b8f8:	f7ff fff7 	bl	800b8ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800b8fc:	bd08      	pop	{r3, pc}
	...

0800b900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800b900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b902:	4604      	mov	r4, r0
 800b904:	4608      	mov	r0, r1
 800b906:	460d      	mov	r5, r1
 800b908:	f7f4 fc5e 	bl	80001c8 <strlen>
 800b90c:	4b06      	ldr	r3, [pc, #24]	; (800b928 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800b90e:	9001      	str	r0, [sp, #4]
 800b910:	4602      	mov	r2, r0
 800b912:	2100      	movs	r1, #0
 800b914:	4620      	mov	r0, r4
 800b916:	f7ff ff1f 	bl	800b758 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800b91a:	9a01      	ldr	r2, [sp, #4]
 800b91c:	4629      	mov	r1, r5
 800b91e:	4620      	mov	r0, r4
 800b920:	f7ff ffc1 	bl	800b8a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800b924:	b003      	add	sp, #12
 800b926:	bd30      	pop	{r4, r5, pc}
 800b928:	0800d154 	.word	0x0800d154

0800b92c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 800b92c:	b508      	push	{r3, lr}
 800b92e:	f7ff ffe7 	bl	800b900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 800b932:	bd08      	pop	{r3, pc}

0800b934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800b934:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b936:	4604      	mov	r4, r0
 800b938:	4616      	mov	r6, r2
 800b93a:	460d      	mov	r5, r1
 800b93c:	b919      	cbnz	r1, 800b946 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800b93e:	b112      	cbz	r2, 800b946 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800b940:	480d      	ldr	r0, [pc, #52]	; (800b978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800b942:	f000 f884 	bl	800ba4e <_ZSt19__throw_logic_errorPKc>
 800b946:	1b73      	subs	r3, r6, r5
 800b948:	2b0f      	cmp	r3, #15
 800b94a:	9301      	str	r3, [sp, #4]
 800b94c:	d907      	bls.n	800b95e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800b94e:	2200      	movs	r2, #0
 800b950:	a901      	add	r1, sp, #4
 800b952:	4620      	mov	r0, r4
 800b954:	f7ff fed6 	bl	800b704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b958:	9b01      	ldr	r3, [sp, #4]
 800b95a:	6020      	str	r0, [r4, #0]
 800b95c:	60a3      	str	r3, [r4, #8]
 800b95e:	4632      	mov	r2, r6
 800b960:	4629      	mov	r1, r5
 800b962:	6820      	ldr	r0, [r4, #0]
 800b964:	f7ff ff3b 	bl	800b7de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800b968:	9b01      	ldr	r3, [sp, #4]
 800b96a:	6822      	ldr	r2, [r4, #0]
 800b96c:	6063      	str	r3, [r4, #4]
 800b96e:	2100      	movs	r1, #0
 800b970:	54d1      	strb	r1, [r2, r3]
 800b972:	b002      	add	sp, #8
 800b974:	bd70      	pop	{r4, r5, r6, pc}
 800b976:	bf00      	nop
 800b978:	0800d169 	.word	0x0800d169

0800b97c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	f100 0308 	add.w	r3, r0, #8
 800b982:	6003      	str	r3, [r0, #0]
 800b984:	e9d1 5200 	ldrd	r5, r2, [r1]
 800b988:	4604      	mov	r4, r0
 800b98a:	f04f 0300 	mov.w	r3, #0
 800b98e:	442a      	add	r2, r5
 800b990:	4629      	mov	r1, r5
 800b992:	f7ff ffcf 	bl	800b934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800b996:	4620      	mov	r0, r4
 800b998:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b99c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800b99c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b99e:	4604      	mov	r4, r0
 800b9a0:	4616      	mov	r6, r2
 800b9a2:	460d      	mov	r5, r1
 800b9a4:	b919      	cbnz	r1, 800b9ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b9a6:	b112      	cbz	r2, 800b9ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b9a8:	480d      	ldr	r0, [pc, #52]	; (800b9e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800b9aa:	f000 f850 	bl	800ba4e <_ZSt19__throw_logic_errorPKc>
 800b9ae:	1b73      	subs	r3, r6, r5
 800b9b0:	2b0f      	cmp	r3, #15
 800b9b2:	9301      	str	r3, [sp, #4]
 800b9b4:	d907      	bls.n	800b9c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	a901      	add	r1, sp, #4
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f7ff fea2 	bl	800b704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b9c0:	9b01      	ldr	r3, [sp, #4]
 800b9c2:	6020      	str	r0, [r4, #0]
 800b9c4:	60a3      	str	r3, [r4, #8]
 800b9c6:	4632      	mov	r2, r6
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	6820      	ldr	r0, [r4, #0]
 800b9cc:	f7ff ff0c 	bl	800b7e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800b9d0:	9b01      	ldr	r3, [sp, #4]
 800b9d2:	6822      	ldr	r2, [r4, #0]
 800b9d4:	6063      	str	r3, [r4, #4]
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	54d1      	strb	r1, [r2, r3]
 800b9da:	b002      	add	sp, #8
 800b9dc:	bd70      	pop	{r4, r5, r6, pc}
 800b9de:	bf00      	nop
 800b9e0:	0800d169 	.word	0x0800d169

0800b9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800b9e4:	b538      	push	{r3, r4, r5, lr}
 800b9e6:	f100 0308 	add.w	r3, r0, #8
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	6003      	str	r3, [r0, #0]
 800b9ee:	460d      	mov	r5, r1
 800b9f0:	b159      	cbz	r1, 800ba0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800b9f2:	4608      	mov	r0, r1
 800b9f4:	f7f4 fbe8 	bl	80001c8 <strlen>
 800b9f8:	182a      	adds	r2, r5, r0
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f04f 0300 	mov.w	r3, #0
 800ba00:	4629      	mov	r1, r5
 800ba02:	f7ff ffcb 	bl	800b99c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800ba06:	4620      	mov	r0, r4
 800ba08:	bd38      	pop	{r3, r4, r5, pc}
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	e7f5      	b.n	800b9fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800ba0e <_ZdlPv>:
 800ba0e:	f000 b85d 	b.w	800bacc <free>

0800ba12 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ba12:	b508      	push	{r3, lr}
 800ba14:	4780      	blx	r0
 800ba16:	f000 f820 	bl	800ba5a <abort>
	...

0800ba1c <_ZSt13get_terminatev>:
 800ba1c:	4b02      	ldr	r3, [pc, #8]	; (800ba28 <_ZSt13get_terminatev+0xc>)
 800ba1e:	6818      	ldr	r0, [r3, #0]
 800ba20:	f3bf 8f5b 	dmb	ish
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	2000001c 	.word	0x2000001c

0800ba2c <_ZSt9terminatev>:
 800ba2c:	b508      	push	{r3, lr}
 800ba2e:	f7ff fff5 	bl	800ba1c <_ZSt13get_terminatev>
 800ba32:	f7ff ffee 	bl	800ba12 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800ba38 <_ZSt15get_new_handlerv>:
 800ba38:	4b02      	ldr	r3, [pc, #8]	; (800ba44 <_ZSt15get_new_handlerv+0xc>)
 800ba3a:	6818      	ldr	r0, [r3, #0]
 800ba3c:	f3bf 8f5b 	dmb	ish
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	200003e0 	.word	0x200003e0

0800ba48 <_ZSt17__throw_bad_allocv>:
 800ba48:	b508      	push	{r3, lr}
 800ba4a:	f000 f806 	bl	800ba5a <abort>

0800ba4e <_ZSt19__throw_logic_errorPKc>:
 800ba4e:	b508      	push	{r3, lr}
 800ba50:	f000 f803 	bl	800ba5a <abort>

0800ba54 <_ZSt20__throw_length_errorPKc>:
 800ba54:	b508      	push	{r3, lr}
 800ba56:	f000 f800 	bl	800ba5a <abort>

0800ba5a <abort>:
 800ba5a:	b508      	push	{r3, lr}
 800ba5c:	2006      	movs	r0, #6
 800ba5e:	f000 f96b 	bl	800bd38 <raise>
 800ba62:	2001      	movs	r0, #1
 800ba64:	f7f9 f808 	bl	8004a78 <_exit>

0800ba68 <__errno>:
 800ba68:	4b01      	ldr	r3, [pc, #4]	; (800ba70 <__errno+0x8>)
 800ba6a:	6818      	ldr	r0, [r3, #0]
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop
 800ba70:	20000020 	.word	0x20000020

0800ba74 <__libc_init_array>:
 800ba74:	b570      	push	{r4, r5, r6, lr}
 800ba76:	4d0d      	ldr	r5, [pc, #52]	; (800baac <__libc_init_array+0x38>)
 800ba78:	4c0d      	ldr	r4, [pc, #52]	; (800bab0 <__libc_init_array+0x3c>)
 800ba7a:	1b64      	subs	r4, r4, r5
 800ba7c:	10a4      	asrs	r4, r4, #2
 800ba7e:	2600      	movs	r6, #0
 800ba80:	42a6      	cmp	r6, r4
 800ba82:	d109      	bne.n	800ba98 <__libc_init_array+0x24>
 800ba84:	4d0b      	ldr	r5, [pc, #44]	; (800bab4 <__libc_init_array+0x40>)
 800ba86:	4c0c      	ldr	r4, [pc, #48]	; (800bab8 <__libc_init_array+0x44>)
 800ba88:	f000 f980 	bl	800bd8c <_init>
 800ba8c:	1b64      	subs	r4, r4, r5
 800ba8e:	10a4      	asrs	r4, r4, #2
 800ba90:	2600      	movs	r6, #0
 800ba92:	42a6      	cmp	r6, r4
 800ba94:	d105      	bne.n	800baa2 <__libc_init_array+0x2e>
 800ba96:	bd70      	pop	{r4, r5, r6, pc}
 800ba98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba9c:	4798      	blx	r3
 800ba9e:	3601      	adds	r6, #1
 800baa0:	e7ee      	b.n	800ba80 <__libc_init_array+0xc>
 800baa2:	f855 3b04 	ldr.w	r3, [r5], #4
 800baa6:	4798      	blx	r3
 800baa8:	3601      	adds	r6, #1
 800baaa:	e7f2      	b.n	800ba92 <__libc_init_array+0x1e>
 800baac:	0800d19c 	.word	0x0800d19c
 800bab0:	0800d19c 	.word	0x0800d19c
 800bab4:	0800d19c 	.word	0x0800d19c
 800bab8:	0800d1a0 	.word	0x0800d1a0

0800babc <malloc>:
 800babc:	4b02      	ldr	r3, [pc, #8]	; (800bac8 <malloc+0xc>)
 800babe:	4601      	mov	r1, r0
 800bac0:	6818      	ldr	r0, [r3, #0]
 800bac2:	f000 b88d 	b.w	800bbe0 <_malloc_r>
 800bac6:	bf00      	nop
 800bac8:	20000020 	.word	0x20000020

0800bacc <free>:
 800bacc:	4b02      	ldr	r3, [pc, #8]	; (800bad8 <free+0xc>)
 800bace:	4601      	mov	r1, r0
 800bad0:	6818      	ldr	r0, [r3, #0]
 800bad2:	f000 b819 	b.w	800bb08 <_free_r>
 800bad6:	bf00      	nop
 800bad8:	20000020 	.word	0x20000020

0800badc <memcpy>:
 800badc:	440a      	add	r2, r1
 800bade:	4291      	cmp	r1, r2
 800bae0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bae4:	d100      	bne.n	800bae8 <memcpy+0xc>
 800bae6:	4770      	bx	lr
 800bae8:	b510      	push	{r4, lr}
 800baea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baf2:	4291      	cmp	r1, r2
 800baf4:	d1f9      	bne.n	800baea <memcpy+0xe>
 800baf6:	bd10      	pop	{r4, pc}

0800baf8 <memset>:
 800baf8:	4402      	add	r2, r0
 800bafa:	4603      	mov	r3, r0
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d100      	bne.n	800bb02 <memset+0xa>
 800bb00:	4770      	bx	lr
 800bb02:	f803 1b01 	strb.w	r1, [r3], #1
 800bb06:	e7f9      	b.n	800bafc <memset+0x4>

0800bb08 <_free_r>:
 800bb08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb0a:	2900      	cmp	r1, #0
 800bb0c:	d044      	beq.n	800bb98 <_free_r+0x90>
 800bb0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb12:	9001      	str	r0, [sp, #4]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f1a1 0404 	sub.w	r4, r1, #4
 800bb1a:	bfb8      	it	lt
 800bb1c:	18e4      	addlt	r4, r4, r3
 800bb1e:	f000 f927 	bl	800bd70 <__malloc_lock>
 800bb22:	4a1e      	ldr	r2, [pc, #120]	; (800bb9c <_free_r+0x94>)
 800bb24:	9801      	ldr	r0, [sp, #4]
 800bb26:	6813      	ldr	r3, [r2, #0]
 800bb28:	b933      	cbnz	r3, 800bb38 <_free_r+0x30>
 800bb2a:	6063      	str	r3, [r4, #4]
 800bb2c:	6014      	str	r4, [r2, #0]
 800bb2e:	b003      	add	sp, #12
 800bb30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb34:	f000 b922 	b.w	800bd7c <__malloc_unlock>
 800bb38:	42a3      	cmp	r3, r4
 800bb3a:	d908      	bls.n	800bb4e <_free_r+0x46>
 800bb3c:	6825      	ldr	r5, [r4, #0]
 800bb3e:	1961      	adds	r1, r4, r5
 800bb40:	428b      	cmp	r3, r1
 800bb42:	bf01      	itttt	eq
 800bb44:	6819      	ldreq	r1, [r3, #0]
 800bb46:	685b      	ldreq	r3, [r3, #4]
 800bb48:	1949      	addeq	r1, r1, r5
 800bb4a:	6021      	streq	r1, [r4, #0]
 800bb4c:	e7ed      	b.n	800bb2a <_free_r+0x22>
 800bb4e:	461a      	mov	r2, r3
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	b10b      	cbz	r3, 800bb58 <_free_r+0x50>
 800bb54:	42a3      	cmp	r3, r4
 800bb56:	d9fa      	bls.n	800bb4e <_free_r+0x46>
 800bb58:	6811      	ldr	r1, [r2, #0]
 800bb5a:	1855      	adds	r5, r2, r1
 800bb5c:	42a5      	cmp	r5, r4
 800bb5e:	d10b      	bne.n	800bb78 <_free_r+0x70>
 800bb60:	6824      	ldr	r4, [r4, #0]
 800bb62:	4421      	add	r1, r4
 800bb64:	1854      	adds	r4, r2, r1
 800bb66:	42a3      	cmp	r3, r4
 800bb68:	6011      	str	r1, [r2, #0]
 800bb6a:	d1e0      	bne.n	800bb2e <_free_r+0x26>
 800bb6c:	681c      	ldr	r4, [r3, #0]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	6053      	str	r3, [r2, #4]
 800bb72:	4421      	add	r1, r4
 800bb74:	6011      	str	r1, [r2, #0]
 800bb76:	e7da      	b.n	800bb2e <_free_r+0x26>
 800bb78:	d902      	bls.n	800bb80 <_free_r+0x78>
 800bb7a:	230c      	movs	r3, #12
 800bb7c:	6003      	str	r3, [r0, #0]
 800bb7e:	e7d6      	b.n	800bb2e <_free_r+0x26>
 800bb80:	6825      	ldr	r5, [r4, #0]
 800bb82:	1961      	adds	r1, r4, r5
 800bb84:	428b      	cmp	r3, r1
 800bb86:	bf04      	itt	eq
 800bb88:	6819      	ldreq	r1, [r3, #0]
 800bb8a:	685b      	ldreq	r3, [r3, #4]
 800bb8c:	6063      	str	r3, [r4, #4]
 800bb8e:	bf04      	itt	eq
 800bb90:	1949      	addeq	r1, r1, r5
 800bb92:	6021      	streq	r1, [r4, #0]
 800bb94:	6054      	str	r4, [r2, #4]
 800bb96:	e7ca      	b.n	800bb2e <_free_r+0x26>
 800bb98:	b003      	add	sp, #12
 800bb9a:	bd30      	pop	{r4, r5, pc}
 800bb9c:	200003e4 	.word	0x200003e4

0800bba0 <sbrk_aligned>:
 800bba0:	b570      	push	{r4, r5, r6, lr}
 800bba2:	4e0e      	ldr	r6, [pc, #56]	; (800bbdc <sbrk_aligned+0x3c>)
 800bba4:	460c      	mov	r4, r1
 800bba6:	6831      	ldr	r1, [r6, #0]
 800bba8:	4605      	mov	r5, r0
 800bbaa:	b911      	cbnz	r1, 800bbb2 <sbrk_aligned+0x12>
 800bbac:	f000 f88c 	bl	800bcc8 <_sbrk_r>
 800bbb0:	6030      	str	r0, [r6, #0]
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	f000 f887 	bl	800bcc8 <_sbrk_r>
 800bbba:	1c43      	adds	r3, r0, #1
 800bbbc:	d00a      	beq.n	800bbd4 <sbrk_aligned+0x34>
 800bbbe:	1cc4      	adds	r4, r0, #3
 800bbc0:	f024 0403 	bic.w	r4, r4, #3
 800bbc4:	42a0      	cmp	r0, r4
 800bbc6:	d007      	beq.n	800bbd8 <sbrk_aligned+0x38>
 800bbc8:	1a21      	subs	r1, r4, r0
 800bbca:	4628      	mov	r0, r5
 800bbcc:	f000 f87c 	bl	800bcc8 <_sbrk_r>
 800bbd0:	3001      	adds	r0, #1
 800bbd2:	d101      	bne.n	800bbd8 <sbrk_aligned+0x38>
 800bbd4:	f04f 34ff 	mov.w	r4, #4294967295
 800bbd8:	4620      	mov	r0, r4
 800bbda:	bd70      	pop	{r4, r5, r6, pc}
 800bbdc:	200003e8 	.word	0x200003e8

0800bbe0 <_malloc_r>:
 800bbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe4:	1ccd      	adds	r5, r1, #3
 800bbe6:	f025 0503 	bic.w	r5, r5, #3
 800bbea:	3508      	adds	r5, #8
 800bbec:	2d0c      	cmp	r5, #12
 800bbee:	bf38      	it	cc
 800bbf0:	250c      	movcc	r5, #12
 800bbf2:	2d00      	cmp	r5, #0
 800bbf4:	4607      	mov	r7, r0
 800bbf6:	db01      	blt.n	800bbfc <_malloc_r+0x1c>
 800bbf8:	42a9      	cmp	r1, r5
 800bbfa:	d905      	bls.n	800bc08 <_malloc_r+0x28>
 800bbfc:	230c      	movs	r3, #12
 800bbfe:	603b      	str	r3, [r7, #0]
 800bc00:	2600      	movs	r6, #0
 800bc02:	4630      	mov	r0, r6
 800bc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc08:	4e2e      	ldr	r6, [pc, #184]	; (800bcc4 <_malloc_r+0xe4>)
 800bc0a:	f000 f8b1 	bl	800bd70 <__malloc_lock>
 800bc0e:	6833      	ldr	r3, [r6, #0]
 800bc10:	461c      	mov	r4, r3
 800bc12:	bb34      	cbnz	r4, 800bc62 <_malloc_r+0x82>
 800bc14:	4629      	mov	r1, r5
 800bc16:	4638      	mov	r0, r7
 800bc18:	f7ff ffc2 	bl	800bba0 <sbrk_aligned>
 800bc1c:	1c43      	adds	r3, r0, #1
 800bc1e:	4604      	mov	r4, r0
 800bc20:	d14d      	bne.n	800bcbe <_malloc_r+0xde>
 800bc22:	6834      	ldr	r4, [r6, #0]
 800bc24:	4626      	mov	r6, r4
 800bc26:	2e00      	cmp	r6, #0
 800bc28:	d140      	bne.n	800bcac <_malloc_r+0xcc>
 800bc2a:	6823      	ldr	r3, [r4, #0]
 800bc2c:	4631      	mov	r1, r6
 800bc2e:	4638      	mov	r0, r7
 800bc30:	eb04 0803 	add.w	r8, r4, r3
 800bc34:	f000 f848 	bl	800bcc8 <_sbrk_r>
 800bc38:	4580      	cmp	r8, r0
 800bc3a:	d13a      	bne.n	800bcb2 <_malloc_r+0xd2>
 800bc3c:	6821      	ldr	r1, [r4, #0]
 800bc3e:	3503      	adds	r5, #3
 800bc40:	1a6d      	subs	r5, r5, r1
 800bc42:	f025 0503 	bic.w	r5, r5, #3
 800bc46:	3508      	adds	r5, #8
 800bc48:	2d0c      	cmp	r5, #12
 800bc4a:	bf38      	it	cc
 800bc4c:	250c      	movcc	r5, #12
 800bc4e:	4629      	mov	r1, r5
 800bc50:	4638      	mov	r0, r7
 800bc52:	f7ff ffa5 	bl	800bba0 <sbrk_aligned>
 800bc56:	3001      	adds	r0, #1
 800bc58:	d02b      	beq.n	800bcb2 <_malloc_r+0xd2>
 800bc5a:	6823      	ldr	r3, [r4, #0]
 800bc5c:	442b      	add	r3, r5
 800bc5e:	6023      	str	r3, [r4, #0]
 800bc60:	e00e      	b.n	800bc80 <_malloc_r+0xa0>
 800bc62:	6822      	ldr	r2, [r4, #0]
 800bc64:	1b52      	subs	r2, r2, r5
 800bc66:	d41e      	bmi.n	800bca6 <_malloc_r+0xc6>
 800bc68:	2a0b      	cmp	r2, #11
 800bc6a:	d916      	bls.n	800bc9a <_malloc_r+0xba>
 800bc6c:	1961      	adds	r1, r4, r5
 800bc6e:	42a3      	cmp	r3, r4
 800bc70:	6025      	str	r5, [r4, #0]
 800bc72:	bf18      	it	ne
 800bc74:	6059      	strne	r1, [r3, #4]
 800bc76:	6863      	ldr	r3, [r4, #4]
 800bc78:	bf08      	it	eq
 800bc7a:	6031      	streq	r1, [r6, #0]
 800bc7c:	5162      	str	r2, [r4, r5]
 800bc7e:	604b      	str	r3, [r1, #4]
 800bc80:	4638      	mov	r0, r7
 800bc82:	f104 060b 	add.w	r6, r4, #11
 800bc86:	f000 f879 	bl	800bd7c <__malloc_unlock>
 800bc8a:	f026 0607 	bic.w	r6, r6, #7
 800bc8e:	1d23      	adds	r3, r4, #4
 800bc90:	1af2      	subs	r2, r6, r3
 800bc92:	d0b6      	beq.n	800bc02 <_malloc_r+0x22>
 800bc94:	1b9b      	subs	r3, r3, r6
 800bc96:	50a3      	str	r3, [r4, r2]
 800bc98:	e7b3      	b.n	800bc02 <_malloc_r+0x22>
 800bc9a:	6862      	ldr	r2, [r4, #4]
 800bc9c:	42a3      	cmp	r3, r4
 800bc9e:	bf0c      	ite	eq
 800bca0:	6032      	streq	r2, [r6, #0]
 800bca2:	605a      	strne	r2, [r3, #4]
 800bca4:	e7ec      	b.n	800bc80 <_malloc_r+0xa0>
 800bca6:	4623      	mov	r3, r4
 800bca8:	6864      	ldr	r4, [r4, #4]
 800bcaa:	e7b2      	b.n	800bc12 <_malloc_r+0x32>
 800bcac:	4634      	mov	r4, r6
 800bcae:	6876      	ldr	r6, [r6, #4]
 800bcb0:	e7b9      	b.n	800bc26 <_malloc_r+0x46>
 800bcb2:	230c      	movs	r3, #12
 800bcb4:	603b      	str	r3, [r7, #0]
 800bcb6:	4638      	mov	r0, r7
 800bcb8:	f000 f860 	bl	800bd7c <__malloc_unlock>
 800bcbc:	e7a1      	b.n	800bc02 <_malloc_r+0x22>
 800bcbe:	6025      	str	r5, [r4, #0]
 800bcc0:	e7de      	b.n	800bc80 <_malloc_r+0xa0>
 800bcc2:	bf00      	nop
 800bcc4:	200003e4 	.word	0x200003e4

0800bcc8 <_sbrk_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4d06      	ldr	r5, [pc, #24]	; (800bce4 <_sbrk_r+0x1c>)
 800bccc:	2300      	movs	r3, #0
 800bcce:	4604      	mov	r4, r0
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	602b      	str	r3, [r5, #0]
 800bcd4:	f7f8 feda 	bl	8004a8c <_sbrk>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d102      	bne.n	800bce2 <_sbrk_r+0x1a>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	b103      	cbz	r3, 800bce2 <_sbrk_r+0x1a>
 800bce0:	6023      	str	r3, [r4, #0]
 800bce2:	bd38      	pop	{r3, r4, r5, pc}
 800bce4:	200003ec 	.word	0x200003ec

0800bce8 <_raise_r>:
 800bce8:	291f      	cmp	r1, #31
 800bcea:	b538      	push	{r3, r4, r5, lr}
 800bcec:	4604      	mov	r4, r0
 800bcee:	460d      	mov	r5, r1
 800bcf0:	d904      	bls.n	800bcfc <_raise_r+0x14>
 800bcf2:	2316      	movs	r3, #22
 800bcf4:	6003      	str	r3, [r0, #0]
 800bcf6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcfa:	bd38      	pop	{r3, r4, r5, pc}
 800bcfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bcfe:	b112      	cbz	r2, 800bd06 <_raise_r+0x1e>
 800bd00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd04:	b94b      	cbnz	r3, 800bd1a <_raise_r+0x32>
 800bd06:	4620      	mov	r0, r4
 800bd08:	f000 f830 	bl	800bd6c <_getpid_r>
 800bd0c:	462a      	mov	r2, r5
 800bd0e:	4601      	mov	r1, r0
 800bd10:	4620      	mov	r0, r4
 800bd12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd16:	f000 b817 	b.w	800bd48 <_kill_r>
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d00a      	beq.n	800bd34 <_raise_r+0x4c>
 800bd1e:	1c59      	adds	r1, r3, #1
 800bd20:	d103      	bne.n	800bd2a <_raise_r+0x42>
 800bd22:	2316      	movs	r3, #22
 800bd24:	6003      	str	r3, [r0, #0]
 800bd26:	2001      	movs	r0, #1
 800bd28:	e7e7      	b.n	800bcfa <_raise_r+0x12>
 800bd2a:	2400      	movs	r4, #0
 800bd2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd30:	4628      	mov	r0, r5
 800bd32:	4798      	blx	r3
 800bd34:	2000      	movs	r0, #0
 800bd36:	e7e0      	b.n	800bcfa <_raise_r+0x12>

0800bd38 <raise>:
 800bd38:	4b02      	ldr	r3, [pc, #8]	; (800bd44 <raise+0xc>)
 800bd3a:	4601      	mov	r1, r0
 800bd3c:	6818      	ldr	r0, [r3, #0]
 800bd3e:	f7ff bfd3 	b.w	800bce8 <_raise_r>
 800bd42:	bf00      	nop
 800bd44:	20000020 	.word	0x20000020

0800bd48 <_kill_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4d07      	ldr	r5, [pc, #28]	; (800bd68 <_kill_r+0x20>)
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	4604      	mov	r4, r0
 800bd50:	4608      	mov	r0, r1
 800bd52:	4611      	mov	r1, r2
 800bd54:	602b      	str	r3, [r5, #0]
 800bd56:	f7f8 fe7f 	bl	8004a58 <_kill>
 800bd5a:	1c43      	adds	r3, r0, #1
 800bd5c:	d102      	bne.n	800bd64 <_kill_r+0x1c>
 800bd5e:	682b      	ldr	r3, [r5, #0]
 800bd60:	b103      	cbz	r3, 800bd64 <_kill_r+0x1c>
 800bd62:	6023      	str	r3, [r4, #0]
 800bd64:	bd38      	pop	{r3, r4, r5, pc}
 800bd66:	bf00      	nop
 800bd68:	200003ec 	.word	0x200003ec

0800bd6c <_getpid_r>:
 800bd6c:	f7f8 be6c 	b.w	8004a48 <_getpid>

0800bd70 <__malloc_lock>:
 800bd70:	4801      	ldr	r0, [pc, #4]	; (800bd78 <__malloc_lock+0x8>)
 800bd72:	f000 b809 	b.w	800bd88 <__retarget_lock_acquire_recursive>
 800bd76:	bf00      	nop
 800bd78:	200003f0 	.word	0x200003f0

0800bd7c <__malloc_unlock>:
 800bd7c:	4801      	ldr	r0, [pc, #4]	; (800bd84 <__malloc_unlock+0x8>)
 800bd7e:	f000 b804 	b.w	800bd8a <__retarget_lock_release_recursive>
 800bd82:	bf00      	nop
 800bd84:	200003f0 	.word	0x200003f0

0800bd88 <__retarget_lock_acquire_recursive>:
 800bd88:	4770      	bx	lr

0800bd8a <__retarget_lock_release_recursive>:
 800bd8a:	4770      	bx	lr

0800bd8c <_init>:
 800bd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd8e:	bf00      	nop
 800bd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd92:	bc08      	pop	{r3}
 800bd94:	469e      	mov	lr, r3
 800bd96:	4770      	bx	lr

0800bd98 <_fini>:
 800bd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9a:	bf00      	nop
 800bd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd9e:	bc08      	pop	{r3}
 800bda0:	469e      	mov	lr, r3
 800bda2:	4770      	bx	lr
